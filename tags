!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AA	include/packet.h	64;"	d
AA_CLR	include/packet.h	66;"	d
AA_MASK	include/packet.h	62;"	d
AA_SET	include/packet.h	65;"	d
AA_SHIFT	include/packet.h	63;"	d
AD	include/packet.h	95;"	d
ADDITIONAL_AAAA_SECTION	include/dns.h	/^	ADDITIONAL_AAAA_SECTION,$/;"	e	enum:rr_section
ADDITIONAL_A_SECTION	include/dns.h	/^	ADDITIONAL_A_SECTION = ADDITIONAL_SECTION,$/;"	e	enum:rr_section
ADDITIONAL_OTHER_SECTION	include/dns.h	/^	ADDITIONAL_OTHER_SECTION,$/;"	e	enum:rr_section
ADDITIONAL_SECTION	include/dns.h	/^	ADDITIONAL_SECTION,$/;"	e	enum:rr_section
AD_CLR	include/packet.h	97;"	d
AD_MASK	include/packet.h	93;"	d
AD_SET	include/packet.h	96;"	d
AD_SHIFT	include/packet.h	94;"	d
AF_INET6	compat/fake-rfc2553.h	84;"	d
AF_INET6	include/config.h	681;"	d
AI_CANONNAME	compat/fake-rfc2553.h	112;"	d
AI_NUMERICHOST	compat/fake-rfc2553.h	115;"	d
AI_PASSIVE	compat/fake-rfc2553.h	109;"	d
ALIGNMENT	nsd/region-allocator.c	19;"	d	file:
ALIGNMENT	nsd/region-allocator.c	23;"	d	file:
ALIGNMENT	nsd/region-allocator.c	25;"	d	file:
ALIGN_UP	include/util.h	30;"	d
ALIGN_UP	nsd/region-allocator.c	21;"	d	file:
ALIGN_UP	nsd/region-allocator.c	476;"	d	file:
ANCOUNT	include/packet.h	124;"	d
ANCOUNT_SET	include/packet.h	125;"	d
ANSWER_SECTION	include/dns.h	/^	ANSWER_SECTION,$/;"	e	enum:rr_section
ANY	include/configparser.h	/^     ANY = 263,$/;"	e	enum:yytokentype
ANY	include/configparser.h	129;"	d
ANY	nsd/configparser.c	/^     ANY = 263,$/;"	e	enum:yytokentype	file:
ANY	nsd/configparser.c	216;"	d	file:
APL_LENGTH_MASK	include/rdata.h	18;"	d
APL_NEGATION_MASK	include/rdata.h	17;"	d
APP	Makefile	/^APP = fastDNS$/;"	m
ARCOUNT	include/packet.h	132;"	d
ARCOUNT_SET	include/packet.h	133;"	d
ATTR_FORMAT	include/config.h	661;"	d
ATTR_FORMAT	include/config.h	664;"	d
ATTR_UNUSED	include/buffer.h	/^buffer_invariant(buffer_type *ATTR_UNUSED(buffer))$/;"	f
ATTR_UNUSED	include/config.h	667;"	d
ATTR_UNUSED	include/config.h	669;"	d
ATTR_UNUSED	include/config.h	671;"	d
ATTR_UNUSED	nsd/rdata.c	/^		    rr_type* ATTR_UNUSED(rr))$/;"	f	file:
AUTHORITY_SECTION	include/dns.h	/^	AUTHORITY_SECTION,$/;"	e	enum:rr_section
AXFR_MAX_MESSAGE_LEN	include/axfr.h	20;"	d
Assert	compat/b64_ntop.c	56;"	d	file:
Assert	compat/b64_pton.c	56;"	d	file:
B64BUFSIZE	include/zonec.h	16;"	d
BEGIN	nsd/configlexer.c	126;"	d	file:
BEGIN	nsd/zlexer.c	126;"	d	file:
BIND8_STATS	include/config.h	5;"	d
BITLAB	include/zparser.h	/^     BITLAB = 335,$/;"	e	enum:yytokentype
BITLAB	include/zparser.h	211;"	d
BITLAB	nsd/zparser.c	/^     BITLAB = 335,$/;"	e	enum:yytokentype	file:
BITLAB	nsd/zparser.c	315;"	d	file:
BLACK	nsd/rbtree.c	17;"	d	file:
BUFLEN	main.c	45;"	d	file:
Base64	compat/b64_ntop.c	/^static const char Base64[] =$/;"	v	file:
Base64	compat/b64_pton.c	/^static const char Base64[] =$/;"	v	file:
CD	include/packet.h	89;"	d
CD_CLR	include/packet.h	91;"	d
CD_MASK	include/packet.h	87;"	d
CD_SET	include/packet.h	90;"	d
CD_SHIFT	include/packet.h	88;"	d
CLASS_ANY	include/dns.h	83;"	d
CLASS_CH	include/dns.h	80;"	d
CLASS_CS	include/dns.h	79;"	d
CLASS_HS	include/dns.h	81;"	d
CLASS_IN	include/dns.h	78;"	d
CLASS_NONE	include/dns.h	82;"	d
COLON	include/configparser.h	/^     COLON = 262,$/;"	e	enum:yytokentype
COLON	include/configparser.h	128;"	d
COLON	nsd/configparser.c	/^     COLON = 262,$/;"	e	enum:yytokentype	file:
COLON	nsd/configparser.c	215;"	d	file:
COMMENT	include/configparser.h	/^     COMMENT = 261,$/;"	e	enum:yytokentype
COMMENT	include/configparser.h	127;"	d
COMMENT	nsd/configparser.c	/^     COMMENT = 261,$/;"	e	enum:yytokentype	file:
COMMENT	nsd/configparser.c	214;"	d	file:
COMPAT_MEMCMP_H	compat/memcmp.h	9;"	d
COMPUTE	nsd/util.c	835;"	d	file:
CONFIGDIR	include/config.h	11;"	d
CONFIGFILE	include/config.h	14;"	d
CONFIGFILE1	nsd/fdns.c	11;"	d	file:
CONFIGYYRENAME_H	include/configyyrename.h	11;"	d
CONFIG_DEFINES	include/config.h	756;"	d
DAEMON_REMOTE_H	include/remote.h	47;"	d
DBFILE	include/config.h	21;"	d
DEBUG	include/util.h	241;"	d
DEBUG	include/util.h	243;"	d
DEBUG_DBACCESS	include/util.h	233;"	d
DEBUG_IPC	include/util.h	236;"	d
DEBUG_NAME_COMPRESSION	include/util.h	234;"	d
DEBUG_PARSER	include/util.h	230;"	d
DEBUG_QUERY	include/util.h	232;"	d
DEBUG_XFRD	include/util.h	235;"	d
DEBUG_ZONEC	include/util.h	231;"	d
DEFAULT_CHUNK_SIZE	include/region-allocator.h	17;"	d
DEFAULT_INITIAL_CLEANUP_SIZE	include/region-allocator.h	19;"	d
DEFAULT_LARGE_OBJECT_SIZE	include/region-allocator.h	18;"	d
DEFAULT_TTL	include/zonec.h	35;"	d
DIFFFILE_H	include/difffile.h	10;"	d
DIFF_PART_XFRF	include/difffile.h	20;"	d
DIFF_PART_XXFR	include/difffile.h	19;"	d
DNAME_NORMALIZE	include/dname.h	20;"	d
DNAME_NORMALIZE	include/dname.h	22;"	d
DNSSEC_OK_MASK	include/edns.h	19;"	d
DOLLAR_ORIGIN	include/zparser.h	/^     DOLLAR_ORIGIN = 330,$/;"	e	enum:yytokentype
DOLLAR_ORIGIN	include/zparser.h	206;"	d
DOLLAR_ORIGIN	nsd/zparser.c	/^     DOLLAR_ORIGIN = 330,$/;"	e	enum:yytokentype	file:
DOLLAR_ORIGIN	nsd/zparser.c	310;"	d	file:
DOLLAR_TTL	include/zparser.h	/^     DOLLAR_TTL = 329,$/;"	e	enum:yytokentype
DOLLAR_TTL	include/zparser.h	205;"	d
DOLLAR_TTL	nsd/zparser.c	/^     DOLLAR_TTL = 329,$/;"	e	enum:yytokentype	file:
DOLLAR_TTL	nsd/zparser.c	309;"	d	file:
DOMAIN	include/udbzone.h	143;"	d
DOTEST	compat/snprintf.c	837;"	d	file:
EAI_MEMORY	compat/fake-rfc2553.h	133;"	d
EAI_NODATA	compat/fake-rfc2553.h	130;"	d
EAI_NONAME	compat/fake-rfc2553.h	136;"	d
EAI_SYSTEM	compat/fake-rfc2553.h	139;"	d
ECHO	nsd/configlexer.c	1252;"	d	file:
ECHO	nsd/zlexer.c	717;"	d	file:
EDNS_ERROR	include/edns.h	/^	EDNS_ERROR$/;"	e	enum:edns_status
EDNS_MAX_MESSAGE_LEN	include/config.h	24;"	d
EDNS_NOT_PRESENT	include/edns.h	/^	EDNS_NOT_PRESENT,$/;"	e	enum:edns_status
EDNS_OK	include/edns.h	/^	EDNS_OK,$/;"	e	enum:edns_status
EOB_ACT_CONTINUE_SCAN	nsd/configlexer.c	166;"	d	file:
EOB_ACT_CONTINUE_SCAN	nsd/zlexer.c	166;"	d	file:
EOB_ACT_END_OF_FILE	nsd/configlexer.c	167;"	d	file:
EOB_ACT_END_OF_FILE	nsd/zlexer.c	167;"	d	file:
EOB_ACT_LAST_MATCH	nsd/configlexer.c	168;"	d	file:
EOB_ACT_LAST_MATCH	nsd/zlexer.c	168;"	d	file:
EUI48ADDRLEN	include/dns.h	173;"	d
EUI64ADDRLEN	include/dns.h	174;"	d
EVLOOP_ONCE	include/mini_event.h	150;"	d
EV_PERSIST	include/mini_event.h	71;"	d
EV_READ	include/mini_event.h	65;"	d
EV_SIGNAL	include/mini_event.h	69;"	d
EV_TIMEOUT	include/mini_event.h	63;"	d
EV_WRITE	include/mini_event.h	67;"	d
EXIT_SUCCESS	nsd/configparser.c	432;"	d	file:
EXIT_SUCCESS	nsd/configparser.c	460;"	d	file:
EXIT_SUCCESS	nsd/zparser.c	475;"	d	file:
EXIT_SUCCESS	nsd/zparser.c	503;"	d	file:
EXPECT_OWNER	nsd/zlexer.c	/^	EXPECT_OWNER,$/;"	e	enum:lexer_state	file:
EXTRA_DOMAIN_NUMBERS	include/nsd.h	8;"	d
FACILITY	include/config.h	27;"	d
FLAGS	include/packet.h	116;"	d
FLAGS_SET	include/packet.h	117;"	d
FLEXINT_H	nsd/configlexer.c	30;"	d	file:
FLEXINT_H	nsd/zlexer.c	30;"	d	file:
FLEX_BETA	nsd/configlexer.c	14;"	d	file:
FLEX_BETA	nsd/zlexer.c	14;"	d	file:
FLEX_SCANNER	nsd/configlexer.c	9;"	d	file:
FLEX_SCANNER	nsd/zlexer.c	9;"	d	file:
HASHLEN	nsd/lookup3.c	841;"	d	file:
HASHSTATE	nsd/lookup3.c	840;"	d	file:
HASH_BIG_ENDIAN	nsd/lookup3.c	102;"	d	file:
HASH_BIG_ENDIAN	nsd/lookup3.c	84;"	d	file:
HASH_BIG_ENDIAN	nsd/lookup3.c	89;"	d	file:
HASH_BIG_ENDIAN	nsd/lookup3.c	94;"	d	file:
HASH_BIG_ENDIAN	nsd/lookup3.c	98;"	d	file:
HASH_LITTLE_ENDIAN	nsd/lookup3.c	101;"	d	file:
HASH_LITTLE_ENDIAN	nsd/lookup3.c	83;"	d	file:
HASH_LITTLE_ENDIAN	nsd/lookup3.c	88;"	d	file:
HASH_LITTLE_ENDIAN	nsd/lookup3.c	93;"	d	file:
HASH_LITTLE_ENDIAN	nsd/lookup3.c	97;"	d	file:
HAVE_ALARM	include/config.h	30;"	d
HAVE_ARPA_INET_H	include/config.h	39;"	d
HAVE_ATTR_FORMAT	include/config.h	42;"	d
HAVE_ATTR_UNUSED	include/config.h	45;"	d
HAVE_BASENAME	include/config.h	54;"	d
HAVE_CHOWN	include/config.h	57;"	d
HAVE_CHROOT	include/config.h	60;"	d
HAVE_CTIME_R_PROTO	include/config.h	63;"	d
HAVE_DUP2	include/config.h	66;"	d
HAVE_ENDPWENT	include/config.h	69;"	d
HAVE_EVENT_BASE_FREE	include/mini_event.h	59;"	d
HAVE_EVP_SHA1	include/config.h	87;"	d
HAVE_EVP_SHA256	include/config.h	90;"	d
HAVE_FCNTL_H	include/config.h	99;"	d
HAVE_FORK	include/config.h	102;"	d
HAVE_FREEADDRINFO	include/config.h	105;"	d
HAVE_FSEEKO	include/config.h	108;"	d
HAVE_GAI_STRERROR	include/config.h	111;"	d
HAVE_GETADDRINFO	include/config.h	114;"	d
HAVE_GETHOSTNAME	include/config.h	117;"	d
HAVE_GETNAMEINFO	include/config.h	120;"	d
HAVE_GETPWNAM	include/config.h	123;"	d
HAVE_GRP_H	include/config.h	126;"	d
HAVE_INET_ATON	include/config.h	129;"	d
HAVE_INET_NTOP	include/config.h	132;"	d
HAVE_INET_PTON	include/config.h	135;"	d
HAVE_INITGROUPS	include/config.h	138;"	d
HAVE_INTTYPES_H	include/config.h	141;"	d
HAVE_LIBCRYPTO	include/config.h	144;"	d
HAVE_LIMITS_H	include/config.h	147;"	d
HAVE_MALLOC	include/config.h	151;"	d
HAVE_MEMCPY	include/config.h	154;"	d
HAVE_MEMMOVE	include/config.h	157;"	d
HAVE_MEMORY_H	include/config.h	160;"	d
HAVE_MEMSET	include/config.h	163;"	d
HAVE_MMAP	include/config.h	166;"	d
HAVE_NETDB_H	include/config.h	172;"	d
HAVE_NETINET_IN_H	include/config.h	175;"	d
HAVE_OPENSSL_ERR_H	include/config.h	178;"	d
HAVE_OPENSSL_RAND_H	include/config.h	181;"	d
HAVE_OPENSSL_SSL_H	include/config.h	184;"	d
HAVE_PSELECT	include/config.h	187;"	d
HAVE_PSELECT_PROTO	include/config.h	190;"	d
HAVE_PWRITE	include/config.h	193;"	d
HAVE_RECVMMSG	include/config.h	196;"	d
HAVE_SENDMMSG	include/config.h	199;"	d
HAVE_SETREGID	include/config.h	202;"	d
HAVE_SETRESGID	include/config.h	205;"	d
HAVE_SETRESUID	include/config.h	208;"	d
HAVE_SETREUID	include/config.h	211;"	d
HAVE_SIGACTION	include/config.h	217;"	d
HAVE_SIGNAL_H	include/config.h	220;"	d
HAVE_SIGPROCMASK	include/config.h	223;"	d
HAVE_SNPRINTF	include/config.h	226;"	d
HAVE_SOCKET	include/config.h	229;"	d
HAVE_SSL	include/config.h	232;"	d
HAVE_STDARG_H	include/config.h	235;"	d
HAVE_STDDEF_H	include/config.h	238;"	d
HAVE_STDINT_H	include/config.h	241;"	d
HAVE_STDLIB_H	include/config.h	244;"	d
HAVE_STRCASECMP	include/config.h	247;"	d
HAVE_STRCHR	include/config.h	250;"	d
HAVE_STRDUP	include/config.h	253;"	d
HAVE_STRERROR	include/config.h	256;"	d
HAVE_STRINGS_H	include/config.h	259;"	d
HAVE_STRING_H	include/config.h	262;"	d
HAVE_STRNCASECMP	include/config.h	271;"	d
HAVE_STRPTIME	include/config.h	274;"	d
HAVE_STRPTIME	include/config.h	729;"	d
HAVE_STRTOL	include/config.h	277;"	d
HAVE_STRUCT_TIMESPEC	include/config.h	280;"	d
HAVE_SYSLOG_H	include/config.h	283;"	d
HAVE_SYS_BITYPES_H	include/config.h	286;"	d
HAVE_SYS_PARAM_H	include/config.h	292;"	d
HAVE_SYS_SELECT_H	include/config.h	295;"	d
HAVE_SYS_SOCKET_H	include/config.h	298;"	d
HAVE_SYS_STAT_H	include/config.h	301;"	d
HAVE_SYS_TYPES_H	include/config.h	304;"	d
HAVE_SYS_WAIT_H	include/config.h	307;"	d
HAVE_TIME_H	include/config.h	313;"	d
HAVE_TZSET	include/config.h	316;"	d
HAVE_UNISTD_H	include/config.h	319;"	d
HAVE_VFORK	include/config.h	325;"	d
HAVE_WORKING_FORK	include/config.h	331;"	d
HAVE_WORKING_VFORK	include/config.h	334;"	d
HAVE_WRITEV	include/config.h	337;"	d
ID	include/packet.h	112;"	d
IDENTITY	include/config.h	340;"	d
ID_PIPE_NUM	include/xfrd-tcp.h	70;"	d
ID_SET	include/packet.h	113;"	d
ILNP_MAXDIGITS	include/zonec.c	47;"	d	file:
ILNP_MAXDIGITS	nsd/zonec.c	47;"	d	file:
ILNP_NUMGROUPS	include/zonec.c	48;"	d	file:
ILNP_NUMGROUPS	nsd/zonec.c	48;"	d	file:
IN6ADDRSZ	compat/inet_ntop.c	33;"	d	file:
IN6_IS_ADDR_LOOPBACK	compat/fake-rfc2553.h	62;"	d
INET6	include/config.h	343;"	d
INITIAL	nsd/configlexer.c	1164;"	d	file:
INITIAL	nsd/zlexer.c	629;"	d	file:
INT16SZ	compat/inet_ntop.c	37;"	d	file:
INT16_MAX	nsd/configlexer.c	72;"	d	file:
INT16_MAX	nsd/zlexer.c	72;"	d	file:
INT16_MIN	nsd/configlexer.c	63;"	d	file:
INT16_MIN	nsd/zlexer.c	63;"	d	file:
INT32_MAX	nsd/configlexer.c	75;"	d	file:
INT32_MAX	nsd/zlexer.c	75;"	d	file:
INT32_MIN	nsd/configlexer.c	66;"	d	file:
INT32_MIN	nsd/zlexer.c	66;"	d	file:
INT8_MAX	nsd/configlexer.c	69;"	d	file:
INT8_MAX	nsd/zlexer.c	69;"	d	file:
INT8_MIN	nsd/configlexer.c	60;"	d	file:
INT8_MIN	nsd/zlexer.c	60;"	d	file:
INT_MAX	compat/fake-rfc2553.h	126;"	d
IP4ADDRLEN	include/dns.h	171;"	d
IP6ADDRLEN	include/dns.h	172;"	d
IPSECKEY_DNAME	include/zonec.h	26;"	d
IPSECKEY_IP4	include/zonec.h	24;"	d
IPSECKEY_IP6	include/zonec.h	25;"	d
IPSECKEY_NOGATEWAY	include/zonec.h	23;"	d
IPV4_MINIMAL_RESPONSE_SIZE	include/packet.h	143;"	d
IPV6_MINIMAL_RESPONSE_SIZE	include/packet.h	144;"	d
IPV6_MIN_MTU	include/config.h	677;"	d
IP_DEFTTL	ipv4.c	17;"	d	file:
IP_HDRLEN	ipv4.c	19;"	d	file:
IP_VERSION	include/ipv4.h	4;"	d
IP_VERSION	ipv4.c	18;"	d	file:
IP_VHL_DEF	ipv4.c	20;"	d	file:
ITERATED_HASH_H	include/iterated_hash.h	11;"	d
LETTER	include/configparser.h	/^     LETTER = 259,$/;"	e	enum:yytokentype
LETTER	include/configparser.h	125;"	d
LETTER	nsd/configparser.c	/^     LETTER = 259,$/;"	e	enum:yytokentype	file:
LETTER	nsd/configparser.c	212;"	d	file:
LEXOUT	nsd/configlexer.c	1088;"	d	file:
LEXOUT	nsd/zlexer.c	548;"	d	file:
LINEBUFSZ	include/zonec.h	28;"	d
LOG_ERR	include/util.h	24;"	d
LOG_INFO	include/util.h	27;"	d
LOG_NOTICE	include/util.h	26;"	d
LOG_WARNING	include/util.h	25;"	d
MAP_ANON	nsd/util.c	37;"	d	file:
MAP_ANONYMOUS	nsd/util.c	35;"	d	file:
MAP_FAILED	nsd/udb.c	24;"	d	file:
MAXDOMAINLEN	include/dns.h	162;"	d
MAXHOSTNAMELEN	include/config.h	747;"	d
MAXINCLUDES	include/config.h	687;"	d
MAXLABELLEN	include/dns.h	161;"	d
MAXLEN	nsd/lookup3.c	843;"	d	file:
MAXPAIR	nsd/lookup3.c	842;"	d	file:
MAXRDATALEN	include/dns.h	164;"	d
MAXRRSPP	include/packet.h	140;"	d
MAXSYSLOGMSGLEN	include/config.h	346;"	d
MAXTOKENSLEN	include/zonec.h	15;"	d
MAX_COMPRESSED_DNAMES	include/packet.h	141;"	d
MAX_COMPRESSION_OFFSET	include/packet.h	142;"	d
MAX_CORES	nsd/fdns.c	10;"	d	file:
MAX_FDS	include/mini_event.h	77;"	d
MAX_INTERFACES	include/config.h	349;"	d
MAX_PACKET_SIZE	include/packet.h	136;"	d
MAX_PKT_BURST	main.c	42;"	d	file:
MAX_RDLENGTH	include/dns.h	165;"	d
MAX_RR_SIZE	include/dns.h	168;"	d
MAX_SIG	include/mini_event.h	79;"	d
MBUF_CACHE_SIZES	main.c	40;"	d	file:
MINIMAL_RESPONSES	include/config.h	355;"	d
MINI_EVENT_H	include/mini_event.h	53;"	d
MMAP_ALLOC_CHUNK_SIZE	include/region-allocator.h	32;"	d
MMAP_ALLOC_HEADER_SIZE	include/region-allocator.h	29;"	d
MMAP_ALLOC_INITIAL_CLEANUP_SIZE	include/region-allocator.h	34;"	d
MMAP_ALLOC_LARGE_OBJECT_SIZE	include/region-allocator.h	33;"	d
MSB_32	nsd/util.c	47;"	d	file:
MS_SYNC	nsd/udb.c	27;"	d	file:
NANOSECONDS_PER_SECOND	nsd/util.c	392;"	d	file:
NARRAY	nsd/udbradtree.c	1066;"	d	file:
NDEBUG	include/config.h	361;"	d
NETIO_EVENT_EXCEPT	include/netio.h	/^	NETIO_EVENT_EXCEPT  = 4,$/;"	e	enum:netio_event_types
NETIO_EVENT_NONE	include/netio.h	/^	NETIO_EVENT_NONE    = 0,$/;"	e	enum:netio_event_types
NETIO_EVENT_READ	include/netio.h	/^	NETIO_EVENT_READ    = 1,$/;"	e	enum:netio_event_types
NETIO_EVENT_TIMEOUT	include/netio.h	/^	NETIO_EVENT_TIMEOUT = 8,$/;"	e	enum:netio_event_types
NETIO_EVENT_WRITE	include/netio.h	/^	NETIO_EVENT_WRITE   = 2,$/;"	e	enum:netio_event_types
NEWLINE	include/configparser.h	/^     NEWLINE = 260,$/;"	e	enum:yytokentype
NEWLINE	include/configparser.h	126;"	d
NEWLINE	nsd/configparser.c	/^     NEWLINE = 260,$/;"	e	enum:yytokentype	file:
NEWLINE	nsd/configparser.c	213;"	d	file:
NI_MAXHOST	compat/fake-rfc2553.h	122;"	d
NI_MAXSERV	compat/fake-rfc2553.h	119;"	d
NI_NAMEREQD	compat/fake-rfc2553.h	102;"	d
NI_NUMERICHOST	compat/fake-rfc2553.h	99;"	d
NI_NUMERICSERV	compat/fake-rfc2553.h	105;"	d
NL	include/zparser.h	/^     NL = 331,$/;"	e	enum:yytokentype
NL	include/zparser.h	207;"	d
NL	nsd/zparser.c	/^     NL = 331,$/;"	e	enum:yytokentype	file:
NL	nsd/zparser.c	311;"	d	file:
NSCOUNT	include/packet.h	128;"	d
NSCOUNT_SET	include/packet.h	129;"	d
NSD_CONTROL_PORT	include/config.h	368;"	d
NSD_CONTROL_VERSION	include/config.h	371;"	d
NSD_IPC_H	include/ipc.h	11;"	d
NSD_RC_DISCARD	include/dns.h	/^	NSD_RC_DISCARD  = -1,$/;"	e	enum:nsd_rc
NSD_RC_FORMAT	include/dns.h	/^	NSD_RC_FORMAT   = RCODE_FORMAT,$/;"	e	enum:nsd_rc
NSD_RC_IMPL	include/dns.h	/^	NSD_RC_IMPL     = RCODE_IMPL,$/;"	e	enum:nsd_rc
NSD_RC_NOTAUTH	include/dns.h	/^	NSD_RC_NOTAUTH  = RCODE_NOTAUTH$/;"	e	enum:nsd_rc
NSD_RC_NXDOMAIN	include/dns.h	/^	NSD_RC_NXDOMAIN = RCODE_NXDOMAIN,$/;"	e	enum:nsd_rc
NSD_RC_OK	include/dns.h	/^	NSD_RC_OK       = RCODE_OK,$/;"	e	enum:nsd_rc
NSD_RC_REFUSE	include/dns.h	/^	NSD_RC_REFUSE   = RCODE_REFUSE,$/;"	e	enum:nsd_rc
NSD_RC_SERVFAIL	include/dns.h	/^	NSD_RC_SERVFAIL = RCODE_SERVFAIL,$/;"	e	enum:nsd_rc
NSD_START_PATH	include/config.h	374;"	d
NSEC3	include/config.h	377;"	d
NSEC3_H	include/nsec3.h	10;"	d
NSEC3_HASH_LEN	include/dns.h	176;"	d
NSEC3_RDATA_BITMAP	nsd/nsec3.c	22;"	d	file:
NSEC3_SHA1_HASH	include/iterated_hash.h	16;"	d
NSEC_WINDOW_BITS_COUNT	include/zonec.h	20;"	d
NSEC_WINDOW_BITS_SIZE	include/zonec.h	21;"	d
NSEC_WINDOW_COUNT	include/zonec.h	19;"	d
NSID_CODE	include/edns.h	18;"	d
NSTR	nsd/udbradtree.c	1067;"	d	file:
NS_IN6ADDRSZ	compat/inet_pton.c	43;"	d	file:
NS_INADDRSZ	compat/inet_pton.c	47;"	d	file:
NS_INT16SZ	compat/inet_pton.c	39;"	d	file:
NUDP_PORT	ipv4.c	16;"	d	file:
NUM_MBUFS	main.c	41;"	d	file:
OPCODE	include/packet.h	70;"	d
OPCODE_IQUERY	include/dns.h	42;"	d
OPCODE_MASK	include/packet.h	68;"	d
OPCODE_NOTIFY	include/dns.h	44;"	d
OPCODE_QUERY	include/dns.h	41;"	d
OPCODE_SET	include/packet.h	71;"	d
OPCODE_SHIFT	include/packet.h	69;"	d
OPCODE_STATUS	include/dns.h	43;"	d
OPCODE_UPDATE	include/dns.h	45;"	d
OPTIONAL_AUTHORITY_SECTION	include/dns.h	/^	OPTIONAL_AUTHORITY_SECTION,$/;"	e	enum:rr_section
OPTIONS_H	include/options.h	11;"	d
OPT_HDR	include/edns.h	17;"	d
OPT_LEN	include/edns.h	15;"	d
OPT_RDATA	include/edns.h	16;"	d
OUTYY	nsd/configparser.c	95;"	d	file:
PACKAGE_BUGREPORT	include/config.h	380;"	d
PACKAGE_NAME	include/config.h	383;"	d
PACKAGE_STRING	include/config.h	386;"	d
PACKAGE_TARNAME	include/config.h	389;"	d
PACKAGE_URL	include/config.h	392;"	d
PACKAGE_VERSION	include/config.h	395;"	d
PACKET_READ_SIZE	main.c	35;"	d	file:
PADDING	include/util.h	32;"	d
PARSING_OWNER	nsd/zlexer.c	/^	PARSING_OWNER,$/;"	e	enum:lexer_state	file:
PARSING_RDATA	nsd/zlexer.c	/^	PARSING_RDATA$/;"	e	enum:lexer_state	file:
PARSING_TTL_CLASS_TYPE	nsd/zlexer.c	/^	PARSING_TTL_CLASS_TYPE,$/;"	e	enum:lexer_state	file:
PATHSEP	nsd/dbcreate.c	28;"	d	file:
PATTERN_IMPLICIT_MARKER	include/options.h	144;"	d
PF_INET	compat/fake-rfc2553.h	88;"	d
PF_INET6	compat/fake-rfc2553.h	91;"	d
PIDFILE	include/config.h	398;"	d
PREV	include/zparser.h	/^     PREV = 334,$/;"	e	enum:yytokentype
PREV	include/zparser.h	210;"	d
PREV	nsd/zparser.c	/^     PREV = 334,$/;"	e	enum:yytokentype	file:
PREV	nsd/zparser.c	314;"	d	file:
PRINT_DEC_BUFSZ	compat/snprintf.c	102;"	d	file:
PRINT_FLOAT_BUFSZ	compat/snprintf.c	456;"	d	file:
PSEUDO_TYPE_DLV	include/dns.h	159;"	d
Pad64	compat/b64_ntop.c	/^static const char Pad64 = '=';$/;"	v	file:
Pad64	compat/b64_pton.c	/^static const char Pad64 = '=';$/;"	v	file:
QDCOUNT	include/packet.h	120;"	d
QDCOUNT_SET	include/packet.h	121;"	d
QHEADERSZ	include/packet.h	47;"	d
QIOBUFSZ	include/packet.h	138;"	d
QR	include/packet.h	76;"	d
QR_CLR	include/packet.h	78;"	d
QR_MASK	include/packet.h	74;"	d
QR_SET	include/packet.h	77;"	d
QR_SHIFT	include/packet.h	75;"	d
QUERY_DISCARDED	include/query.h	/^	QUERY_DISCARDED,$/;"	e	enum:query_state
QUERY_IN_AXFR	include/query.h	/^	QUERY_IN_AXFR$/;"	e	enum:query_state
QUERY_PROCESSED	include/query.h	/^	QUERY_PROCESSED,$/;"	e	enum:query_state
QUESTION_SECTION	include/dns.h	/^	QUESTION_SECTION,$/;"	e	enum:rr_section
RA	include/packet.h	107;"	d
RADARRAY	nsd/udbradtree.c	12;"	d	file:
RADNODE	include/udbradtree.h	242;"	d
RADTREE	include/udbradtree.h	243;"	d
RADTREE_H	include/radtree.h	7;"	d
RA_CLR	include/packet.h	109;"	d
RA_MASK	include/packet.h	105;"	d
RA_SET	include/packet.h	108;"	d
RA_SHIFT	include/packet.h	106;"	d
RBTREE_FOR	include/rbtree.h	71;"	d
RBTREE_NULL	include/rbtree.h	29;"	d
RBTREE_WALK	include/rbtree.h	64;"	d
RCODE	include/packet.h	83;"	d
RCODE_FORMAT	include/dns.h	49;"	d
RCODE_IMPL	include/dns.h	52;"	d
RCODE_MASK	include/packet.h	81;"	d
RCODE_NOTAUTH	include/dns.h	57;"	d
RCODE_NOTZONE	include/dns.h	58;"	d
RCODE_NXDOMAIN	include/dns.h	51;"	d
RCODE_NXRRSET	include/dns.h	56;"	d
RCODE_OK	include/dns.h	48;"	d
RCODE_REFUSE	include/dns.h	53;"	d
RCODE_SERVFAIL	include/dns.h	50;"	d
RCODE_SET	include/packet.h	84;"	d
RCODE_SHIFT	include/packet.h	82;"	d
RCODE_YXDOMAIN	include/dns.h	54;"	d
RCODE_YXRRSET	include/dns.h	55;"	d
RD	include/packet.h	52;"	d
RDATA_WF_A	include/dns.h	/^	RDATA_WF_A,                  \/* 32-bit IPv4 address.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_AAAA	include/dns.h	/^	RDATA_WF_AAAA,               \/* 128-bit IPv6 address.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_APL	include/dns.h	/^	RDATA_WF_APL,                \/* APL data.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_BINARY	include/dns.h	/^	RDATA_WF_BINARY,             \/* Binary data (unknown length).  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_BINARYWITHLENGTH	include/dns.h	/^	RDATA_WF_BINARYWITHLENGTH,   \/* Binary data preceded by 1 byte length *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_BYTE	include/dns.h	/^	RDATA_WF_BYTE,               \/* 8-bit integer.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_COMPRESSED_DNAME	include/dns.h	/^	RDATA_WF_COMPRESSED_DNAME,   \/* Possibly compressed domain name.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_EUI48	include/dns.h	/^	RDATA_WF_EUI48,	             \/* 48-bit address.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_EUI64	include/dns.h	/^	RDATA_WF_EUI64,              \/* 64-bit address.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_ILNP64	include/dns.h	/^	RDATA_WF_ILNP64,             \/* 64-bit uncompressed IPv6 address.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_IPSECGATEWAY	include/dns.h	/^	RDATA_WF_IPSECGATEWAY,       \/* IPSECKEY gateway ip4, ip6 or dname. *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_LITERAL_DNAME	include/dns.h	/^	RDATA_WF_LITERAL_DNAME,      \/* Literal (not downcased) dname.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_LONG	include/dns.h	/^	RDATA_WF_LONG,               \/* 32-bit integer.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_LONG_TEXT	include/dns.h	/^	RDATA_WF_LONG_TEXT           \/* Long (>255) text string. *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_SHORT	include/dns.h	/^	RDATA_WF_SHORT,              \/* 16-bit integer.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_TEXT	include/dns.h	/^	RDATA_WF_TEXT,               \/* Text string.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_TEXTS	include/dns.h	/^	RDATA_WF_TEXTS,              \/* Text string sequence.  *\/$/;"	e	enum:rdata_wireformat
RDATA_WF_UNCOMPRESSED_DNAME	include/dns.h	/^	RDATA_WF_UNCOMPRESSED_DNAME, \/* Uncompressed domain name.  *\/$/;"	e	enum:rdata_wireformat
RDATA_ZF_A	include/dns.h	/^	RDATA_ZF_A,		\/* 32-bit IPv4 address.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_AAAA	include/dns.h	/^	RDATA_ZF_AAAA,		\/* 128-bit IPv6 address.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_ALGORITHM	include/dns.h	/^	RDATA_ZF_ALGORITHM,	\/* Cryptographic algorithm.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_APL	include/dns.h	/^	RDATA_ZF_APL,		\/* APL.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_BASE32	include/dns.h	/^	RDATA_ZF_BASE32,	\/* Base-32 binary data.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_BASE64	include/dns.h	/^	RDATA_ZF_BASE64,	\/* Base-64 binary data.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_BYTE	include/dns.h	/^	RDATA_ZF_BYTE,		\/* 8-bit integer.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_CERTIFICATE_TYPE	include/dns.h	/^	RDATA_ZF_CERTIFICATE_TYPE,$/;"	e	enum:rdata_zoneformat
RDATA_ZF_DNAME	include/dns.h	/^	RDATA_ZF_DNAME,		\/* Domain name.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_EUI48	include/dns.h	/^	RDATA_ZF_EUI48,		\/* EUI48 address.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_EUI64	include/dns.h	/^	RDATA_ZF_EUI64,		\/* EUI64 address.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_HEX	include/dns.h	/^	RDATA_ZF_HEX,		\/* Hexadecimal binary data.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_HEX_LEN	include/dns.h	/^	RDATA_ZF_HEX_LEN,	\/* Hexadecimal binary data. Skip initial length byte. *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_ILNP64	include/dns.h	/^	RDATA_ZF_ILNP64,	\/* 64-bit uncompressed IPv6 address.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_IPSECGATEWAY	include/dns.h	/^	RDATA_ZF_IPSECGATEWAY,	\/* IPSECKEY gateway ip4, ip6 or dname. *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_LITERAL_DNAME	include/dns.h	/^	RDATA_ZF_LITERAL_DNAME,	\/* DNS name (not lowercased domain name).  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_LOC	include/dns.h	/^	RDATA_ZF_LOC,		\/* Location data.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_LONG	include/dns.h	/^	RDATA_ZF_LONG,		\/* 32-bit integer.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_LONG_TEXT	include/dns.h	/^	RDATA_ZF_LONG_TEXT,	\/* Long (>255) text string. *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_NSAP	include/dns.h	/^	RDATA_ZF_NSAP,		\/* NSAP.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_NSEC	include/dns.h	/^	RDATA_ZF_NSEC,		\/* NSEC type bitmap.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_NXT	include/dns.h	/^	RDATA_ZF_NXT,		\/* NXT type bitmap.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_PERIOD	include/dns.h	/^	RDATA_ZF_PERIOD,	\/* Time period.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_RRTYPE	include/dns.h	/^	RDATA_ZF_RRTYPE,	\/* RR type.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_SERVICES	include/dns.h	/^	RDATA_ZF_SERVICES,	\/* Protocol and port number bitmap.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_SHORT	include/dns.h	/^	RDATA_ZF_SHORT,		\/* 16-bit integer.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_TAG	include/dns.h	/^	RDATA_ZF_TAG,		\/* Text string without quotes. *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_TEXT	include/dns.h	/^	RDATA_ZF_TEXT,		\/* Text string.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_TEXTS	include/dns.h	/^	RDATA_ZF_TEXTS,		\/* Text string sequence.  *\/$/;"	e	enum:rdata_zoneformat
RDATA_ZF_TIME	include/dns.h	/^	RDATA_ZF_TIME,$/;"	e	enum:rdata_zoneformat
RDATA_ZF_UNKNOWN	include/dns.h	/^	RDATA_ZF_UNKNOWN	\/* Unknown data.  *\/$/;"	e	enum:rdata_zoneformat
RD_CLR	include/packet.h	54;"	d
RD_MASK	include/packet.h	50;"	d
RD_SET	include/packet.h	53;"	d
RD_SHIFT	include/packet.h	51;"	d
RED	nsd/rbtree.c	18;"	d	file:
REJECT	nsd/configlexer.c	1055;"	d	file:
REJECT	nsd/zlexer.c	516;"	d	file:
RETSIGTYPE	include/config.h	404;"	d
ROOT	include/zonec.h	17;"	d
RR	include/udbzone.h	145;"	d
RRL_BUCKETS	include/rrl.h	30;"	d
RRL_H	include/rrl.h	7;"	d
RRL_IPV4_PREFIX_LENGTH	include/rrl.h	36;"	d
RRL_IPV6_PREFIX_LENGTH	include/rrl.h	37;"	d
RRL_LIMIT	include/rrl.h	32;"	d
RRL_SLIP	include/rrl.h	34;"	d
RRL_WLIST_LIMIT	include/rrl.h	39;"	d
RRSET	include/udbzone.h	144;"	d
RRTYPE_DESCRIPTORS_LENGTH	include/dns.h	261;"	d
RR_SECTION_COUNT	include/dns.h	/^	RR_SECTION_COUNT$/;"	e	enum:rr_section
RTE_MP_RX_DESC_DEFAULT	main.c	133;"	d	file:
RTE_MP_TX_DESC_DEFAULT	main.c	134;"	d	file:
RTE_TARGET	Makefile	/^RTE_TARGET ?= x86_64-native-linuxapp-gcc$/;"	m
RX_RING_SIZE	main.c	43;"	d	file:
SERIAL_BITS	nsd/util.c	854;"	d	file:
SIZEOF_OFF_T	include/config.h	410;"	d
SIZEOF_VOIDP	include/config.h	413;"	d
SP	include/zparser.h	/^     SP = 332,$/;"	e	enum:yytokentype
SP	include/zparser.h	208;"	d
SP	nsd/zparser.c	/^     SP = 332,$/;"	e	enum:yytokentype	file:
SP	nsd/zparser.c	312;"	d	file:
SPACE	include/configparser.h	/^     SPACE = 258,$/;"	e	enum:yytokentype
SPACE	include/configparser.h	124;"	d
SPACE	nsd/configparser.c	/^     SPACE = 258,$/;"	e	enum:yytokentype	file:
SPACE	nsd/configparser.c	211;"	d	file:
SRCS-y	Makefile	/^SRCS-y := main.c ${FASTDNS_SRCS} ${NSD_SRCS} ${COMPAT_SRCS}$/;"	m
STDC_HEADERS	include/config.h	416;"	d
STORE_HASH	nsd/nsec3.c	122;"	d	file:
STR	include/zparser.h	/^     STR = 333,$/;"	e	enum:yytokentype
STR	include/zparser.h	209;"	d
STR	nsd/zparser.c	/^     STR = 333,$/;"	e	enum:yytokentype	file:
STR	nsd/zparser.c	313;"	d	file:
STRING	include/configparser.h	/^     STRING = 265,$/;"	e	enum:yytokentype
STRING	include/configparser.h	131;"	d
STRING	nsd/configparser.c	/^     STRING = 265,$/;"	e	enum:yytokentype	file:
STRING	nsd/configparser.c	218;"	d	file:
STRPTIME_NEEDS_DEFINES	include/config.h	419;"	d
STRPTIME_WORKS	include/config.h	422;"	d
STRPTIME_WORKS	include/config.h	733;"	d
TASKLIST	include/difffile.h	101;"	d
TC	include/packet.h	58;"	d
TCP_BACKLOG	include/config.h	425;"	d
TCP_BACKLOG_REMOTE	include/remote.h	56;"	d
TCP_MAX_MESSAGE_LEN	include/config.h	428;"	d
TCP_NULL_SKIP	include/xfrd-tcp.h	68;"	d
TCP_PORT	include/config.h	431;"	d
TCP_TIMEOUT	include/config.h	434;"	d
TC_CLR	include/packet.h	60;"	d
TC_MASK	include/packet.h	56;"	d
TC_SET	include/packet.h	59;"	d
TC_SHIFT	include/packet.h	57;"	d
TM_YEAR_BASE	compat/strptime.c	50;"	d	file:
TSIG_ERROR	include/tsig.h	/^	TSIG_ERROR$/;"	e	enum:tsig_status
TSIG_ERROR_BADKEY	include/tsig.h	22;"	d
TSIG_ERROR_BADSIG	include/tsig.h	21;"	d
TSIG_ERROR_BADTIME	include/tsig.h	23;"	d
TSIG_ERROR_NOERROR	include/tsig.h	20;"	d
TSIG_HMAC_MD5	include/tsig.h	25;"	d
TSIG_HMAC_SHA1	include/tsig.h	26;"	d
TSIG_HMAC_SHA256	include/tsig.h	27;"	d
TSIG_NOT_PRESENT	include/tsig.h	/^	TSIG_NOT_PRESENT,$/;"	e	enum:tsig_status
TSIG_OK	include/tsig.h	/^	TSIG_OK,$/;"	e	enum:tsig_status
TX_RING_SIZE	main.c	44;"	d	file:
TYPE_A	include/dns.h	85;"	d
TYPE_A6	include/dns.h	122;"	d
TYPE_AAAA	include/dns.h	112;"	d
TYPE_AFSDB	include/dns.h	102;"	d
TYPE_ANY	include/dns.h	154;"	d
TYPE_APL	include/dns.h	127;"	d
TYPE_AXFR	include/dns.h	151;"	d
TYPE_CAA	include/dns.h	156;"	d
TYPE_CERT	include/dns.h	120;"	d
TYPE_CNAME	include/dns.h	89;"	d
TYPE_DHCID	include/dns.h	135;"	d
TYPE_DLV	include/dns.h	158;"	d
TYPE_DNAME	include/dns.h	124;"	d
TYPE_DNSKEY	include/dns.h	134;"	d
TYPE_DS	include/dns.h	128;"	d
TYPE_EUI48	include/dns.h	146;"	d
TYPE_EUI64	include/dns.h	147;"	d
TYPE_HINFO	include/dns.h	97;"	d
TYPE_IPSECKEY	include/dns.h	130;"	d
TYPE_ISDN	include/dns.h	104;"	d
TYPE_IXFR	include/dns.h	150;"	d
TYPE_KEY	include/dns.h	109;"	d
TYPE_KX	include/dns.h	119;"	d
TYPE_L32	include/dns.h	143;"	d
TYPE_L64	include/dns.h	144;"	d
TYPE_LOC	include/dns.h	113;"	d
TYPE_LP	include/dns.h	145;"	d
TYPE_MAILA	include/dns.h	153;"	d
TYPE_MAILB	include/dns.h	152;"	d
TYPE_MB	include/dns.h	91;"	d
TYPE_MD	include/dns.h	87;"	d
TYPE_MF	include/dns.h	88;"	d
TYPE_MG	include/dns.h	92;"	d
TYPE_MINFO	include/dns.h	98;"	d
TYPE_MR	include/dns.h	93;"	d
TYPE_MX	include/dns.h	99;"	d
TYPE_NAPTR	include/dns.h	118;"	d
TYPE_NID	include/dns.h	142;"	d
TYPE_NS	include/dns.h	86;"	d
TYPE_NSAP	include/dns.h	106;"	d
TYPE_NSEC	include/dns.h	133;"	d
TYPE_NSEC3	include/dns.h	136;"	d
TYPE_NSEC3PARAM	include/dns.h	137;"	d
TYPE_NULL	include/dns.h	94;"	d
TYPE_NXT	include/dns.h	114;"	d
TYPE_OPT	include/dns.h	126;"	d
TYPE_PTR	include/dns.h	96;"	d
TYPE_PX	include/dns.h	110;"	d
TYPE_RP	include/dns.h	101;"	d
TYPE_RRSIG	include/dns.h	132;"	d
TYPE_RT	include/dns.h	105;"	d
TYPE_SIG	include/dns.h	108;"	d
TYPE_SOA	include/dns.h	90;"	d
TYPE_SPF	include/dns.h	140;"	d
TYPE_SRV	include/dns.h	116;"	d
TYPE_SSHFP	include/dns.h	129;"	d
TYPE_TLSA	include/dns.h	138;"	d
TYPE_TSIG	include/dns.h	149;"	d
TYPE_TXT	include/dns.h	100;"	d
TYPE_WKS	include/dns.h	95;"	d
TYPE_X25	include/dns.h	103;"	d
T_A	include/zparser.h	/^     T_A = 258,$/;"	e	enum:yytokentype
T_A	include/zparser.h	134;"	d
T_A	nsd/zparser.c	/^     T_A = 258,$/;"	e	enum:yytokentype	file:
T_A	nsd/zparser.c	238;"	d	file:
T_A6	include/zparser.h	/^     T_A6 = 295,$/;"	e	enum:yytokentype
T_A6	include/zparser.h	171;"	d
T_A6	nsd/zparser.c	/^     T_A6 = 295,$/;"	e	enum:yytokentype	file:
T_A6	nsd/zparser.c	275;"	d	file:
T_AAAA	include/zparser.h	/^     T_AAAA = 263,$/;"	e	enum:yytokentype
T_AAAA	include/zparser.h	139;"	d
T_AAAA	nsd/zparser.c	/^     T_AAAA = 263,$/;"	e	enum:yytokentype	file:
T_AAAA	nsd/zparser.c	243;"	d	file:
T_AFSDB	include/zparser.h	/^     T_AFSDB = 282,$/;"	e	enum:yytokentype
T_AFSDB	include/zparser.h	158;"	d
T_AFSDB	nsd/zparser.c	/^     T_AFSDB = 282,$/;"	e	enum:yytokentype	file:
T_AFSDB	nsd/zparser.c	262;"	d	file:
T_APL	include/zparser.h	/^     T_APL = 299,$/;"	e	enum:yytokentype
T_APL	include/zparser.h	175;"	d
T_APL	nsd/zparser.c	/^     T_APL = 299,$/;"	e	enum:yytokentype	file:
T_APL	nsd/zparser.c	279;"	d	file:
T_ATMA	include/zparser.h	/^     T_ATMA = 292,$/;"	e	enum:yytokentype
T_ATMA	include/zparser.h	168;"	d
T_ATMA	nsd/zparser.c	/^     T_ATMA = 292,$/;"	e	enum:yytokentype	file:
T_ATMA	nsd/zparser.c	272;"	d	file:
T_AXFR	include/zparser.h	/^     T_AXFR = 307,$/;"	e	enum:yytokentype
T_AXFR	include/zparser.h	183;"	d
T_AXFR	nsd/zparser.c	/^     T_AXFR = 307,$/;"	e	enum:yytokentype	file:
T_AXFR	nsd/zparser.c	287;"	d	file:
T_CAA	include/zparser.h	/^     T_CAA = 328,$/;"	e	enum:yytokentype
T_CAA	include/zparser.h	204;"	d
T_CAA	nsd/zparser.c	/^     T_CAA = 328,$/;"	e	enum:yytokentype	file:
T_CAA	nsd/zparser.c	308;"	d	file:
T_CERT	include/zparser.h	/^     T_CERT = 270,$/;"	e	enum:yytokentype
T_CERT	include/zparser.h	146;"	d
T_CERT	nsd/zparser.c	/^     T_CERT = 270,$/;"	e	enum:yytokentype	file:
T_CERT	nsd/zparser.c	250;"	d	file:
T_CNAME	include/zparser.h	/^     T_CNAME = 262,$/;"	e	enum:yytokentype
T_CNAME	include/zparser.h	138;"	d
T_CNAME	nsd/zparser.c	/^     T_CNAME = 262,$/;"	e	enum:yytokentype	file:
T_CNAME	nsd/zparser.c	242;"	d	file:
T_DHCID	include/zparser.h	/^     T_DHCID = 319,$/;"	e	enum:yytokentype
T_DHCID	include/zparser.h	195;"	d
T_DHCID	nsd/zparser.c	/^     T_DHCID = 319,$/;"	e	enum:yytokentype	file:
T_DHCID	nsd/zparser.c	299;"	d	file:
T_DLV	include/zparser.h	/^     T_DLV = 311,$/;"	e	enum:yytokentype
T_DLV	include/zparser.h	187;"	d
T_DLV	nsd/zparser.c	/^     T_DLV = 311,$/;"	e	enum:yytokentype	file:
T_DLV	nsd/zparser.c	291;"	d	file:
T_DNAME	include/zparser.h	/^     T_DNAME = 296,$/;"	e	enum:yytokentype
T_DNAME	include/zparser.h	172;"	d
T_DNAME	nsd/zparser.c	/^     T_DNAME = 296,$/;"	e	enum:yytokentype	file:
T_DNAME	nsd/zparser.c	276;"	d	file:
T_DNSKEY	include/zparser.h	/^     T_DNSKEY = 315,$/;"	e	enum:yytokentype
T_DNSKEY	include/zparser.h	191;"	d
T_DNSKEY	nsd/zparser.c	/^     T_DNSKEY = 315,$/;"	e	enum:yytokentype	file:
T_DNSKEY	nsd/zparser.c	295;"	d	file:
T_DS	include/zparser.h	/^     T_DS = 310,$/;"	e	enum:yytokentype
T_DS	include/zparser.h	186;"	d
T_DS	nsd/zparser.c	/^     T_DS = 310,$/;"	e	enum:yytokentype	file:
T_DS	nsd/zparser.c	290;"	d	file:
T_EID	include/zparser.h	/^     T_EID = 290,$/;"	e	enum:yytokentype
T_EID	include/zparser.h	166;"	d
T_EID	nsd/zparser.c	/^     T_EID = 290,$/;"	e	enum:yytokentype	file:
T_EID	nsd/zparser.c	270;"	d	file:
T_EUI48	include/zparser.h	/^     T_EUI48 = 326,$/;"	e	enum:yytokentype
T_EUI48	include/zparser.h	202;"	d
T_EUI48	nsd/zparser.c	/^     T_EUI48 = 326,$/;"	e	enum:yytokentype	file:
T_EUI48	nsd/zparser.c	306;"	d	file:
T_EUI64	include/zparser.h	/^     T_EUI64 = 327,$/;"	e	enum:yytokentype
T_EUI64	include/zparser.h	203;"	d
T_EUI64	nsd/zparser.c	/^     T_EUI64 = 327,$/;"	e	enum:yytokentype	file:
T_EUI64	nsd/zparser.c	307;"	d	file:
T_GID	include/zparser.h	/^     T_GID = 302,$/;"	e	enum:yytokentype
T_GID	include/zparser.h	178;"	d
T_GID	nsd/zparser.c	/^     T_GID = 302,$/;"	e	enum:yytokentype	file:
T_GID	nsd/zparser.c	282;"	d	file:
T_GPOS	include/zparser.h	/^     T_GPOS = 289,$/;"	e	enum:yytokentype
T_GPOS	include/zparser.h	165;"	d
T_GPOS	nsd/zparser.c	/^     T_GPOS = 289,$/;"	e	enum:yytokentype	file:
T_GPOS	nsd/zparser.c	269;"	d	file:
T_HINFO	include/zparser.h	/^     T_HINFO = 279,$/;"	e	enum:yytokentype
T_HINFO	include/zparser.h	155;"	d
T_HINFO	nsd/zparser.c	/^     T_HINFO = 279,$/;"	e	enum:yytokentype	file:
T_HINFO	nsd/zparser.c	259;"	d	file:
T_IPSECKEY	include/zparser.h	/^     T_IPSECKEY = 318,$/;"	e	enum:yytokentype
T_IPSECKEY	include/zparser.h	194;"	d
T_IPSECKEY	nsd/zparser.c	/^     T_IPSECKEY = 318,$/;"	e	enum:yytokentype	file:
T_IPSECKEY	nsd/zparser.c	298;"	d	file:
T_ISDN	include/zparser.h	/^     T_ISDN = 284,$/;"	e	enum:yytokentype
T_ISDN	include/zparser.h	160;"	d
T_ISDN	nsd/zparser.c	/^     T_ISDN = 284,$/;"	e	enum:yytokentype	file:
T_ISDN	nsd/zparser.c	264;"	d	file:
T_IXFR	include/zparser.h	/^     T_IXFR = 306,$/;"	e	enum:yytokentype
T_IXFR	include/zparser.h	182;"	d
T_IXFR	nsd/zparser.c	/^     T_IXFR = 306,$/;"	e	enum:yytokentype	file:
T_IXFR	nsd/zparser.c	286;"	d	file:
T_KEY	include/zparser.h	/^     T_KEY = 266,$/;"	e	enum:yytokentype
T_KEY	include/zparser.h	142;"	d
T_KEY	nsd/zparser.c	/^     T_KEY = 266,$/;"	e	enum:yytokentype	file:
T_KEY	nsd/zparser.c	246;"	d	file:
T_KX	include/zparser.h	/^     T_KX = 294,$/;"	e	enum:yytokentype
T_KX	include/zparser.h	170;"	d
T_KX	nsd/zparser.c	/^     T_KX = 294,$/;"	e	enum:yytokentype	file:
T_KX	nsd/zparser.c	274;"	d	file:
T_L32	include/zparser.h	/^     T_L32 = 323,$/;"	e	enum:yytokentype
T_L32	include/zparser.h	199;"	d
T_L32	nsd/zparser.c	/^     T_L32 = 323,$/;"	e	enum:yytokentype	file:
T_L32	nsd/zparser.c	303;"	d	file:
T_L64	include/zparser.h	/^     T_L64 = 324,$/;"	e	enum:yytokentype
T_L64	include/zparser.h	200;"	d
T_L64	nsd/zparser.c	/^     T_L64 = 324,$/;"	e	enum:yytokentype	file:
T_L64	nsd/zparser.c	304;"	d	file:
T_LOC	include/zparser.h	/^     T_LOC = 271,$/;"	e	enum:yytokentype
T_LOC	include/zparser.h	147;"	d
T_LOC	nsd/zparser.c	/^     T_LOC = 271,$/;"	e	enum:yytokentype	file:
T_LOC	nsd/zparser.c	251;"	d	file:
T_LP	include/zparser.h	/^     T_LP = 325,$/;"	e	enum:yytokentype
T_LP	include/zparser.h	201;"	d
T_LP	nsd/zparser.c	/^     T_LP = 325,$/;"	e	enum:yytokentype	file:
T_LP	nsd/zparser.c	305;"	d	file:
T_MAILA	include/zparser.h	/^     T_MAILA = 309,$/;"	e	enum:yytokentype
T_MAILA	include/zparser.h	185;"	d
T_MAILA	nsd/zparser.c	/^     T_MAILA = 309,$/;"	e	enum:yytokentype	file:
T_MAILA	nsd/zparser.c	289;"	d	file:
T_MAILB	include/zparser.h	/^     T_MAILB = 308,$/;"	e	enum:yytokentype
T_MAILB	include/zparser.h	184;"	d
T_MAILB	nsd/zparser.c	/^     T_MAILB = 308,$/;"	e	enum:yytokentype	file:
T_MAILB	nsd/zparser.c	288;"	d	file:
T_MB	include/zparser.h	/^     T_MB = 274,$/;"	e	enum:yytokentype
T_MB	include/zparser.h	150;"	d
T_MB	nsd/zparser.c	/^     T_MB = 274,$/;"	e	enum:yytokentype	file:
T_MB	nsd/zparser.c	254;"	d	file:
T_MD	include/zparser.h	/^     T_MD = 272,$/;"	e	enum:yytokentype
T_MD	include/zparser.h	148;"	d
T_MD	nsd/zparser.c	/^     T_MD = 272,$/;"	e	enum:yytokentype	file:
T_MD	nsd/zparser.c	252;"	d	file:
T_MF	include/zparser.h	/^     T_MF = 273,$/;"	e	enum:yytokentype
T_MF	include/zparser.h	149;"	d
T_MF	nsd/zparser.c	/^     T_MF = 273,$/;"	e	enum:yytokentype	file:
T_MF	nsd/zparser.c	253;"	d	file:
T_MG	include/zparser.h	/^     T_MG = 275,$/;"	e	enum:yytokentype
T_MG	include/zparser.h	151;"	d
T_MG	nsd/zparser.c	/^     T_MG = 275,$/;"	e	enum:yytokentype	file:
T_MG	nsd/zparser.c	255;"	d	file:
T_MINFO	include/zparser.h	/^     T_MINFO = 280,$/;"	e	enum:yytokentype
T_MINFO	include/zparser.h	156;"	d
T_MINFO	nsd/zparser.c	/^     T_MINFO = 280,$/;"	e	enum:yytokentype	file:
T_MINFO	nsd/zparser.c	260;"	d	file:
T_MR	include/zparser.h	/^     T_MR = 276,$/;"	e	enum:yytokentype
T_MR	include/zparser.h	152;"	d
T_MR	nsd/zparser.c	/^     T_MR = 276,$/;"	e	enum:yytokentype	file:
T_MR	nsd/zparser.c	256;"	d	file:
T_MX	include/zparser.h	/^     T_MX = 260,$/;"	e	enum:yytokentype
T_MX	include/zparser.h	136;"	d
T_MX	nsd/zparser.c	/^     T_MX = 260,$/;"	e	enum:yytokentype	file:
T_MX	nsd/zparser.c	240;"	d	file:
T_NAPTR	include/zparser.h	/^     T_NAPTR = 293,$/;"	e	enum:yytokentype
T_NAPTR	include/zparser.h	169;"	d
T_NAPTR	nsd/zparser.c	/^     T_NAPTR = 293,$/;"	e	enum:yytokentype	file:
T_NAPTR	nsd/zparser.c	273;"	d	file:
T_NID	include/zparser.h	/^     T_NID = 322,$/;"	e	enum:yytokentype
T_NID	include/zparser.h	198;"	d
T_NID	nsd/zparser.c	/^     T_NID = 322,$/;"	e	enum:yytokentype	file:
T_NID	nsd/zparser.c	302;"	d	file:
T_NIMLOC	include/zparser.h	/^     T_NIMLOC = 291,$/;"	e	enum:yytokentype
T_NIMLOC	include/zparser.h	167;"	d
T_NIMLOC	nsd/zparser.c	/^     T_NIMLOC = 291,$/;"	e	enum:yytokentype	file:
T_NIMLOC	nsd/zparser.c	271;"	d	file:
T_NS	include/zparser.h	/^     T_NS = 259,$/;"	e	enum:yytokentype
T_NS	include/zparser.h	135;"	d
T_NS	nsd/zparser.c	/^     T_NS = 259,$/;"	e	enum:yytokentype	file:
T_NS	nsd/zparser.c	239;"	d	file:
T_NSAP	include/zparser.h	/^     T_NSAP = 286,$/;"	e	enum:yytokentype
T_NSAP	include/zparser.h	162;"	d
T_NSAP	nsd/zparser.c	/^     T_NSAP = 286,$/;"	e	enum:yytokentype	file:
T_NSAP	nsd/zparser.c	266;"	d	file:
T_NSAP_PTR	include/zparser.h	/^     T_NSAP_PTR = 287,$/;"	e	enum:yytokentype
T_NSAP_PTR	include/zparser.h	163;"	d
T_NSAP_PTR	nsd/zparser.c	/^     T_NSAP_PTR = 287,$/;"	e	enum:yytokentype	file:
T_NSAP_PTR	nsd/zparser.c	267;"	d	file:
T_NSEC	include/zparser.h	/^     T_NSEC = 314,$/;"	e	enum:yytokentype
T_NSEC	include/zparser.h	190;"	d
T_NSEC	nsd/zparser.c	/^     T_NSEC = 314,$/;"	e	enum:yytokentype	file:
T_NSEC	nsd/zparser.c	294;"	d	file:
T_NSEC3	include/zparser.h	/^     T_NSEC3 = 317,$/;"	e	enum:yytokentype
T_NSEC3	include/zparser.h	193;"	d
T_NSEC3	nsd/zparser.c	/^     T_NSEC3 = 317,$/;"	e	enum:yytokentype	file:
T_NSEC3	nsd/zparser.c	297;"	d	file:
T_NSEC3PARAM	include/zparser.h	/^     T_NSEC3PARAM = 320,$/;"	e	enum:yytokentype
T_NSEC3PARAM	include/zparser.h	196;"	d
T_NSEC3PARAM	nsd/zparser.c	/^     T_NSEC3PARAM = 320,$/;"	e	enum:yytokentype	file:
T_NSEC3PARAM	nsd/zparser.c	300;"	d	file:
T_NULL	include/zparser.h	/^     T_NULL = 277,$/;"	e	enum:yytokentype
T_NULL	include/zparser.h	153;"	d
T_NULL	nsd/zparser.c	/^     T_NULL = 277,$/;"	e	enum:yytokentype	file:
T_NULL	nsd/zparser.c	257;"	d	file:
T_NXT	include/zparser.h	/^     T_NXT = 265,$/;"	e	enum:yytokentype
T_NXT	include/zparser.h	141;"	d
T_NXT	nsd/zparser.c	/^     T_NXT = 265,$/;"	e	enum:yytokentype	file:
T_NXT	nsd/zparser.c	245;"	d	file:
T_OPT	include/zparser.h	/^     T_OPT = 298,$/;"	e	enum:yytokentype
T_OPT	include/zparser.h	174;"	d
T_OPT	nsd/zparser.c	/^     T_OPT = 298,$/;"	e	enum:yytokentype	file:
T_OPT	nsd/zparser.c	278;"	d	file:
T_PTR	include/zparser.h	/^     T_PTR = 264,$/;"	e	enum:yytokentype
T_PTR	include/zparser.h	140;"	d
T_PTR	nsd/zparser.c	/^     T_PTR = 264,$/;"	e	enum:yytokentype	file:
T_PTR	nsd/zparser.c	244;"	d	file:
T_PX	include/zparser.h	/^     T_PX = 288,$/;"	e	enum:yytokentype
T_PX	include/zparser.h	164;"	d
T_PX	nsd/zparser.c	/^     T_PX = 288,$/;"	e	enum:yytokentype	file:
T_PX	nsd/zparser.c	268;"	d	file:
T_RP	include/zparser.h	/^     T_RP = 281,$/;"	e	enum:yytokentype
T_RP	include/zparser.h	157;"	d
T_RP	nsd/zparser.c	/^     T_RP = 281,$/;"	e	enum:yytokentype	file:
T_RP	nsd/zparser.c	261;"	d	file:
T_RRCLASS	include/zparser.h	/^     T_RRCLASS = 337,$/;"	e	enum:yytokentype
T_RRCLASS	include/zparser.h	213;"	d
T_RRCLASS	nsd/zparser.c	/^     T_RRCLASS = 337,$/;"	e	enum:yytokentype	file:
T_RRCLASS	nsd/zparser.c	317;"	d	file:
T_RRSIG	include/zparser.h	/^     T_RRSIG = 313,$/;"	e	enum:yytokentype
T_RRSIG	include/zparser.h	189;"	d
T_RRSIG	nsd/zparser.c	/^     T_RRSIG = 313,$/;"	e	enum:yytokentype	file:
T_RRSIG	nsd/zparser.c	293;"	d	file:
T_RT	include/zparser.h	/^     T_RT = 285,$/;"	e	enum:yytokentype
T_RT	include/zparser.h	161;"	d
T_RT	nsd/zparser.c	/^     T_RT = 285,$/;"	e	enum:yytokentype	file:
T_RT	nsd/zparser.c	265;"	d	file:
T_SIG	include/zparser.h	/^     T_SIG = 268,$/;"	e	enum:yytokentype
T_SIG	include/zparser.h	144;"	d
T_SIG	nsd/zparser.c	/^     T_SIG = 268,$/;"	e	enum:yytokentype	file:
T_SIG	nsd/zparser.c	248;"	d	file:
T_SINK	include/zparser.h	/^     T_SINK = 297,$/;"	e	enum:yytokentype
T_SINK	include/zparser.h	173;"	d
T_SINK	nsd/zparser.c	/^     T_SINK = 297,$/;"	e	enum:yytokentype	file:
T_SINK	nsd/zparser.c	277;"	d	file:
T_SOA	include/zparser.h	/^     T_SOA = 267,$/;"	e	enum:yytokentype
T_SOA	include/zparser.h	143;"	d
T_SOA	nsd/zparser.c	/^     T_SOA = 267,$/;"	e	enum:yytokentype	file:
T_SOA	nsd/zparser.c	247;"	d	file:
T_SPF	include/zparser.h	/^     T_SPF = 316,$/;"	e	enum:yytokentype
T_SPF	include/zparser.h	192;"	d
T_SPF	nsd/zparser.c	/^     T_SPF = 316,$/;"	e	enum:yytokentype	file:
T_SPF	nsd/zparser.c	296;"	d	file:
T_SRV	include/zparser.h	/^     T_SRV = 269,$/;"	e	enum:yytokentype
T_SRV	include/zparser.h	145;"	d
T_SRV	nsd/zparser.c	/^     T_SRV = 269,$/;"	e	enum:yytokentype	file:
T_SRV	nsd/zparser.c	249;"	d	file:
T_SSHFP	include/zparser.h	/^     T_SSHFP = 312,$/;"	e	enum:yytokentype
T_SSHFP	include/zparser.h	188;"	d
T_SSHFP	nsd/zparser.c	/^     T_SSHFP = 312,$/;"	e	enum:yytokentype	file:
T_SSHFP	nsd/zparser.c	292;"	d	file:
T_TKEY	include/zparser.h	/^     T_TKEY = 304,$/;"	e	enum:yytokentype
T_TKEY	include/zparser.h	180;"	d
T_TKEY	nsd/zparser.c	/^     T_TKEY = 304,$/;"	e	enum:yytokentype	file:
T_TKEY	nsd/zparser.c	284;"	d	file:
T_TLSA	include/zparser.h	/^     T_TLSA = 321,$/;"	e	enum:yytokentype
T_TLSA	include/zparser.h	197;"	d
T_TLSA	nsd/zparser.c	/^     T_TLSA = 321,$/;"	e	enum:yytokentype	file:
T_TLSA	nsd/zparser.c	301;"	d	file:
T_TSIG	include/zparser.h	/^     T_TSIG = 305,$/;"	e	enum:yytokentype
T_TSIG	include/zparser.h	181;"	d
T_TSIG	nsd/zparser.c	/^     T_TSIG = 305,$/;"	e	enum:yytokentype	file:
T_TSIG	nsd/zparser.c	285;"	d	file:
T_TTL	include/zparser.h	/^     T_TTL = 336,$/;"	e	enum:yytokentype
T_TTL	include/zparser.h	212;"	d
T_TTL	nsd/zparser.c	/^     T_TTL = 336,$/;"	e	enum:yytokentype	file:
T_TTL	nsd/zparser.c	316;"	d	file:
T_TXT	include/zparser.h	/^     T_TXT = 261,$/;"	e	enum:yytokentype
T_TXT	include/zparser.h	137;"	d
T_TXT	nsd/zparser.c	/^     T_TXT = 261,$/;"	e	enum:yytokentype	file:
T_TXT	nsd/zparser.c	241;"	d	file:
T_UID	include/zparser.h	/^     T_UID = 301,$/;"	e	enum:yytokentype
T_UID	include/zparser.h	177;"	d
T_UID	nsd/zparser.c	/^     T_UID = 301,$/;"	e	enum:yytokentype	file:
T_UID	nsd/zparser.c	281;"	d	file:
T_UINFO	include/zparser.h	/^     T_UINFO = 300,$/;"	e	enum:yytokentype
T_UINFO	include/zparser.h	176;"	d
T_UINFO	nsd/zparser.c	/^     T_UINFO = 300,$/;"	e	enum:yytokentype	file:
T_UINFO	nsd/zparser.c	280;"	d	file:
T_UNSPEC	include/zparser.h	/^     T_UNSPEC = 303,$/;"	e	enum:yytokentype
T_UNSPEC	include/zparser.h	179;"	d
T_UNSPEC	nsd/zparser.c	/^     T_UNSPEC = 303,$/;"	e	enum:yytokentype	file:
T_UNSPEC	nsd/zparser.c	283;"	d	file:
T_UTYPE	include/zparser.h	/^     T_UTYPE = 339$/;"	e	enum:yytokentype
T_UTYPE	include/zparser.h	215;"	d
T_UTYPE	nsd/zparser.c	/^     T_UTYPE = 339$/;"	e	enum:yytokentype	file:
T_UTYPE	nsd/zparser.c	319;"	d	file:
T_WKS	include/zparser.h	/^     T_WKS = 278,$/;"	e	enum:yytokentype
T_WKS	include/zparser.h	154;"	d
T_WKS	nsd/zparser.c	/^     T_WKS = 278,$/;"	e	enum:yytokentype	file:
T_WKS	nsd/zparser.c	258;"	d	file:
T_X25	include/zparser.h	/^     T_X25 = 283,$/;"	e	enum:yytokentype
T_X25	include/zparser.h	159;"	d
T_X25	nsd/zparser.c	/^     T_X25 = 283,$/;"	e	enum:yytokentype	file:
T_X25	nsd/zparser.c	263;"	d	file:
UDB_ALLOC_CHUNKS_MAX	include/udb.h	58;"	d
UDB_ALLOC_CHUNK_MINEXP	include/udb.h	62;"	d
UDB_ALLOC_CHUNK_MINSIZE	include/udb.h	64;"	d
UDB_ALLOC_CHUNK_SIZE	include/udb.h	60;"	d
UDB_CHAR	include/udb.h	631;"	d
UDB_CHECK	include/udb.h	45;"	d
UDB_CHUNK	include/udb.h	637;"	d
UDB_EXP_HEADER	include/udb.h	66;"	d
UDB_EXP_XL	include/udb.h	68;"	d
UDB_FREE_CHUNK	include/udb.h	639;"	d
UDB_GLOB	include/udb.h	635;"	d
UDB_H	include/udb.h	7;"	d
UDB_HEADER_SIZE	include/udb.h	332;"	d
UDB_MAGIC	include/udb.h	336;"	d
UDB_PTR	include/udb.h	661;"	d
UDB_RADTREE_H	include/udbradtree.h	7;"	d
UDB_REL	include/udb.h	52;"	d
UDB_REL_PTR	include/udb.h	633;"	d
UDB_SYSPTR	include/udb.h	628;"	d
UDB_SYSTOREL	include/udb.h	54;"	d
UDB_XL_CHUNK	include/udb.h	641;"	d
UDB_ZONE_H	include/udbzone.h	7;"	d
UDP_MAX_MESSAGE_LEN	include/config.h	437;"	d
UDP_PORT	include/config.h	440;"	d
UINT16_MAX	nsd/configlexer.c	81;"	d	file:
UINT16_MAX	nsd/zlexer.c	81;"	d	file:
UINT32_MAX	nsd/configlexer.c	84;"	d	file:
UINT32_MAX	nsd/zlexer.c	84;"	d	file:
UINT8_MAX	nsd/configlexer.c	78;"	d	file:
UINT8_MAX	nsd/zlexer.c	78;"	d	file:
URR	include/zparser.h	/^     URR = 338,$/;"	e	enum:yytokentype
URR	include/zparser.h	214;"	d
URR	nsd/zparser.c	/^     URR = 338,$/;"	e	enum:yytokentype	file:
URR	nsd/zparser.c	318;"	d	file:
USER	include/config.h	443;"	d
USE_MINI_EVENT	include/config.h	446;"	d
UTIL_STORAGE_LOOKUP3_H	include/lookup3.h	44;"	d
VAR_ALGORITHM	include/configparser.h	/^     VAR_ALGORITHM = 304,$/;"	e	enum:yytokentype
VAR_ALGORITHM	include/configparser.h	170;"	d
VAR_ALGORITHM	nsd/configparser.c	/^     VAR_ALGORITHM = 304,$/;"	e	enum:yytokentype	file:
VAR_ALGORITHM	nsd/configparser.c	257;"	d	file:
VAR_ALLOW_AXFR_FALLBACK	include/configparser.h	/^     VAR_ALLOW_AXFR_FALLBACK = 302,$/;"	e	enum:yytokentype
VAR_ALLOW_AXFR_FALLBACK	include/configparser.h	168;"	d
VAR_ALLOW_AXFR_FALLBACK	nsd/configparser.c	/^     VAR_ALLOW_AXFR_FALLBACK = 302,$/;"	e	enum:yytokentype	file:
VAR_ALLOW_AXFR_FALLBACK	nsd/configparser.c	255;"	d	file:
VAR_ALLOW_NOTIFY	include/configparser.h	/^     VAR_ALLOW_NOTIFY = 296,$/;"	e	enum:yytokentype
VAR_ALLOW_NOTIFY	include/configparser.h	162;"	d
VAR_ALLOW_NOTIFY	nsd/configparser.c	/^     VAR_ALLOW_NOTIFY = 296,$/;"	e	enum:yytokentype	file:
VAR_ALLOW_NOTIFY	nsd/configparser.c	249;"	d	file:
VAR_AXFR	include/configparser.h	/^     VAR_AXFR = 306,$/;"	e	enum:yytokentype
VAR_AXFR	include/configparser.h	172;"	d
VAR_AXFR	nsd/configparser.c	/^     VAR_AXFR = 306,$/;"	e	enum:yytokentype	file:
VAR_AXFR	nsd/configparser.c	259;"	d	file:
VAR_CHROOT	include/configparser.h	/^     VAR_CHROOT = 282,$/;"	e	enum:yytokentype
VAR_CHROOT	include/configparser.h	148;"	d
VAR_CHROOT	nsd/configparser.c	/^     VAR_CHROOT = 282,$/;"	e	enum:yytokentype	file:
VAR_CHROOT	nsd/configparser.c	235;"	d	file:
VAR_CONTROL_CERT_FILE	include/configparser.h	/^     VAR_CONTROL_CERT_FILE = 320,$/;"	e	enum:yytokentype
VAR_CONTROL_CERT_FILE	include/configparser.h	186;"	d
VAR_CONTROL_CERT_FILE	nsd/configparser.c	/^     VAR_CONTROL_CERT_FILE = 320,$/;"	e	enum:yytokentype	file:
VAR_CONTROL_CERT_FILE	nsd/configparser.c	273;"	d	file:
VAR_CONTROL_ENABLE	include/configparser.h	/^     VAR_CONTROL_ENABLE = 314,$/;"	e	enum:yytokentype
VAR_CONTROL_ENABLE	include/configparser.h	180;"	d
VAR_CONTROL_ENABLE	nsd/configparser.c	/^     VAR_CONTROL_ENABLE = 314,$/;"	e	enum:yytokentype	file:
VAR_CONTROL_ENABLE	nsd/configparser.c	267;"	d	file:
VAR_CONTROL_INTERFACE	include/configparser.h	/^     VAR_CONTROL_INTERFACE = 315,$/;"	e	enum:yytokentype
VAR_CONTROL_INTERFACE	include/configparser.h	181;"	d
VAR_CONTROL_INTERFACE	nsd/configparser.c	/^     VAR_CONTROL_INTERFACE = 315,$/;"	e	enum:yytokentype	file:
VAR_CONTROL_INTERFACE	nsd/configparser.c	268;"	d	file:
VAR_CONTROL_KEY_FILE	include/configparser.h	/^     VAR_CONTROL_KEY_FILE = 319,$/;"	e	enum:yytokentype
VAR_CONTROL_KEY_FILE	include/configparser.h	185;"	d
VAR_CONTROL_KEY_FILE	nsd/configparser.c	/^     VAR_CONTROL_KEY_FILE = 319,$/;"	e	enum:yytokentype	file:
VAR_CONTROL_KEY_FILE	nsd/configparser.c	272;"	d	file:
VAR_CONTROL_PORT	include/configparser.h	/^     VAR_CONTROL_PORT = 316,$/;"	e	enum:yytokentype
VAR_CONTROL_PORT	include/configparser.h	182;"	d
VAR_CONTROL_PORT	nsd/configparser.c	/^     VAR_CONTROL_PORT = 316,$/;"	e	enum:yytokentype	file:
VAR_CONTROL_PORT	nsd/configparser.c	269;"	d	file:
VAR_DATABASE	include/configparser.h	/^     VAR_DATABASE = 273,$/;"	e	enum:yytokentype
VAR_DATABASE	include/configparser.h	139;"	d
VAR_DATABASE	nsd/configparser.c	/^     VAR_DATABASE = 273,$/;"	e	enum:yytokentype	file:
VAR_DATABASE	nsd/configparser.c	226;"	d	file:
VAR_DEBUG_MODE	include/configparser.h	/^     VAR_DEBUG_MODE = 270,$/;"	e	enum:yytokentype
VAR_DEBUG_MODE	include/configparser.h	136;"	d
VAR_DEBUG_MODE	nsd/configparser.c	/^     VAR_DEBUG_MODE = 270,$/;"	e	enum:yytokentype	file:
VAR_DEBUG_MODE	nsd/configparser.c	223;"	d	file:
VAR_DIFFFILE	include/configparser.h	/^     VAR_DIFFFILE = 286,$/;"	e	enum:yytokentype
VAR_DIFFFILE	include/configparser.h	152;"	d
VAR_DIFFFILE	nsd/configparser.c	/^     VAR_DIFFFILE = 286,$/;"	e	enum:yytokentype	file:
VAR_DIFFFILE	nsd/configparser.c	239;"	d	file:
VAR_DO_IP4	include/configparser.h	/^     VAR_DO_IP4 = 292,$/;"	e	enum:yytokentype
VAR_DO_IP4	include/configparser.h	158;"	d
VAR_DO_IP4	nsd/configparser.c	/^     VAR_DO_IP4 = 292,$/;"	e	enum:yytokentype	file:
VAR_DO_IP4	nsd/configparser.c	245;"	d	file:
VAR_DO_IP6	include/configparser.h	/^     VAR_DO_IP6 = 293,$/;"	e	enum:yytokentype
VAR_DO_IP6	include/configparser.h	159;"	d
VAR_DO_IP6	nsd/configparser.c	/^     VAR_DO_IP6 = 293,$/;"	e	enum:yytokentype	file:
VAR_DO_IP6	nsd/configparser.c	246;"	d	file:
VAR_HIDE_VERSION	include/configparser.h	/^     VAR_HIDE_VERSION = 309,$/;"	e	enum:yytokentype
VAR_HIDE_VERSION	include/configparser.h	175;"	d
VAR_HIDE_VERSION	nsd/configparser.c	/^     VAR_HIDE_VERSION = 309,$/;"	e	enum:yytokentype	file:
VAR_HIDE_VERSION	nsd/configparser.c	262;"	d	file:
VAR_IDENTITY	include/configparser.h	/^     VAR_IDENTITY = 274,$/;"	e	enum:yytokentype
VAR_IDENTITY	include/configparser.h	140;"	d
VAR_IDENTITY	nsd/configparser.c	/^     VAR_IDENTITY = 274,$/;"	e	enum:yytokentype	file:
VAR_IDENTITY	nsd/configparser.c	227;"	d	file:
VAR_INCLUDEPATTERN	include/configparser.h	/^     VAR_INCLUDEPATTERN = 311,$/;"	e	enum:yytokentype
VAR_INCLUDEPATTERN	include/configparser.h	177;"	d
VAR_INCLUDEPATTERN	nsd/configparser.c	/^     VAR_INCLUDEPATTERN = 311,$/;"	e	enum:yytokentype	file:
VAR_INCLUDEPATTERN	nsd/configparser.c	264;"	d	file:
VAR_IP4_ONLY	include/configparser.h	/^     VAR_IP4_ONLY = 271,$/;"	e	enum:yytokentype
VAR_IP4_ONLY	include/configparser.h	137;"	d
VAR_IP4_ONLY	nsd/configparser.c	/^     VAR_IP4_ONLY = 271,$/;"	e	enum:yytokentype	file:
VAR_IP4_ONLY	nsd/configparser.c	224;"	d	file:
VAR_IP6_ONLY	include/configparser.h	/^     VAR_IP6_ONLY = 272,$/;"	e	enum:yytokentype
VAR_IP6_ONLY	include/configparser.h	138;"	d
VAR_IP6_ONLY	nsd/configparser.c	/^     VAR_IP6_ONLY = 272,$/;"	e	enum:yytokentype	file:
VAR_IP6_ONLY	nsd/configparser.c	225;"	d	file:
VAR_IPV4_EDNS_SIZE	include/configparser.h	/^     VAR_IPV4_EDNS_SIZE = 290,$/;"	e	enum:yytokentype
VAR_IPV4_EDNS_SIZE	include/configparser.h	156;"	d
VAR_IPV4_EDNS_SIZE	nsd/configparser.c	/^     VAR_IPV4_EDNS_SIZE = 290,$/;"	e	enum:yytokentype	file:
VAR_IPV4_EDNS_SIZE	nsd/configparser.c	243;"	d	file:
VAR_IPV6_EDNS_SIZE	include/configparser.h	/^     VAR_IPV6_EDNS_SIZE = 291,$/;"	e	enum:yytokentype
VAR_IPV6_EDNS_SIZE	include/configparser.h	157;"	d
VAR_IPV6_EDNS_SIZE	nsd/configparser.c	/^     VAR_IPV6_EDNS_SIZE = 291,$/;"	e	enum:yytokentype	file:
VAR_IPV6_EDNS_SIZE	nsd/configparser.c	244;"	d	file:
VAR_IP_ADDRESS	include/configparser.h	/^     VAR_IP_ADDRESS = 268,$/;"	e	enum:yytokentype
VAR_IP_ADDRESS	include/configparser.h	134;"	d
VAR_IP_ADDRESS	nsd/configparser.c	/^     VAR_IP_ADDRESS = 268,$/;"	e	enum:yytokentype	file:
VAR_IP_ADDRESS	nsd/configparser.c	221;"	d	file:
VAR_IP_TRANSPARENT	include/configparser.h	/^     VAR_IP_TRANSPARENT = 269,$/;"	e	enum:yytokentype
VAR_IP_TRANSPARENT	include/configparser.h	135;"	d
VAR_IP_TRANSPARENT	nsd/configparser.c	/^     VAR_IP_TRANSPARENT = 269,$/;"	e	enum:yytokentype	file:
VAR_IP_TRANSPARENT	nsd/configparser.c	222;"	d	file:
VAR_KEY	include/configparser.h	/^     VAR_KEY = 303,$/;"	e	enum:yytokentype
VAR_KEY	include/configparser.h	169;"	d
VAR_KEY	nsd/configparser.c	/^     VAR_KEY = 303,$/;"	e	enum:yytokentype	file:
VAR_KEY	nsd/configparser.c	256;"	d	file:
VAR_LOGFILE	include/configparser.h	/^     VAR_LOGFILE = 276,$/;"	e	enum:yytokentype
VAR_LOGFILE	include/configparser.h	142;"	d
VAR_LOGFILE	nsd/configparser.c	/^     VAR_LOGFILE = 276,$/;"	e	enum:yytokentype	file:
VAR_LOGFILE	nsd/configparser.c	229;"	d	file:
VAR_NAME	include/configparser.h	/^     VAR_NAME = 267,$/;"	e	enum:yytokentype
VAR_NAME	include/configparser.h	133;"	d
VAR_NAME	nsd/configparser.c	/^     VAR_NAME = 267,$/;"	e	enum:yytokentype	file:
VAR_NAME	nsd/configparser.c	220;"	d	file:
VAR_NOTIFY	include/configparser.h	/^     VAR_NOTIFY = 298,$/;"	e	enum:yytokentype
VAR_NOTIFY	include/configparser.h	164;"	d
VAR_NOTIFY	nsd/configparser.c	/^     VAR_NOTIFY = 298,$/;"	e	enum:yytokentype	file:
VAR_NOTIFY	nsd/configparser.c	251;"	d	file:
VAR_NOTIFY_RETRY	include/configparser.h	/^     VAR_NOTIFY_RETRY = 300,$/;"	e	enum:yytokentype
VAR_NOTIFY_RETRY	include/configparser.h	166;"	d
VAR_NOTIFY_RETRY	nsd/configparser.c	/^     VAR_NOTIFY_RETRY = 300,$/;"	e	enum:yytokentype	file:
VAR_NOTIFY_RETRY	nsd/configparser.c	253;"	d	file:
VAR_NSID	include/configparser.h	/^     VAR_NSID = 275,$/;"	e	enum:yytokentype
VAR_NSID	include/configparser.h	141;"	d
VAR_NSID	nsd/configparser.c	/^     VAR_NSID = 275,$/;"	e	enum:yytokentype	file:
VAR_NSID	nsd/configparser.c	228;"	d	file:
VAR_OUTGOING_INTERFACE	include/configparser.h	/^     VAR_OUTGOING_INTERFACE = 301,$/;"	e	enum:yytokentype
VAR_OUTGOING_INTERFACE	include/configparser.h	167;"	d
VAR_OUTGOING_INTERFACE	nsd/configparser.c	/^     VAR_OUTGOING_INTERFACE = 301,$/;"	e	enum:yytokentype	file:
VAR_OUTGOING_INTERFACE	nsd/configparser.c	254;"	d	file:
VAR_PATTERN	include/configparser.h	/^     VAR_PATTERN = 310,$/;"	e	enum:yytokentype
VAR_PATTERN	include/configparser.h	176;"	d
VAR_PATTERN	nsd/configparser.c	/^     VAR_PATTERN = 310,$/;"	e	enum:yytokentype	file:
VAR_PATTERN	nsd/configparser.c	263;"	d	file:
VAR_PIDFILE	include/configparser.h	/^     VAR_PIDFILE = 279,$/;"	e	enum:yytokentype
VAR_PIDFILE	include/configparser.h	145;"	d
VAR_PIDFILE	nsd/configparser.c	/^     VAR_PIDFILE = 279,$/;"	e	enum:yytokentype	file:
VAR_PIDFILE	nsd/configparser.c	232;"	d	file:
VAR_PORT	include/configparser.h	/^     VAR_PORT = 280,$/;"	e	enum:yytokentype
VAR_PORT	include/configparser.h	146;"	d
VAR_PORT	nsd/configparser.c	/^     VAR_PORT = 280,$/;"	e	enum:yytokentype	file:
VAR_PORT	nsd/configparser.c	233;"	d	file:
VAR_PROVIDE_XFR	include/configparser.h	/^     VAR_PROVIDE_XFR = 299,$/;"	e	enum:yytokentype
VAR_PROVIDE_XFR	include/configparser.h	165;"	d
VAR_PROVIDE_XFR	nsd/configparser.c	/^     VAR_PROVIDE_XFR = 299,$/;"	e	enum:yytokentype	file:
VAR_PROVIDE_XFR	nsd/configparser.c	252;"	d	file:
VAR_REMOTE_CONTROL	include/configparser.h	/^     VAR_REMOTE_CONTROL = 313,$/;"	e	enum:yytokentype
VAR_REMOTE_CONTROL	include/configparser.h	179;"	d
VAR_REMOTE_CONTROL	nsd/configparser.c	/^     VAR_REMOTE_CONTROL = 313,$/;"	e	enum:yytokentype	file:
VAR_REMOTE_CONTROL	nsd/configparser.c	266;"	d	file:
VAR_REQUEST_XFR	include/configparser.h	/^     VAR_REQUEST_XFR = 297,$/;"	e	enum:yytokentype
VAR_REQUEST_XFR	include/configparser.h	163;"	d
VAR_REQUEST_XFR	nsd/configparser.c	/^     VAR_REQUEST_XFR = 297,$/;"	e	enum:yytokentype	file:
VAR_REQUEST_XFR	nsd/configparser.c	250;"	d	file:
VAR_RRL_IPV4_PREFIX_LENGTH	include/configparser.h	/^     VAR_RRL_IPV4_PREFIX_LENGTH = 325,$/;"	e	enum:yytokentype
VAR_RRL_IPV4_PREFIX_LENGTH	include/configparser.h	191;"	d
VAR_RRL_IPV4_PREFIX_LENGTH	nsd/configparser.c	/^     VAR_RRL_IPV4_PREFIX_LENGTH = 325,$/;"	e	enum:yytokentype	file:
VAR_RRL_IPV4_PREFIX_LENGTH	nsd/configparser.c	278;"	d	file:
VAR_RRL_IPV6_PREFIX_LENGTH	include/configparser.h	/^     VAR_RRL_IPV6_PREFIX_LENGTH = 326,$/;"	e	enum:yytokentype
VAR_RRL_IPV6_PREFIX_LENGTH	include/configparser.h	192;"	d
VAR_RRL_IPV6_PREFIX_LENGTH	nsd/configparser.c	/^     VAR_RRL_IPV6_PREFIX_LENGTH = 326,$/;"	e	enum:yytokentype	file:
VAR_RRL_IPV6_PREFIX_LENGTH	nsd/configparser.c	279;"	d	file:
VAR_RRL_RATELIMIT	include/configparser.h	/^     VAR_RRL_RATELIMIT = 323,$/;"	e	enum:yytokentype
VAR_RRL_RATELIMIT	include/configparser.h	189;"	d
VAR_RRL_RATELIMIT	nsd/configparser.c	/^     VAR_RRL_RATELIMIT = 323,$/;"	e	enum:yytokentype	file:
VAR_RRL_RATELIMIT	nsd/configparser.c	276;"	d	file:
VAR_RRL_SIZE	include/configparser.h	/^     VAR_RRL_SIZE = 322,$/;"	e	enum:yytokentype
VAR_RRL_SIZE	include/configparser.h	188;"	d
VAR_RRL_SIZE	nsd/configparser.c	/^     VAR_RRL_SIZE = 322,$/;"	e	enum:yytokentype	file:
VAR_RRL_SIZE	nsd/configparser.c	275;"	d	file:
VAR_RRL_SLIP	include/configparser.h	/^     VAR_RRL_SLIP = 324,$/;"	e	enum:yytokentype
VAR_RRL_SLIP	include/configparser.h	190;"	d
VAR_RRL_SLIP	nsd/configparser.c	/^     VAR_RRL_SLIP = 324,$/;"	e	enum:yytokentype	file:
VAR_RRL_SLIP	nsd/configparser.c	277;"	d	file:
VAR_RRL_WHITELIST	include/configparser.h	/^     VAR_RRL_WHITELIST = 328,$/;"	e	enum:yytokentype
VAR_RRL_WHITELIST	include/configparser.h	194;"	d
VAR_RRL_WHITELIST	nsd/configparser.c	/^     VAR_RRL_WHITELIST = 328,$/;"	e	enum:yytokentype	file:
VAR_RRL_WHITELIST	nsd/configparser.c	281;"	d	file:
VAR_RRL_WHITELIST_RATELIMIT	include/configparser.h	/^     VAR_RRL_WHITELIST_RATELIMIT = 327,$/;"	e	enum:yytokentype
VAR_RRL_WHITELIST_RATELIMIT	include/configparser.h	193;"	d
VAR_RRL_WHITELIST_RATELIMIT	nsd/configparser.c	/^     VAR_RRL_WHITELIST_RATELIMIT = 327,$/;"	e	enum:yytokentype	file:
VAR_RRL_WHITELIST_RATELIMIT	nsd/configparser.c	280;"	d	file:
VAR_SECRET	include/configparser.h	/^     VAR_SECRET = 305,$/;"	e	enum:yytokentype
VAR_SECRET	include/configparser.h	171;"	d
VAR_SECRET	nsd/configparser.c	/^     VAR_SECRET = 305,$/;"	e	enum:yytokentype	file:
VAR_SECRET	nsd/configparser.c	258;"	d	file:
VAR_SERVER	include/configparser.h	/^     VAR_SERVER = 266,$/;"	e	enum:yytokentype
VAR_SERVER	include/configparser.h	132;"	d
VAR_SERVER	nsd/configparser.c	/^     VAR_SERVER = 266,$/;"	e	enum:yytokentype	file:
VAR_SERVER	nsd/configparser.c	219;"	d	file:
VAR_SERVER_CERT_FILE	include/configparser.h	/^     VAR_SERVER_CERT_FILE = 318,$/;"	e	enum:yytokentype
VAR_SERVER_CERT_FILE	include/configparser.h	184;"	d
VAR_SERVER_CERT_FILE	nsd/configparser.c	/^     VAR_SERVER_CERT_FILE = 318,$/;"	e	enum:yytokentype	file:
VAR_SERVER_CERT_FILE	nsd/configparser.c	271;"	d	file:
VAR_SERVER_COUNT	include/configparser.h	/^     VAR_SERVER_COUNT = 277,$/;"	e	enum:yytokentype
VAR_SERVER_COUNT	include/configparser.h	143;"	d
VAR_SERVER_COUNT	nsd/configparser.c	/^     VAR_SERVER_COUNT = 277,$/;"	e	enum:yytokentype	file:
VAR_SERVER_COUNT	nsd/configparser.c	230;"	d	file:
VAR_SERVER_KEY_FILE	include/configparser.h	/^     VAR_SERVER_KEY_FILE = 317,$/;"	e	enum:yytokentype
VAR_SERVER_KEY_FILE	include/configparser.h	183;"	d
VAR_SERVER_KEY_FILE	nsd/configparser.c	/^     VAR_SERVER_KEY_FILE = 317,$/;"	e	enum:yytokentype	file:
VAR_SERVER_KEY_FILE	nsd/configparser.c	270;"	d	file:
VAR_STATISTICS	include/configparser.h	/^     VAR_STATISTICS = 281,$/;"	e	enum:yytokentype
VAR_STATISTICS	include/configparser.h	147;"	d
VAR_STATISTICS	nsd/configparser.c	/^     VAR_STATISTICS = 281,$/;"	e	enum:yytokentype	file:
VAR_STATISTICS	nsd/configparser.c	234;"	d	file:
VAR_TCP_COUNT	include/configparser.h	/^     VAR_TCP_COUNT = 278,$/;"	e	enum:yytokentype
VAR_TCP_COUNT	include/configparser.h	144;"	d
VAR_TCP_COUNT	nsd/configparser.c	/^     VAR_TCP_COUNT = 278,$/;"	e	enum:yytokentype	file:
VAR_TCP_COUNT	nsd/configparser.c	231;"	d	file:
VAR_TCP_QUERY_COUNT	include/configparser.h	/^     VAR_TCP_QUERY_COUNT = 288,$/;"	e	enum:yytokentype
VAR_TCP_QUERY_COUNT	include/configparser.h	154;"	d
VAR_TCP_QUERY_COUNT	nsd/configparser.c	/^     VAR_TCP_QUERY_COUNT = 288,$/;"	e	enum:yytokentype	file:
VAR_TCP_QUERY_COUNT	nsd/configparser.c	241;"	d	file:
VAR_TCP_TIMEOUT	include/configparser.h	/^     VAR_TCP_TIMEOUT = 289,$/;"	e	enum:yytokentype
VAR_TCP_TIMEOUT	include/configparser.h	155;"	d
VAR_TCP_TIMEOUT	nsd/configparser.c	/^     VAR_TCP_TIMEOUT = 289,$/;"	e	enum:yytokentype	file:
VAR_TCP_TIMEOUT	nsd/configparser.c	242;"	d	file:
VAR_UDP	include/configparser.h	/^     VAR_UDP = 307,$/;"	e	enum:yytokentype
VAR_UDP	include/configparser.h	173;"	d
VAR_UDP	nsd/configparser.c	/^     VAR_UDP = 307,$/;"	e	enum:yytokentype	file:
VAR_UDP	nsd/configparser.c	260;"	d	file:
VAR_USERNAME	include/configparser.h	/^     VAR_USERNAME = 283,$/;"	e	enum:yytokentype
VAR_USERNAME	include/configparser.h	149;"	d
VAR_USERNAME	nsd/configparser.c	/^     VAR_USERNAME = 283,$/;"	e	enum:yytokentype	file:
VAR_USERNAME	nsd/configparser.c	236;"	d	file:
VAR_VERBOSITY	include/configparser.h	/^     VAR_VERBOSITY = 308,$/;"	e	enum:yytokentype
VAR_VERBOSITY	include/configparser.h	174;"	d
VAR_VERBOSITY	nsd/configparser.c	/^     VAR_VERBOSITY = 308,$/;"	e	enum:yytokentype	file:
VAR_VERBOSITY	nsd/configparser.c	261;"	d	file:
VAR_XFRDFILE	include/configparser.h	/^     VAR_XFRDFILE = 285,$/;"	e	enum:yytokentype
VAR_XFRDFILE	include/configparser.h	151;"	d
VAR_XFRDFILE	nsd/configparser.c	/^     VAR_XFRDFILE = 285,$/;"	e	enum:yytokentype	file:
VAR_XFRDFILE	nsd/configparser.c	238;"	d	file:
VAR_XFRDIR	include/configparser.h	/^     VAR_XFRDIR = 321,$/;"	e	enum:yytokentype
VAR_XFRDIR	include/configparser.h	187;"	d
VAR_XFRDIR	nsd/configparser.c	/^     VAR_XFRDIR = 321,$/;"	e	enum:yytokentype	file:
VAR_XFRDIR	nsd/configparser.c	274;"	d	file:
VAR_XFRD_RELOAD_TIMEOUT	include/configparser.h	/^     VAR_XFRD_RELOAD_TIMEOUT = 287,$/;"	e	enum:yytokentype
VAR_XFRD_RELOAD_TIMEOUT	include/configparser.h	153;"	d
VAR_XFRD_RELOAD_TIMEOUT	nsd/configparser.c	/^     VAR_XFRD_RELOAD_TIMEOUT = 287,$/;"	e	enum:yytokentype	file:
VAR_XFRD_RELOAD_TIMEOUT	nsd/configparser.c	240;"	d	file:
VAR_ZONE	include/configparser.h	/^     VAR_ZONE = 295,$/;"	e	enum:yytokentype
VAR_ZONE	include/configparser.h	161;"	d
VAR_ZONE	nsd/configparser.c	/^     VAR_ZONE = 295,$/;"	e	enum:yytokentype	file:
VAR_ZONE	nsd/configparser.c	248;"	d	file:
VAR_ZONEFILE	include/configparser.h	/^     VAR_ZONEFILE = 294,$/;"	e	enum:yytokentype
VAR_ZONEFILE	include/configparser.h	160;"	d
VAR_ZONEFILE	nsd/configparser.c	/^     VAR_ZONEFILE = 294,$/;"	e	enum:yytokentype	file:
VAR_ZONEFILE	nsd/configparser.c	247;"	d	file:
VAR_ZONEFILES_CHECK	include/configparser.h	/^     VAR_ZONEFILES_CHECK = 329$/;"	e	enum:yytokentype
VAR_ZONEFILES_CHECK	include/configparser.h	195;"	d
VAR_ZONEFILES_CHECK	nsd/configparser.c	/^     VAR_ZONEFILES_CHECK = 329$/;"	e	enum:yytokentype	file:
VAR_ZONEFILES_CHECK	nsd/configparser.c	282;"	d	file:
VAR_ZONELISTFILE	include/configparser.h	/^     VAR_ZONELISTFILE = 312,$/;"	e	enum:yytokentype
VAR_ZONELISTFILE	include/configparser.h	178;"	d
VAR_ZONELISTFILE	nsd/configparser.c	/^     VAR_ZONELISTFILE = 312,$/;"	e	enum:yytokentype	file:
VAR_ZONELISTFILE	nsd/configparser.c	265;"	d	file:
VAR_ZONESDIR	include/configparser.h	/^     VAR_ZONESDIR = 284,$/;"	e	enum:yytokentype
VAR_ZONESDIR	include/configparser.h	150;"	d
VAR_ZONESDIR	nsd/configparser.c	/^     VAR_ZONESDIR = 284,$/;"	e	enum:yytokentype	file:
VAR_ZONESDIR	nsd/configparser.c	237;"	d	file:
VERBOSITY	include/util.h	93;"	d
VERSION	include/config.h	474;"	d
XFRDFILE	include/config.h	477;"	d
XFRDIR	include/config.h	480;"	d
XFRD_DISK_H	include/xfrd-disk.h	11;"	d
XFRD_FILE_MAGIC	include/xfrd-disk.h	17;"	d
XFRD_H	include/xfrd.h	11;"	d
XFRD_LOWERBOUND_REFRESH	nsd/xfrd.c	37;"	d	file:
XFRD_LOWERBOUND_RETRY	nsd/xfrd.c	38;"	d	file:
XFRD_MAX_ROUNDS	nsd/xfrd.c	39;"	d	file:
XFRD_MAX_TCP	include/xfrd.h	219;"	d
XFRD_MAX_UDP	include/xfrd.h	221;"	d
XFRD_MAX_UDP_NOTIFY	include/xfrd.h	222;"	d
XFRD_NOTIFY_H	include/xfrd-notify.h	11;"	d
XFRD_NOTIFY_RETRY_TIMOUT	nsd/xfrd-notify.c	20;"	d	file:
XFRD_NO_IXFR_CACHE	nsd/xfrd.c	36;"	d	file:
XFRD_TCP_H	include/xfrd-tcp.h	11;"	d
XFRD_TRANSFER_TIMEOUT_MAX	nsd/xfrd.c	34;"	d	file:
XFRD_TRANSFER_TIMEOUT_START	nsd/xfrd.c	33;"	d	file:
XFRD_TSIG_MAX_UNSIGNED	nsd/xfrd.c	40;"	d	file:
XFRD_UDP_TIMEOUT	nsd/xfrd.c	35;"	d	file:
YYABORT	nsd/configparser.c	960;"	d	file:
YYABORT	nsd/zparser.c	1309;"	d	file:
YYACCEPT	nsd/configparser.c	959;"	d	file:
YYACCEPT	nsd/zparser.c	1308;"	d	file:
YYBACKUP	nsd/configparser.c	981;"	d	file:
YYBACKUP	nsd/zparser.c	1330;"	d	file:
YYBISON	nsd/configparser.c	44;"	d	file:
YYBISON	nsd/zparser.c	44;"	d	file:
YYBISON_VERSION	nsd/configparser.c	47;"	d	file:
YYBISON_VERSION	nsd/zparser.c	47;"	d	file:
YYCASE_	nsd/configparser.c	1417;"	d	file:
YYCASE_	nsd/configparser.c	1427;"	d	file:
YYCASE_	nsd/zparser.c	1766;"	d	file:
YYCASE_	nsd/zparser.c	1776;"	d	file:
YYCOPY	nsd/configparser.c	526;"	d	file:
YYCOPY	nsd/configparser.c	529;"	d	file:
YYCOPY	nsd/zparser.c	569;"	d	file:
YYCOPY	nsd/zparser.c	572;"	d	file:
YYCOPY_NEEDED	nsd/configparser.c	501;"	d	file:
YYCOPY_NEEDED	nsd/zparser.c	544;"	d	file:
YYDEBUG	include/configparser.h	37;"	d
YYDEBUG	include/zparser.h	37;"	d
YYDEBUG	nsd/configparser.c	124;"	d	file:
YYDEBUG	nsd/zparser.c	141;"	d	file:
YYDPRINTF	nsd/configparser.c	1053;"	d	file:
YYDPRINTF	nsd/configparser.c	1204;"	d	file:
YYDPRINTF	nsd/zparser.c	1402;"	d	file:
YYDPRINTF	nsd/zparser.c	1553;"	d	file:
YYEMPTY	nsd/configparser.c	956;"	d	file:
YYEMPTY	nsd/zparser.c	1305;"	d	file:
YYEOF	nsd/configparser.c	957;"	d	file:
YYEOF	nsd/zparser.c	1306;"	d	file:
YYERRCODE	nsd/configparser.c	1000;"	d	file:
YYERRCODE	nsd/zparser.c	1349;"	d	file:
YYERROR	nsd/configparser.c	961;"	d	file:
YYERROR	nsd/zparser.c	1310;"	d	file:
YYERROR_VERBOSE	nsd/configparser.c	112;"	d	file:
YYERROR_VERBOSE	nsd/configparser.c	113;"	d	file:
YYERROR_VERBOSE	nsd/configparser.c	115;"	d	file:
YYERROR_VERBOSE	nsd/zparser.c	129;"	d	file:
YYERROR_VERBOSE	nsd/zparser.c	130;"	d	file:
YYERROR_VERBOSE	nsd/zparser.c	132;"	d	file:
YYFAIL	nsd/configparser.c	971;"	d	file:
YYFAIL	nsd/zparser.c	1320;"	d	file:
YYFINAL	nsd/configparser.c	542;"	d	file:
YYFINAL	nsd/zparser.c	585;"	d	file:
YYFPRINTF	nsd/configparser.c	1050;"	d	file:
YYFPRINTF	nsd/zparser.c	1399;"	d	file:
YYFREE	nsd/configparser.c	471;"	d	file:
YYFREE	nsd/zparser.c	514;"	d	file:
YYID	nsd/configparser.c	/^YYID (int yyi)$/;"	f	file:
YYID	nsd/configparser.c	394;"	d	file:
YYID	nsd/zparser.c	/^YYID (int yyi)$/;"	f	file:
YYID	nsd/zparser.c	437;"	d	file:
YYINITDEPTH	nsd/configparser.c	1213;"	d	file:
YYINITDEPTH	nsd/zparser.c	1562;"	d	file:
YYLAST	nsd/configparser.c	544;"	d	file:
YYLAST	nsd/zparser.c	587;"	d	file:
YYLEX	nsd/configparser.c	1040;"	d	file:
YYLEX	nsd/configparser.c	1042;"	d	file:
YYLEX	nsd/zparser.c	1389;"	d	file:
YYLEX	nsd/zparser.c	1391;"	d	file:
YYLLOC_DEFAULT	nsd/configparser.c	1007;"	d	file:
YYLLOC_DEFAULT	nsd/zparser.c	1356;"	d	file:
YYMALLOC	nsd/configparser.c	464;"	d	file:
YYMALLOC	nsd/zparser.c	507;"	d	file:
YYMAXDEPTH	nsd/configparser.c	1224;"	d	file:
YYMAXDEPTH	nsd/zparser.c	1573;"	d	file:
YYMAXUTOK	nsd/configparser.c	557;"	d	file:
YYMAXUTOK	nsd/zparser.c	600;"	d	file:
YYNNTS	nsd/configparser.c	549;"	d	file:
YYNNTS	nsd/zparser.c	592;"	d	file:
YYNRULES	nsd/configparser.c	551;"	d	file:
YYNRULES	nsd/zparser.c	594;"	d	file:
YYNSTATES	nsd/configparser.c	553;"	d	file:
YYNSTATES	nsd/zparser.c	596;"	d	file:
YYNTOKENS	nsd/configparser.c	547;"	d	file:
YYNTOKENS	nsd/zparser.c	590;"	d	file:
YYPACT_NINF	nsd/configparser.c	838;"	d	file:
YYPACT_NINF	nsd/zparser.c	979;"	d	file:
YYPOPSTACK	nsd/configparser.c	1574;"	d	file:
YYPOPSTACK	nsd/zparser.c	1923;"	d	file:
YYPULL	nsd/configparser.c	59;"	d	file:
YYPULL	nsd/zparser.c	59;"	d	file:
YYPURE	nsd/configparser.c	53;"	d	file:
YYPURE	nsd/zparser.c	53;"	d	file:
YYPUSH	nsd/configparser.c	56;"	d	file:
YYPUSH	nsd/zparser.c	56;"	d	file:
YYRECOVERING	nsd/configparser.c	979;"	d	file:
YYRECOVERING	nsd/zparser.c	1328;"	d	file:
YYRHSLOC	nsd/configparser.c	1026;"	d	file:
YYRHSLOC	nsd/zparser.c	1375;"	d	file:
YYSIZE_MAXIMUM	nsd/configparser.c	371;"	d	file:
YYSIZE_MAXIMUM	nsd/zparser.c	414;"	d	file:
YYSIZE_T	nsd/configparser.c	359;"	d	file:
YYSIZE_T	nsd/configparser.c	361;"	d	file:
YYSIZE_T	nsd/configparser.c	365;"	d	file:
YYSIZE_T	nsd/configparser.c	367;"	d	file:
YYSIZE_T	nsd/zparser.c	402;"	d	file:
YYSIZE_T	nsd/zparser.c	404;"	d	file:
YYSIZE_T	nsd/zparser.c	408;"	d	file:
YYSIZE_T	nsd/zparser.c	410;"	d	file:
YYSKELETON_NAME	nsd/configparser.c	50;"	d	file:
YYSKELETON_NAME	nsd/zparser.c	50;"	d	file:
YYSTACK_ALLOC	nsd/configparser.c	417;"	d	file:
YYSTACK_ALLOC	nsd/configparser.c	421;"	d	file:
YYSTACK_ALLOC	nsd/configparser.c	426;"	d	file:
YYSTACK_ALLOC	nsd/configparser.c	450;"	d	file:
YYSTACK_ALLOC	nsd/zparser.c	460;"	d	file:
YYSTACK_ALLOC	nsd/zparser.c	464;"	d	file:
YYSTACK_ALLOC	nsd/zparser.c	469;"	d	file:
YYSTACK_ALLOC	nsd/zparser.c	493;"	d	file:
YYSTACK_ALLOC_MAXIMUM	nsd/configparser.c	447;"	d	file:
YYSTACK_ALLOC_MAXIMUM	nsd/configparser.c	453;"	d	file:
YYSTACK_ALLOC_MAXIMUM	nsd/zparser.c	490;"	d	file:
YYSTACK_ALLOC_MAXIMUM	nsd/zparser.c	496;"	d	file:
YYSTACK_BYTES	nsd/configparser.c	497;"	d	file:
YYSTACK_BYTES	nsd/zparser.c	540;"	d	file:
YYSTACK_FREE	nsd/configparser.c	441;"	d	file:
YYSTACK_FREE	nsd/configparser.c	451;"	d	file:
YYSTACK_FREE	nsd/zparser.c	484;"	d	file:
YYSTACK_FREE	nsd/zparser.c	494;"	d	file:
YYSTACK_GAP_MAXIMUM	nsd/configparser.c	493;"	d	file:
YYSTACK_GAP_MAXIMUM	nsd/zparser.c	536;"	d	file:
YYSTACK_RELOCATE	nsd/configparser.c	508;"	d	file:
YYSTACK_RELOCATE	nsd/zparser.c	551;"	d	file:
YYSTATE	nsd/configlexer.c	133;"	d	file:
YYSTATE	nsd/zlexer.c	133;"	d	file:
YYSTYPE	include/configparser.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	include/configparser.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	include/zparser.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	include/zparser.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	nsd/configparser.c	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	nsd/configparser.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	nsd/zparser.c	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	nsd/zparser.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE_IS_DECLARED	include/configparser.h	213;"	d
YYSTYPE_IS_DECLARED	include/zparser.h	239;"	d
YYSTYPE_IS_DECLARED	nsd/configparser.c	300;"	d	file:
YYSTYPE_IS_DECLARED	nsd/zparser.c	343;"	d	file:
YYSTYPE_IS_TRIVIAL	include/configparser.h	211;"	d
YYSTYPE_IS_TRIVIAL	include/zparser.h	237;"	d
YYSTYPE_IS_TRIVIAL	nsd/configparser.c	298;"	d	file:
YYSTYPE_IS_TRIVIAL	nsd/zparser.c	341;"	d	file:
YYTABLES_NAME	nsd/configlexer.c	2854;"	d	file:
YYTABLES_NAME	nsd/zlexer.c	2161;"	d	file:
YYTABLE_NINF	nsd/configparser.c	881;"	d	file:
YYTABLE_NINF	nsd/zparser.c	1054;"	d	file:
YYTERROR	nsd/configparser.c	999;"	d	file:
YYTERROR	nsd/zparser.c	1348;"	d	file:
YYTEXT_POINTER	include/config.h	484;"	d
YYTOKENTYPE	include/configparser.h	45;"	d
YYTOKENTYPE	include/zparser.h	45;"	d
YYTOKENTYPE	nsd/configparser.c	132;"	d	file:
YYTOKENTYPE	nsd/zparser.c	149;"	d	file:
YYTRANSLATE	nsd/configparser.c	559;"	d	file:
YYTRANSLATE	nsd/zparser.c	602;"	d	file:
YYUNDEFTOK	nsd/configparser.c	556;"	d	file:
YYUNDEFTOK	nsd/zparser.c	599;"	d	file:
YYUSE	nsd/configparser.c	387;"	d	file:
YYUSE	nsd/configparser.c	389;"	d	file:
YYUSE	nsd/zparser.c	430;"	d	file:
YYUSE	nsd/zparser.c	432;"	d	file:
YY_	nsd/configparser.c	377;"	d	file:
YY_	nsd/configparser.c	381;"	d	file:
YY_	nsd/zparser.c	420;"	d	file:
YY_	nsd/zparser.c	424;"	d	file:
YY_AT_BOL	nsd/configlexer.c	332;"	d	file:
YY_AT_BOL	nsd/zlexer.c	332;"	d	file:
YY_BREAK	nsd/configlexer.c	1331;"	d	file:
YY_BREAK	nsd/zlexer.c	796;"	d	file:
YY_BUFFER_EOF_PENDING	nsd/configlexer.c	248;"	d	file:
YY_BUFFER_EOF_PENDING	nsd/zlexer.c	248;"	d	file:
YY_BUFFER_NEW	nsd/configlexer.c	236;"	d	file:
YY_BUFFER_NEW	nsd/zlexer.c	236;"	d	file:
YY_BUFFER_NORMAL	nsd/configlexer.c	237;"	d	file:
YY_BUFFER_NORMAL	nsd/zlexer.c	237;"	d	file:
YY_BUFFER_STATE	nsd/configlexer.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUFFER_STATE	nsd/zlexer.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	nsd/configlexer.c	145;"	d	file:
YY_BUF_SIZE	nsd/zlexer.c	145;"	d	file:
YY_CHAR	nsd/configlexer.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CHAR	nsd/zlexer.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CONFIGPARSER_H	include/configparser.h	34;"	d
YY_CONFIGPARSER_H	nsd/configparser.c	121;"	d	file:
YY_CURRENT_BUFFER	nsd/configlexer.c	264;"	d	file:
YY_CURRENT_BUFFER	nsd/zlexer.c	264;"	d	file:
YY_CURRENT_BUFFER_LVALUE	nsd/configlexer.c	271;"	d	file:
YY_CURRENT_BUFFER_LVALUE	nsd/zlexer.c	271;"	d	file:
YY_DECL	nsd/configlexer.c	1319;"	d	file:
YY_DECL	nsd/zlexer.c	784;"	d	file:
YY_DECL_IS_OURS	nsd/configlexer.c	1315;"	d	file:
YY_DECL_IS_OURS	nsd/zlexer.c	780;"	d	file:
YY_DO_BEFORE_ACTION	nsd/configlexer.c	357;"	d	file:
YY_DO_BEFORE_ACTION	nsd/zlexer.c	357;"	d	file:
YY_END_OF_BUFFER	nsd/configlexer.c	366;"	d	file:
YY_END_OF_BUFFER	nsd/zlexer.c	366;"	d	file:
YY_END_OF_BUFFER_CHAR	nsd/configlexer.c	141;"	d	file:
YY_END_OF_BUFFER_CHAR	nsd/zlexer.c	141;"	d	file:
YY_EXIT_FAILURE	nsd/configlexer.c	2652;"	d	file:
YY_EXIT_FAILURE	nsd/zlexer.c	1959;"	d	file:
YY_EXTRA_TYPE	nsd/configlexer.c	1178;"	d	file:
YY_EXTRA_TYPE	nsd/zlexer.c	643;"	d	file:
YY_FATAL_ERROR	nsd/configlexer.c	1306;"	d	file:
YY_FATAL_ERROR	nsd/zlexer.c	771;"	d	file:
YY_FLEX_MAJOR_VERSION	nsd/configlexer.c	10;"	d	file:
YY_FLEX_MAJOR_VERSION	nsd/zlexer.c	10;"	d	file:
YY_FLEX_MINOR_VERSION	nsd/configlexer.c	11;"	d	file:
YY_FLEX_MINOR_VERSION	nsd/zlexer.c	11;"	d	file:
YY_FLEX_SUBMINOR_VERSION	nsd/configlexer.c	12;"	d	file:
YY_FLEX_SUBMINOR_VERSION	nsd/zlexer.c	12;"	d	file:
YY_FLUSH_BUFFER	nsd/configlexer.c	300;"	d	file:
YY_FLUSH_BUFFER	nsd/zlexer.c	300;"	d	file:
YY_INPUT	nsd/configlexer.c	1259;"	d	file:
YY_INPUT	nsd/zlexer.c	724;"	d	file:
YY_INT_ALIGNED	nsd/configlexer.c	5;"	d	file:
YY_INT_ALIGNED	nsd/zlexer.c	5;"	d	file:
YY_LESS_LINENO	nsd/configlexer.c	170;"	d	file:
YY_LESS_LINENO	nsd/zlexer.c	170;"	d	file:
YY_LOCATION_PRINT	nsd/configparser.c	1033;"	d	file:
YY_LOCATION_PRINT	nsd/zparser.c	1382;"	d	file:
YY_MORE_ADJ	nsd/configlexer.c	1059;"	d	file:
YY_MORE_ADJ	nsd/zlexer.c	520;"	d	file:
YY_NEW_FILE	nsd/configlexer.c	139;"	d	file:
YY_NEW_FILE	nsd/zlexer.c	139;"	d	file:
YY_NO_INPUT	nsd/configlexer.c	1153;"	d	file:
YY_NO_INPUT	nsd/configlexer.c	1159;"	d	file:
YY_NO_INPUT	nsd/zlexer.c	618;"	d	file:
YY_NO_INPUT	nsd/zlexer.c	624;"	d	file:
YY_NO_UNPUT	nsd/configlexer.c	1156;"	d	file:
YY_NO_UNPUT	nsd/zlexer.c	621;"	d	file:
YY_NULL	nsd/configlexer.c	113;"	d	file:
YY_NULL	nsd/configparser.c	104;"	d	file:
YY_NULL	nsd/configparser.c	106;"	d	file:
YY_NULL	nsd/zlexer.c	113;"	d	file:
YY_NULL	nsd/zparser.c	121;"	d	file:
YY_NULL	nsd/zparser.c	123;"	d	file:
YY_NUM_RULES	nsd/configlexer.c	365;"	d	file:
YY_NUM_RULES	nsd/zlexer.c	365;"	d	file:
YY_READ_BUF_SIZE	nsd/configlexer.c	1244;"	d	file:
YY_READ_BUF_SIZE	nsd/zlexer.c	709;"	d	file:
YY_REDUCE_PRINT	nsd/configparser.c	1194;"	d	file:
YY_REDUCE_PRINT	nsd/configparser.c	1207;"	d	file:
YY_REDUCE_PRINT	nsd/zparser.c	1543;"	d	file:
YY_REDUCE_PRINT	nsd/zparser.c	1556;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	nsd/configlexer.c	1060;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	nsd/zlexer.c	521;"	d	file:
YY_RULE_SETUP	nsd/configlexer.c	1334;"	d	file:
YY_RULE_SETUP	nsd/zlexer.c	799;"	d	file:
YY_SC_TO_UI	nsd/configlexer.c	120;"	d	file:
YY_SC_TO_UI	nsd/zlexer.c	120;"	d	file:
YY_STACK_PRINT	nsd/configparser.c	1156;"	d	file:
YY_STACK_PRINT	nsd/configparser.c	1206;"	d	file:
YY_STACK_PRINT	nsd/zparser.c	1505;"	d	file:
YY_STACK_PRINT	nsd/zparser.c	1555;"	d	file:
YY_START	nsd/configlexer.c	132;"	d	file:
YY_START	nsd/zlexer.c	132;"	d	file:
YY_START_STACK_INCR	nsd/configlexer.c	1301;"	d	file:
YY_START_STACK_INCR	nsd/zlexer.c	766;"	d	file:
YY_STATE_BUF_SIZE	nsd/configlexer.c	150;"	d	file:
YY_STATE_BUF_SIZE	nsd/zlexer.c	150;"	d	file:
YY_STATE_EOF	nsd/configlexer.c	136;"	d	file:
YY_STATE_EOF	nsd/zlexer.c	136;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	nsd/configlexer.c	189;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	nsd/zlexer.c	189;"	d	file:
YY_SYMBOL_PRINT	nsd/configparser.c	1059;"	d	file:
YY_SYMBOL_PRINT	nsd/configparser.c	1205;"	d	file:
YY_SYMBOL_PRINT	nsd/zparser.c	1408;"	d	file:
YY_SYMBOL_PRINT	nsd/zparser.c	1554;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	nsd/configlexer.c	153;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	nsd/zlexer.c	153;"	d	file:
YY_TYPEDEF_YY_SIZE_T	nsd/configlexer.c	158;"	d	file:
YY_TYPEDEF_YY_SIZE_T	nsd/zlexer.c	158;"	d	file:
YY_USER_ACTION	nsd/configlexer.c	1326;"	d	file:
YY_USER_ACTION	nsd/zlexer.c	791;"	d	file:
YY_USE_CONST	nsd/configlexer.c	101;"	d	file:
YY_USE_CONST	nsd/configlexer.c	94;"	d	file:
YY_USE_CONST	nsd/zlexer.c	101;"	d	file:
YY_USE_CONST	nsd/zlexer.c	94;"	d	file:
YY_ZPARSER_H	include/zparser.h	34;"	d
YY_ZPARSER_H	nsd/zparser.c	138;"	d	file:
Z	include/packet.h	101;"	d
ZONE	include/udbzone.h	142;"	d
ZONEC_PCT_COUNT	include/options.h	329;"	d
ZONEC_PCT_TIME	include/options.h	328;"	d
ZONELISTFILE	include/config.h	487;"	d
ZONELIST_HEADER	nsd/options.c	254;"	d	file:
ZONESDIR	include/config.h	490;"	d
ZONESTR	include/configparser.h	/^     ZONESTR = 264,$/;"	e	enum:yytokentype
ZONESTR	include/configparser.h	130;"	d
ZONESTR	nsd/configparser.c	/^     ZONESTR = 264,$/;"	e	enum:yytokentype	file:
ZONESTR	nsd/configparser.c	217;"	d	file:
Z_CLR	include/packet.h	103;"	d
Z_MASK	include/packet.h	99;"	d
Z_SET	include/packet.h	102;"	d
Z_SHIFT	include/packet.h	100;"	d
_ALL_SOURCE	include/config.h	453;"	d
_ALL_SOURCE	include/config.h	612;"	d
_ANSWER_H_	include/answer.h	11;"	d
_AXFR_H_	include/axfr.h	11;"	d
_BSD_SOURCE	include/config.h	603;"	d
_BUFFER_H_	include/buffer.h	14;"	d
_DARWIN_USE_64_BIT_INODE	include/config.h	494;"	d
_DNAME_H_	include/dname.h	11;"	d
_DNS_H_	include/dns.h	11;"	d
_EDNS_H_	include/edns.h	11;"	d
_FAKE_RFC2553_H	compat/fake-rfc2553.h	40;"	d
_FDNS_H_	include/fdns.h	2;"	d
_GNU_SOURCE	include/config.h	457;"	d
_IP_H_	include/ipv4.h	2;"	d
_NAMEDB_H_	include/namedb.h	11;"	d
_NETDEV_H_	include/netdev.h	2;"	d
_NETIO_H_	include/netio.h	43;"	d
_NSD_H_	include/nsd.h	2;"	d
_PACKET_H_	include/packet.h	11;"	d
_POSIX_C_SOURCE	include/config.h	600;"	d
_POSIX_PTHREAD_SEMANTICS	include/config.h	461;"	d
_QUERY_H_	include/query.h	11;"	d
_RBTREE_H_	include/rbtree.h	11;"	d
_RDATA_H_	include/rdata.h	11;"	d
_REGION_ALLOCATOR_H_	include/region-allocator.h	11;"	d
_SEC_2_PRI	main.c	/^static const char *_SEC_2_PRI = "SEC_2_PRI";$/;"	v	file:
_SS_MAXSIZE	compat/fake-rfc2553.h	52;"	d
_SS_PADSIZE	compat/fake-rfc2553.h	53;"	d
_STDC_C99	include/config.h	609;"	d
_TANDEM_SOURCE	include/config.h	465;"	d
_TSIG_H_	include/tsig.h	11;"	d
_TSIG_OPENSSL_H_	include/tsig-openssl.h	11;"	d
_UTIL_H_	include/util.h	11;"	d
_VA_LIST_DEFINED	include/config.h	621;"	d
_XOPEN_SOURCE	include/config.h	597;"	d
_ZONEC_H_	include/zonec.h	11;"	d
__EXTENSIONS__	include/config.h	469;"	d
__EXTENSIONS__	include/config.h	606;"	d
__STDC_LIMIT_MACROS	nsd/configlexer.c	40;"	d	file:
__STDC_LIMIT_MACROS	nsd/zlexer.c	40;"	d	file:
__ss_pad2	compat/fake-rfc2553.h	/^	char		__ss_pad2[_SS_PADSIZE];$/;"	m	struct:sockaddr_storage
__timespec_defined	include/config.h	759;"	d
_capacity	include/buffer.h	/^	size_t   _capacity;$/;"	m	struct:buffer
_data	include/buffer.h	/^	uint8_t *_data;$/;"	m	struct:buffer
_fixed	include/buffer.h	/^	unsigned _fixed : 1;$/;"	m	struct:buffer
_limit	include/buffer.h	/^	size_t   _limit;$/;"	m	struct:buffer
_node	include/rbtree.h	/^	rbnode_t    *_node;$/;"	m	struct:rbtree_t
_position	include/buffer.h	/^	size_t   _position;$/;"	m	struct:buffer
abb_months	compat/strptime.c	/^static const char *abb_months[] = {$/;"	v	file:
abb_weekdays	compat/strptime.c	/^static const char *abb_weekdays[] = {$/;"	v	file:
acl_addr_match_mask	nsd/options.c	/^acl_addr_match_mask(uint32_t* a, uint32_t* b, uint32_t* mask, size_t sz)$/;"	f
acl_addr_match_range	nsd/options.c	/^acl_addr_match_range(uint32_t* minval, uint32_t* x, uint32_t* maxval, size_t sz)$/;"	f
acl_addr_matches	nsd/options.c	/^acl_addr_matches(acl_options_t* acl, struct query* q)$/;"	f
acl_addr_matches_host	nsd/options.c	/^acl_addr_matches_host(acl_options_t* acl, acl_options_t* host)$/;"	f
acl_addr_matches_ipv4host	nsd/options.c	/^acl_addr_matches_ipv4host(acl_options_t* acl, struct sockaddr_in* addr, unsigned int port)$/;"	f
acl_addr_matches_ipv6host	nsd/options.c	/^acl_addr_matches_ipv6host(acl_options_t* acl, struct sockaddr_storage* addr_storage, unsigned int port)$/;"	f
acl_addr_storage	include/options.h	/^union acl_addr_storage {$/;"	u
acl_check_incoming	nsd/options.c	/^acl_check_incoming(acl_options_t* acl, struct query* q,$/;"	f
acl_delete	nsd/options.c	/^acl_delete(region_type* region, acl_options_t* acl)$/;"	f	file:
acl_equal	nsd/options.c	/^acl_equal(acl_options_t* p, acl_options_t* q)$/;"	f
acl_find_num	nsd/options.c	/^acl_find_num(acl_options_t* acl, int num)$/;"	f
acl_key_matches	nsd/options.c	/^acl_key_matches(acl_options_t* acl, struct query* q)$/;"	f
acl_list_delete	nsd/options.c	/^acl_list_delete(region_type* region, acl_options_t* list)$/;"	f	file:
acl_list_equal	nsd/options.c	/^acl_list_equal(acl_options_t* p, acl_options_t* q)$/;"	f
acl_num	include/ipc.h	/^	uint32_t	acl_num;$/;"	m	struct:main_ipc_handler_data
acl_options	include/options.h	/^struct acl_options {$/;"	s
acl_options_t	include/options.h	/^typedef struct acl_options acl_options_t;$/;"	t	typeref:struct:acl_options
acl_range_mask	include/options.h	/^		acl_range_mask = 1,	\/* 10.20.30.40&255.255.255.0 *\/$/;"	e	enum:acl_options::__anon1
acl_range_minmax	include/options.h	/^		acl_range_minmax = 3	\/* 10.20.30.40-10.20.30.60 (mask=max) *\/$/;"	e	enum:acl_options::__anon1
acl_range_single	include/options.h	/^		acl_range_single = 0,	\/* single adress *\/$/;"	e	enum:acl_options::__anon1
acl_range_subnet	include/options.h	/^		acl_range_subnet = 2,	\/* 10.20.30.40\/28 *\/$/;"	e	enum:acl_options::__anon1
acl_same_host	nsd/options.c	/^acl_same_host(acl_options_t* a, acl_options_t* b)$/;"	f
acl_xfr	include/ipc.h	/^	int32_t		acl_xfr;$/;"	m	struct:main_ipc_handler_data
action	nsd/region-allocator.c	/^	void (*action)(void *);$/;"	m	struct:cleanup	file:
activated_first	include/xfrd.h	/^	struct xfrd_zone *activated_first;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::xfrd_zone
activated_next	include/xfrd.h	/^	xfrd_zone_t* activated_next;$/;"	m	struct:xfrd_zone
activated_prev	include/xfrd.h	/^	xfrd_zone_t* activated_prev;$/;"	m	struct:xfrd_zone
add_RR	nsd/difffile.c	/^add_RR(namedb_type* db, const dname_type* dname,$/;"	f
add_additional_rrsets	nsd/query.c	/^add_additional_rrsets(struct query *query, answer_type *answer,$/;"	f
add_rdata	nsd/dbcreate.c	/^add_rdata(rr_type* rr, unsigned i, uint8_t* buf, size_t buflen)$/;"	f	file:
add_rdata_to_recyclebin	nsd/difffile.c	/^add_rdata_to_recyclebin(namedb_type* db, rr_type* rr)$/;"	f	file:
add_rrset	nsd/query.c	/^add_rrset(struct query   *query,$/;"	f
added	include/mini_event.h	/^	int added;$/;"	m	struct:event
additional_rr_types	nsd/query.c	/^struct additional_rr_types$/;"	s	file:
addr	include/options.h	/^	struct in_addr addr;$/;"	m	union:acl_addr_storage	typeref:struct:acl_addr_storage::in_addr
addr	include/options.h	/^	union acl_addr_storage addr;$/;"	m	struct:acl_options	typeref:union:acl_options::acl_addr_storage
addr	include/query.h	/^	struct sockaddr_in addr;$/;"	m	struct:query	typeref:struct:query::sockaddr_in
addr	include/query.h	/^	struct sockaddr_storage addr;$/;"	m	struct:query	typeref:struct:query::sockaddr_storage
addr2str	nsd/util.c	/^addr2str($/;"	f
addr6	include/options.h	/^	struct in6_addr addr6;$/;"	m	union:acl_addr_storage	typeref:struct:acl_addr_storage::in6_addr
address	include/options.h	/^	char* address;$/;"	m	struct:ipaddress_option
addrinfo	compat/fake-rfc2553.h	/^struct addrinfo {$/;"	s
addrlen	include/query.h	/^	socklen_t addrlen;$/;"	m	struct:query
ai_addr	compat/fake-rfc2553.h	/^	struct sockaddr *ai_addr;	\/* binary address *\/$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr
ai_addrlen	compat/fake-rfc2553.h	/^	size_t	ai_addrlen;	\/* length of ai_addr *\/$/;"	m	struct:addrinfo
ai_canonname	compat/fake-rfc2553.h	/^	char	*ai_canonname;	\/* canonical name for hostname *\/$/;"	m	struct:addrinfo
ai_family	compat/fake-rfc2553.h	/^	int	ai_family;	\/* PF_xxx *\/$/;"	m	struct:addrinfo
ai_flags	compat/fake-rfc2553.h	/^	int	ai_flags;	\/* AI_PASSIVE, AI_CANONNAME *\/$/;"	m	struct:addrinfo
ai_next	compat/fake-rfc2553.h	/^	struct addrinfo *ai_next;	\/* next structure in linked list *\/$/;"	m	struct:addrinfo	typeref:struct:addrinfo::addrinfo
ai_protocol	compat/fake-rfc2553.h	/^	int	ai_protocol;	\/* 0 or IPPROTO_xxx for IPv4 and IPv6 *\/$/;"	m	struct:addrinfo
ai_socktype	compat/fake-rfc2553.h	/^	int	ai_socktype;	\/* SOCK_xxx *\/$/;"	m	struct:addrinfo
algorithm	include/options.h	/^	char* algorithm;$/;"	m	struct:key_options
algorithm	include/tsig.h	/^	tsig_algorithm_type *algorithm;$/;"	m	struct:tsig_record
algorithm	nsd/tsig.c	/^	tsig_algorithm_type *algorithm;$/;"	m	struct:tsig_algorithm_table	file:
algorithm_name	include/tsig.h	/^	const dname_type *algorithm_name;$/;"	m	struct:tsig_record
alloc	include/udb.h	/^	udb_alloc* alloc;$/;"	m	struct:udb_base
alloc_rdata	include/zonec.c	/^alloc_rdata(region_type *region, size_t size)$/;"	f	file:
alloc_rdata	nsd/zonec.c	/^alloc_rdata(region_type *region, size_t size)$/;"	f	file:
alloc_rdata_init	include/zonec.c	/^alloc_rdata_init(region_type *region, const void *data, size_t size)$/;"	f
alloc_rdata_init	nsd/zonec.c	/^alloc_rdata_init(region_type *region, const void *data, size_t size)$/;"	f
alloc_region_base	nsd/region-allocator.c	/^alloc_region_base(void *(*allocator)(size_t size),$/;"	f	file:
alloca	nsd/configparser.c	424;"	d	file:
alloca	nsd/zparser.c	467;"	d	file:
allocate_domain_info	nsd/namedb.c	/^allocate_domain_info(domain_table_type* table,$/;"	f	file:
allocate_domain_nsec3	nsd/namedb.c	/^allocate_domain_nsec3(domain_table_type* table, domain_type* result)$/;"	f
allocated	nsd/region-allocator.c	/^	size_t        allocated;$/;"	m	struct:region	file:
allocator	nsd/region-allocator.c	/^	void         *(*allocator)(size_t);$/;"	m	struct:region	file:
allow_axfr_fallback	include/options.h	/^	uint8_t allow_axfr_fallback;$/;"	m	struct:pattern_options
allow_axfr_fallback_is_default	include/options.h	/^	uint8_t allow_axfr_fallback_is_default;$/;"	m	struct:pattern_options
allow_notify	include/options.h	/^	acl_options_t* allow_notify;$/;"	m	struct:pattern_options
allow_udp	include/options.h	/^	uint8_t allow_udp;$/;"	m	struct:acl_options
ampm	compat/strptime.c	/^static const char *ampm[] = {$/;"	v	file:
answer	include/answer.h	/^struct answer {$/;"	s
answer_add_rrset	nsd/answer.c	/^answer_add_rrset(answer_type *answer, rr_section_type section,$/;"	f
answer_authoritative	nsd/query.c	/^answer_authoritative(struct nsd   *nsd,$/;"	f
answer_chaos	nsd/query.c	/^answer_chaos(struct nsd *nsd, query_type *q)$/;"	f
answer_delegation	nsd/query.c	/^answer_delegation(query_type *query, answer_type *answer)$/;"	f
answer_domain	nsd/query.c	/^answer_domain(struct nsd* nsd, struct query *q, answer_type *answer,$/;"	f
answer_init	nsd/answer.c	/^answer_init(answer_type *answer)$/;"	f
answer_lookup_zone	nsd/query.c	/^answer_lookup_zone(struct nsd *nsd, struct query *q, answer_type *answer,$/;"	f
answer_needs_ns	nsd/query.c	/^answer_needs_ns(struct query* query)$/;"	f
answer_nodata	nsd/query.c	/^answer_nodata(struct query *query, answer_type *answer, domain_type *original)$/;"	f
answer_nxdomain	nsd/query.c	/^answer_nxdomain(query_type *query, answer_type *answer)$/;"	f
answer_query	nsd/query.c	/^answer_query(struct nsd *nsd, struct query *q)$/;"	f
answer_soa	nsd/query.c	/^answer_soa(struct query *query, answer_type *answer)$/;"	f
answer_type	include/answer.h	/^typedef struct answer answer_type;$/;"	t	typeref:struct:answer
apex	include/namedb.h	/^	domain_type* apex;$/;"	m	struct:zone
apex	include/xfrd-notify.h	/^	const dname_type* apex;$/;"	m	struct:notify_zone_t
apex	include/xfrd.h	/^	const dname_type* apex;$/;"	m	struct:xfrd_zone
apex_rrset_checks	nsd/dbaccess.c	/^apex_rrset_checks(namedb_type* db, rrset_type* rrset, domain_type* domain)$/;"	f
apex_str	include/xfrd-notify.h	/^	const char* apex_str;$/;"	m	struct:notify_zone_t
apex_str	include/xfrd.h	/^	const char* apex_str;$/;"	m	struct:xfrd_zone
append_acl	nsd/options.c	/^void append_acl(acl_options_t** start, acl_options_t** cur,$/;"	f	file:
apply_ixfr	nsd/difffile.c	/^apply_ixfr(namedb_type* db, FILE *in, const char* zone, uint32_t serialno,$/;"	f	file:
apply_ixfr_for_zone	nsd/difffile.c	/^apply_ixfr_for_zone(nsd_type* nsd, zone_type* zonedb, FILE* in,$/;"	f	file:
array	include/radtree.h	/^	struct radsel* array; $/;"	m	struct:radnode	typeref:struct:radnode::radsel
array	include/udbradtree.h	/^	struct udb_radsel_d array[0];$/;"	m	struct:udb_radarray_d	typeref:struct:udb_radarray_d::udb_radsel_d
axfr_current_domain	include/query.h	/^	domain_type *axfr_current_domain;$/;"	m	struct:query
axfr_current_rr	include/query.h	/^	uint16_t     axfr_current_rr;$/;"	m	struct:query
axfr_current_rrset	include/query.h	/^	rrset_type  *axfr_current_rrset;$/;"	m	struct:query
axfr_is_done	include/query.h	/^	int          axfr_is_done;$/;"	m	struct:query
axfr_zone	include/query.h	/^	zone_type   *axfr_zone;$/;"	m	struct:query
b32_ntop	nsd/util.c	/^b32_ntop(uint8_t const *src, size_t srclength, char *target, size_t targsize)$/;"	f
b32_pton	nsd/util.c	/^b32_pton(const char *src, uint8_t *target, size_t tsize)$/;"	f
b64_initialize_rmap	compat/b64_pton.c	/^b64_initialize_rmap (void)$/;"	f	file:
b64_ntop	compat/b64_ntop.c	/^b64_ntop(uint8_t const *src, size_t srclength, char *target, size_t targsize) {$/;"	f
b64_pton	compat/b64_pton.c	/^b64_pton(char const *src, uint8_t *target, size_t targsize)$/;"	f
b64_pton_do	compat/b64_pton.c	/^b64_pton_do(char const *src, uint8_t *target, size_t targsize)$/;"	f	file:
b64_pton_len	compat/b64_pton.c	/^b64_pton_len(char const *src)$/;"	f	file:
b64rmap	compat/b64_pton.c	/^static uint8_t b64rmap[256];$/;"	v	file:
b64rmap_end	compat/b64_pton.c	/^static const uint8_t b64rmap_end = 0xfd;$/;"	v	file:
b64rmap_initialized	compat/b64_pton.c	/^static int b64rmap_initialized = 0;$/;"	v	file:
b64rmap_invalid	compat/b64_pton.c	/^static const uint8_t b64rmap_invalid = 0xff;$/;"	v	file:
b64rmap_space	compat/b64_pton.c	/^static const uint8_t b64rmap_space = 0xfe;$/;"	v	file:
b64rmap_special	compat/b64_pton.c	/^static const uint8_t b64rmap_special = 0xf0;$/;"	v	file:
bad_xfr_count	include/options.h	/^	int bad_xfr_count;$/;"	m	struct:acl_options
base	include/udb.h	/^	void* base;$/;"	m	struct:udb_base
base	include/udb.h	/^	void** base;$/;"	m	struct:udb_ptr
base_size	include/udb.h	/^	size_t base_size;$/;"	m	struct:udb_base
basename	compat/basename.c	/^basename (const char *name)$/;"	f
bitlabel	nsd/zlexer.c	631;"	d	file:
blocked	include/options.h	/^	uint8_t blocked;$/;"	m	struct:acl_options
booleq	nsd/options.c	709;"	d	file:
bstr_common	nsd/radtree.c	/^bstr_common(uint8_t* x, radstrlen_t xlen, uint8_t* y, radstrlen_t ylen)$/;"	f	file:
bstr_common_ext	nsd/radtree.c	/^bstr_common_ext(uint8_t* x, radstrlen_t xlen, uint8_t* y, radstrlen_t ylen)$/;"	f
bstr_is_prefix	nsd/radtree.c	/^bstr_is_prefix(uint8_t* p, radstrlen_t plen, uint8_t* x, radstrlen_t xlen)$/;"	f	file:
bstr_is_prefix_ext	nsd/radtree.c	/^bstr_is_prefix_ext(uint8_t* p, radstrlen_t plen, uint8_t* x, radstrlen_t xlen)$/;"	f
buffer	include/buffer.h	/^struct buffer$/;"	s
buffer_at	include/buffer.h	/^buffer_at(buffer_type *buffer, size_t at)$/;"	f
buffer_available	include/buffer.h	/^buffer_available(buffer_type *buffer, size_t count)$/;"	f
buffer_available_at	include/buffer.h	/^buffer_available_at(buffer_type *buffer, size_t at, size_t count)$/;"	f
buffer_begin	include/buffer.h	/^buffer_begin(buffer_type *buffer)$/;"	f
buffer_capacity	include/buffer.h	/^buffer_capacity(buffer_type *buffer)$/;"	f
buffer_cleanup	nsd/buffer.c	/^buffer_cleanup(void *arg)$/;"	f	file:
buffer_clear	nsd/buffer.c	/^buffer_clear(buffer_type *buffer)$/;"	f
buffer_create	nsd/buffer.c	/^buffer_create(region_type *region, size_t capacity)$/;"	f
buffer_create_from	nsd/buffer.c	/^buffer_create_from(buffer_type *buffer, void *data, size_t size)$/;"	f
buffer_current	include/buffer.h	/^buffer_current(buffer_type *buffer)$/;"	f
buffer_end	include/buffer.h	/^buffer_end(buffer_type *buffer)$/;"	f
buffer_flip	nsd/buffer.c	/^buffer_flip(buffer_type *buffer)$/;"	f
buffer_invariant	include/buffer.h	/^buffer_invariant(buffer_type *buffer)$/;"	f
buffer_limit	include/buffer.h	/^buffer_limit(buffer_type *buffer)$/;"	f
buffer_position	include/buffer.h	/^buffer_position(buffer_type *buffer)$/;"	f
buffer_printf	nsd/buffer.c	/^buffer_printf(buffer_type *buffer, const char *format, ...)$/;"	f
buffer_read	include/buffer.h	/^buffer_read(buffer_type *buffer, void *data, size_t count)$/;"	f
buffer_read_at	include/buffer.h	/^buffer_read_at(buffer_type *buffer, size_t at, void *data, size_t count)$/;"	f
buffer_read_u16	include/buffer.h	/^buffer_read_u16(buffer_type *buffer)$/;"	f
buffer_read_u16_at	include/buffer.h	/^buffer_read_u16_at(buffer_type *buffer, size_t at)$/;"	f
buffer_read_u32	include/buffer.h	/^buffer_read_u32(buffer_type *buffer)$/;"	f
buffer_read_u32_at	include/buffer.h	/^buffer_read_u32_at(buffer_type *buffer, size_t at)$/;"	f
buffer_read_u8	include/buffer.h	/^buffer_read_u8(buffer_type *buffer)$/;"	f
buffer_read_u8_at	include/buffer.h	/^buffer_read_u8_at(buffer_type *buffer, size_t at)$/;"	f
buffer_remaining	include/buffer.h	/^buffer_remaining(buffer_type *buffer)$/;"	f
buffer_remaining_at	include/buffer.h	/^buffer_remaining_at(buffer_type *buffer, size_t at)$/;"	f
buffer_reserve	nsd/buffer.c	/^buffer_reserve(buffer_type *buffer, size_t amount)$/;"	f
buffer_rewind	nsd/buffer.c	/^buffer_rewind(buffer_type *buffer)$/;"	f
buffer_set_capacity	nsd/buffer.c	/^buffer_set_capacity(buffer_type *buffer, size_t capacity)$/;"	f
buffer_set_limit	include/buffer.h	/^buffer_set_limit(buffer_type *buffer, size_t limit)$/;"	f
buffer_set_position	include/buffer.h	/^buffer_set_position(buffer_type *buffer, size_t mark)$/;"	f
buffer_skip	include/buffer.h	/^buffer_skip(buffer_type *buffer, ssize_t count)$/;"	f
buffer_type	include/buffer.h	/^typedef struct buffer buffer_type;$/;"	t	typeref:struct:buffer
buffer_write	include/buffer.h	/^buffer_write(buffer_type *buffer, const void *data, size_t count)$/;"	f
buffer_write_at	include/buffer.h	/^buffer_write_at(buffer_type *buffer, size_t at, const void *data, size_t count)$/;"	f
buffer_write_string	include/buffer.h	/^buffer_write_string(buffer_type *buffer, const char *str)$/;"	f
buffer_write_string_at	include/buffer.h	/^buffer_write_string_at(buffer_type *buffer, size_t at, const char *str)$/;"	f
buffer_write_u16	include/buffer.h	/^buffer_write_u16(buffer_type *buffer, uint16_t data)$/;"	f
buffer_write_u16_at	include/buffer.h	/^buffer_write_u16_at(buffer_type *buffer, size_t at, uint16_t data)$/;"	f
buffer_write_u32	include/buffer.h	/^buffer_write_u32(buffer_type *buffer, uint32_t data)$/;"	f
buffer_write_u32_at	include/buffer.h	/^buffer_write_u32_at(buffer_type *buffer, size_t at, uint32_t data)$/;"	f
buffer_write_u8	include/buffer.h	/^buffer_write_u8(buffer_type *buffer, uint8_t data)$/;"	f
buffer_write_u8_at	include/buffer.h	/^buffer_write_u8_at(buffer_type *buffer, size_t at, uint8_t data)$/;"	f
c_error	nsd/options.c	/^c_error(const char* str)$/;"	f
c_error_msg	nsd/options.c	/^c_error_msg(const char* fmt, ...)$/;"	f
c_error_va_list	nsd/options.c	/^c_error_va_list(const char* fmt, va_list args)$/;"	f
c_wrap	nsd/options.c	/^c_wrap()$/;"	f
cached_current_time	include/netio.h	/^	struct timespec cached_current_time;$/;"	m	struct:netio	typeref:struct:netio::timespec
calculate_rr_count	nsd/dbaccess.c	/^calculate_rr_count(udb_base* udb, udb_ptr* rrset)$/;"	f	file:
can_send_reload	include/xfrd.h	/^	uint8_t can_send_reload;$/;"	m	struct:xfrd_state
capacity	include/radtree.h	/^	uint16_t capacity;$/;"	m	struct:radnode
capacity	include/udbradtree.h	/^	uint16_t capacity;$/;"	m	struct:udb_radarray_d
capfd	include/mini_event.h	/^	int capfd;$/;"	m	struct:event_base
cfg_parser	nsd/options.c	/^config_parser_state_t* cfg_parser = 0;$/;"	v
change_child_ptr	nsd/rbtree.c	/^static void change_child_ptr(rbnode_t* child, rbnode_t* old, rbnode_t* new)$/;"	f	file:
change_parent_ptr	nsd/rbtree.c	/^static void change_parent_ptr(rbtree_t* rbtree, rbnode_t* parent, rbnode_t* old, rbnode_t* new)$/;"	f	file:
char_d2r	nsd/radtree.c	/^static uint8_t char_d2r(uint8_t c)$/;"	f	file:
char_r2d	nsd/radtree.c	/^static uint8_t char_r2d(uint8_t c)$/;"	f	file:
check_apex_soa	nsd/nsec3.c	/^check_apex_soa(namedb_type* namedb, zone_type *zone)$/;"	f	file:
check_dname	include/zonec.c	/^check_dname(zone_type* zone)$/;"	f	file:
check_dname	nsd/zonec.c	/^check_dname(zone_type* zone)$/;"	f	file:
check_for_bad_serial	nsd/difffile.c	/^check_for_bad_serial(namedb_type* db, const char* zone_str, uint32_t old_serial)$/;"	f	file:
child	include/ipc.h	/^	struct nsd_child *child;$/;"	m	struct:main_ipc_handler_data	typeref:struct:main_ipc_handler_data::nsd_child
child_num	include/ipc.h	/^	int		child_num;$/;"	m	struct:main_ipc_handler_data
chroot	include/options.h	/^	const char* chroot;$/;"	m	struct:config_parser_state
chroot	include/options.h	/^	const char* chroot;$/;"	m	struct:nsd_options
chrootdir	include/nsd.h	/^    const char      *chrootdir;$/;"	m	struct:nsd
chunk_count	nsd/region-allocator.c	/^	size_t        chunk_count;$/;"	m	struct:region	file:
chunk_fix_ptr_each	nsd/udb.c	/^chunk_fix_ptr_each(void* base, udb_rel_ptr* rp, void* arg)$/;"	f	file:
chunk_fix_ptrs	nsd/udb.c	/^chunk_fix_ptrs(void* base, udb_base* udb, udb_chunk_d* cp, udb_void data,$/;"	f	file:
chunk_from_dataptr	nsd/udb.c	/^chunk_from_dataptr(udb_void data)$/;"	f	file:
chunk_from_dataptr_ext	nsd/udb.c	/^udb_void chunk_from_dataptr_ext(udb_void data) {$/;"	f
chunk_get_last	nsd/udb.c	/^chunk_get_last(void* base, udb_void chunk, int exp)$/;"	f	file:
chunk_hash_ptr	nsd/udb.c	/^chunk_hash_ptr(udb_void p)$/;"	f	file:
chunk_set_last	nsd/udb.c	/^chunk_set_last(void* base, udb_void chunk, int exp, uint8_t value)$/;"	f	file:
chunk_size	nsd/region-allocator.c	/^	size_t        chunk_size;$/;"	m	struct:region	file:
clean_close	include/udb.h	/^	uint8_t clean_close;$/;"	m	struct:udb_glob_d
cleanup	nsd/region-allocator.c	/^struct cleanup$/;"	s	file:
cleanup_context	nsd/tsig-openssl.c	/^cleanup_context(void *data)$/;"	f	file:
cleanup_count	nsd/region-allocator.c	/^	size_t        cleanup_count;$/;"	m	struct:region	file:
cleanup_dname_compression_tables	nsd/fdns.c	/^cleanup_dname_compression_tables(void *ptr)$/;"	f	file:
cleanup_region	nsd/util.c	/^cleanup_region(void *data)$/;"	f
cleanup_type	nsd/region-allocator.c	/^typedef struct cleanup cleanup_type;$/;"	t	typeref:struct:cleanup	file:
cleanups	nsd/region-allocator.c	/^	cleanup_type *cleanups;$/;"	m	struct:region	file:
clear_bit	nsd/util.c	/^clear_bit(uint8_t bits[], size_t index)$/;"	f
close_notify_fds	nsd/xfrd-notify.c	/^close_notify_fds(rbtree_t* tree)$/;"	f
cmp	include/rbtree.h	/^	int (*cmp) (const void *, const void *);$/;"	m	struct:rbtree_t
cmp_dshash_tree	nsd/nsec3.c	/^cmp_dshash_tree(const void* x, const void* y)$/;"	f	file:
cmp_hash_tree	nsd/nsec3.c	/^cmp_hash_tree(const void* x, const void* y)$/;"	f	file:
cmp_nsec3_tree	nsd/nsec3.c	/^cmp_nsec3_tree(const void* x, const void* y)$/;"	f	file:
cmp_wchash_tree	nsd/nsec3.c	/^cmp_wchash_tree(const void* x, const void* y)$/;"	f	file:
cname_count	include/query.h	/^	int cname_count;$/;"	m	struct:query
coagulate_and_push	nsd/udb.c	/^coagulate_and_push(void* base, udb_alloc* alloc, udb_void last, int exp,$/;"	f	file:
coagulate_possible	nsd/udb.c	/^coagulate_possible(void* base, udb_alloc* alloc, udb_void f, int exp,$/;"	f	file:
color	include/rbtree.h	/^	uint8_t	    color;$/;"	m	struct:rbnode_t
comp_zonebucket	nsd/options.c	/^comp_zonebucket(const void* a, const void* b)$/;"	f	file:
compare_serial	nsd/util.c	/^compare_serial(uint32_t a, uint32_t b)$/;"	f
compressed_dname_count	include/query.h	/^	uint16_t     compressed_dname_count;$/;"	m	struct:query
compressed_dname_offsets	include/query.h	/^	uint16_t    *compressed_dname_offsets;$/;"	m	struct:query
compressed_dname_offsets	nsd/fdns.c	/^static uint16_t *compressed_dname_offsets = 0;$/;"	v	file:
compressed_dname_offsets_size	include/query.h	/^	size_t compressed_dname_offsets_size;$/;"	m	struct:query
compressed_dnames	include/query.h	/^	domain_type *compressed_dnames[MAXRRSPP];$/;"	m	struct:query
compression_table_capacity	nsd/fdns.c	/^static uint32_t compression_table_capacity = 0;$/;"	v	file:
compression_table_size	nsd/fdns.c	/^static uint32_t compression_table_size = 0;$/;"	v	file:
compute_crc	nsd/util.c	/^compute_crc(uint32_t crc, uint8_t* data, size_t len)$/;"	f
config_apply_pattern	nsd/options.c	/^config_apply_pattern(const char* name)$/;"	f
config_end_include	nsd/configlexer.c	/^static void config_end_include(void)$/;"	f	file:
config_include_stack_ptr	nsd/configlexer.c	/^static int config_include_stack_ptr = 0;$/;"	v	file:
config_make_zonefile	nsd/options.c	/^config_make_zonefile(zone_options_t* zone, struct nsd* nsd)$/;"	f
config_parser_state	include/options.h	/^struct config_parser_state {$/;"	s
config_parser_state_t	include/options.h	/^typedef struct config_parser_state config_parser_state_t;$/;"	t	typeref:struct:config_parser_state
config_start_include	nsd/configlexer.c	/^static void config_start_include(const char* filename)$/;"	f	file:
configfile	include/options.h	/^	char* configfile;$/;"	m	struct:nsd_options
conn	include/ipc.h	/^	struct xfrd_tcp	*conn;$/;"	m	struct:ipc_handler_conn_data	typeref:struct:ipc_handler_conn_data::xfrd_tcp
conn_read	nsd/xfrd-tcp.c	/^conn_read(xfrd_tcp_t* tcp)$/;"	f
conn_write	nsd/xfrd-tcp.c	/^int conn_write(xfrd_tcp_t* tcp)$/;"	f
connection_established	include/xfrd-tcp.h	/^	int connection_established;$/;"	m	struct:xfrd_tcp_pipeline
content	include/mini_event.h	/^		content;$/;"	m	struct:event_base
content_list	include/udb.h	/^	udb_rel_ptr content_list;$/;"	m	struct:udb_glob_d
context	include/tsig.h	/^	void                *context;$/;"	m	struct:tsig_record
context_region	include/tsig.h	/^	region_type	 *context_region;$/;"	m	struct:tsig_record
control_cert_file	include/options.h	/^	char* control_cert_file;$/;"	m	struct:nsd_options
control_enable	include/options.h	/^	int control_enable;$/;"	m	struct:nsd_options
control_interface	include/options.h	/^	ip_address_option_t* control_interface;$/;"	m	struct:nsd_options
control_key_file	include/options.h	/^	char* control_key_file;$/;"	m	struct:nsd_options
control_port	include/options.h	/^	int control_port;$/;"	m	struct:nsd_options
copy_acl	nsd/options.c	/^copy_acl(region_type* region, acl_options_t* a)$/;"	f	file:
copy_acl_list	nsd/options.c	/^copy_acl_list(nsd_options_t* opt, acl_options_t* a)$/;"	f	file:
copy_buf_to_pkt	ipv4.c	/^copy_buf_to_pkt(void *buf, unsigned len, struct rte_mbuf *pkt, unsigned offset)$/;"	f	file:
copy_buf_to_pkt_segs	ipv4.c	/^copy_buf_to_pkt_segs(void *buf, unsigned len, struct rte_mbuf *pkt,$/;"	f	file:
copy_changed_acl	nsd/options.c	/^copy_changed_acl(nsd_options_t* opt, acl_options_t** orig,$/;"	f	file:
copy_pat_fixed	nsd/options.c	/^copy_pat_fixed(region_type* region, pattern_options_t* orig,$/;"	f	file:
count	include/radtree.h	/^	size_t count;$/;"	m	struct:radtree
count	include/rbtree.h	/^	size_t       count;$/;"	m	struct:rbtree_t
count	include/udbradtree.h	/^	uint64_t count;$/;"	m	struct:udb_radtree_d
cpy_d2r	nsd/radtree.c	/^static void cpy_d2r(uint8_t* to, const uint8_t* from, int len)$/;"	f	file:
cpy_r2d	nsd/radtree.c	/^static void cpy_r2d(uint8_t* to, uint8_t* from, uint8_t len)$/;"	f	file:
crctab	nsd/util.c	/^static u_long crctab[] = {$/;"	v	file:
create_context	nsd/tsig-openssl.c	/^create_context(region_type *region)$/;"	f	file:
create_dirs	nsd/dbcreate.c	/^create_dirs(const char* path)$/;"	f
create_path_components	nsd/dbcreate.c	/^create_path_components(const char* path, int* notexist)$/;"	f	file:
create_pretty_rr	nsd/util.c	/^create_pretty_rr(struct region* region)$/;"	f
current_allow_notify	include/options.h	/^	acl_options_t* current_allow_notify;$/;"	m	struct:config_parser_state
current_ip_address_option	include/options.h	/^	ip_address_option_t* current_ip_address_option;$/;"	m	struct:config_parser_state
current_key	include/options.h	/^	key_options_t* current_key;$/;"	m	struct:config_parser_state
current_log_file	nsd/util.c	/^static FILE *current_log_file = NULL;$/;"	v	file:
current_log_function	nsd/util.c	/^static log_function_type *current_log_function = log_file;$/;"	v	file:
current_notify	include/options.h	/^	acl_options_t* current_notify;$/;"	m	struct:config_parser_state
current_outgoing_interface	include/options.h	/^	acl_options_t* current_outgoing_interface;$/;"	m	struct:config_parser_state
current_pattern	include/options.h	/^	pattern_options_t* current_pattern;$/;"	m	struct:config_parser_state
current_provide_xfr	include/options.h	/^	acl_options_t* current_provide_xfr;$/;"	m	struct:config_parser_state
current_request_xfr	include/options.h	/^	acl_options_t* current_request_xfr;$/;"	m	struct:config_parser_state
current_rr	include/zonec.h	/^	rr_type current_rr;$/;"	m	struct:zparser
current_soa	include/xfrd-notify.h	/^	struct xfrd_soa *current_soa; \/* current SOA in NSD *\/$/;"	m	struct:notify_zone_t	typeref:struct:notify_zone_t::xfrd_soa
current_time	include/xfrd.h	/^	time_t current_time;$/;"	m	struct:xfrd_state
current_zone	include/options.h	/^	zone_options_t* current_zone;$/;"	m	struct:config_parser_state
current_zone	include/zonec.h	/^	zone_type *current_zone;$/;"	m	struct:zparser
data	include/namedb.h	/^	uint16_t*    data;$/;"	m	union:rdata_atom
data	include/tsig.h	/^	const void *data;$/;"	m	struct:tsig_algorithm
data	include/tsig.h	/^	uint8_t		 *data;$/;"	m	struct:tsig_key
data	include/udb.h	/^	udb_void data;$/;"	m	struct:udb_rel_ptr
data	include/udb.h	/^	uint64_t data;$/;"	m	struct:udb_ptr
data	include/udb.h	/^	uint8_t data[0];$/;"	m	struct:udb_chunk_d
data	include/udb.h	/^	uint8_t data[0];$/;"	m	struct:udb_xl_chunk_d
data	include/zparser.h	/^	struct lex_data	  data;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::lex_data
data	nsd/region-allocator.c	/^	char         *data;$/;"	m	struct:region	file:
data	nsd/region-allocator.c	/^	void *data;$/;"	m	struct:cleanup	file:
data	nsd/zparser.c	/^	struct lex_data	  data;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::lex_data	file:
database	include/options.h	/^	const char* database;$/;"	m	struct:nsd_options
db	include/nsd.h	/^    struct namedb *db;$/;"	m	struct:nsd	typeref:struct:nsd::namedb
db	include/zonec.h	/^	namedb_type *db;$/;"	m	struct:zparser
dbfile	include/nsd.h	/^    const char *dbfile;$/;"	m	struct:nsd
deallocated	include/netio.h	/^	netio_handler_list_type *deallocated;$/;"	m	struct:netio
deallocator	nsd/region-allocator.c	/^	void          (*deallocator)(void *);$/;"	m	struct:region	file:
debug_find_rr_num	nsd/difffile.c	/^debug_find_rr_num(rrset_type* rrset, uint16_t type, uint16_t klass,$/;"	f	file:
debug_mode	include/options.h	/^	int debug_mode;$/;"	m	struct:nsd_options
default_additional_rr_types	nsd/query.c	/^struct additional_rr_types default_additional_rr_types[] = {$/;"	v	typeref:struct:additional_rr_types
default_apex	include/zonec.h	/^	domain_type *default_apex;$/;"	m	struct:zparser
default_class	include/zonec.h	/^	uint16_t default_class;$/;"	m	struct:zparser
default_ttl	include/zonec.h	/^	uint32_t default_ttl;$/;"	m	struct:zparser
delbucket	nsd/options.c	/^delbucket(region_type* region, struct zonelist_bucket* b)$/;"	f	file:
delegation_domain	include/query.h	/^	domain_type *delegation_domain;$/;"	m	struct:query
delegation_rrset	include/query.h	/^	rrset_type *delegation_rrset;$/;"	m	struct:query
delete_RR	nsd/difffile.c	/^delete_RR(namedb_type* db, const dname_type* dname,$/;"	f
delete_zone_rrs	nsd/difffile.c	/^delete_zone_rrs(namedb_type* db, zone_type* zone)$/;"	f
detect_nsec3_params	nsd/nsec3.c	/^detect_nsec3_params(rr_type* nsec3_apex,$/;"	f	file:
diff_pos	include/namedb.h	/^	off_t		  diff_pos;$/;"	m	struct:namedb
diff_read_32	nsd/difffile.c	/^diff_read_32(FILE *in, uint32_t* result)$/;"	f
diff_read_64	nsd/difffile.c	/^diff_read_64(FILE *in, uint64_t* result)$/;"	f
diff_read_8	nsd/difffile.c	/^diff_read_8(FILE *in, uint8_t* result)$/;"	f
diff_read_str	nsd/difffile.c	/^diff_read_str(FILE* in, char* buf, size_t len)$/;"	f
diff_skip	include/namedb.h	/^	uint8_t		  diff_skip;$/;"	m	struct:namedb
diff_timestamp	include/namedb.h	/^	struct timeval	  diff_timestamp;$/;"	m	struct:namedb	typeref:struct:namedb::timeval
dirty_alloc	include/udb.h	/^	uint8_t dirty_alloc;$/;"	m	struct:udb_glob_d
disk	include/udb.h	/^	udb_alloc_d* disk;$/;"	m	struct:udb_alloc
dispatch_next	include/netio.h	/^	netio_handler_list_type *dispatch_next;$/;"	m	struct:netio
dlv_warn	nsd/zparser.c	/^static int dlv_warn = 1;$/;"	v	file:
dname	include/dname.h	/^struct dname$/;"	s
dname	include/namedb.h	/^	const dname_type* dname;$/;"	m	struct:domain
dname	include/zparser.h	/^	const dname_type *dname;$/;"	m	union:YYSTYPE
dname	nsd/zparser.c	/^	const dname_type *dname;$/;"	m	union:YYSTYPE	file:
dname_compare	nsd/dname.c	/^dname_compare(const dname_type *left, const dname_type *right)$/;"	f
dname_concatenate	nsd/dname.c	/^dname_concatenate(region_type *region,$/;"	f
dname_copy	nsd/dname.c	/^dname_copy(region_type *region, const dname_type *dname)$/;"	f
dname_equal_nocase	nsd/dname.c	/^int dname_equal_nocase(uint8_t* a, uint8_t* b, uint16_t len)$/;"	f
dname_is_subdomain	nsd/dname.c	/^dname_is_subdomain(const dname_type *left, const dname_type *right)$/;"	f
dname_label	include/dname.h	/^dname_label(const dname_type *dname, uint8_t label)$/;"	f
dname_label_match_count	nsd/dname.c	/^dname_label_match_count(const dname_type *left, const dname_type *right)$/;"	f
dname_label_offsets	include/dname.h	/^dname_label_offsets(const dname_type *dname)$/;"	f
dname_make	nsd/dname.c	/^dname_make(region_type *region, const uint8_t *name, int normalize)$/;"	f
dname_make_from_label	nsd/dname.c	/^dname_make_from_label(region_type *region,$/;"	f
dname_make_from_packet	nsd/dname.c	/^dname_make_from_packet(region_type *region, buffer_type *packet,$/;"	f
dname_make_wire_from_packet	nsd/dname.c	/^dname_make_wire_from_packet(uint8_t *buf, buffer_type *packet,$/;"	f
dname_name	include/dname.h	/^dname_name(const dname_type *dname)$/;"	f
dname_origin	nsd/dname.c	/^dname_origin(region_type *region, const dname_type *dname)$/;"	f
dname_parse	nsd/dname.c	/^dname_parse(region_type *region, const char *name)$/;"	f
dname_parse_wire	nsd/dname.c	/^int dname_parse_wire(uint8_t* dname, const char* name)$/;"	f
dname_partial_copy	nsd/dname.c	/^dname_partial_copy(region_type *region, const dname_type *dname, uint8_t label_count)$/;"	f
dname_replace	nsd/dname.c	/^dname_replace(region_type* region,$/;"	f
dname_to_string	nsd/dname.c	/^dname_to_string(const dname_type *dname, const dname_type *origin)$/;"	f
dname_total_size	include/dname.h	/^dname_total_size(const dname_type *dname)$/;"	f
dname_type	include/dname.h	/^typedef struct dname dname_type;$/;"	t	typeref:struct:dname
dns_algorithms	nsd/rdata.c	/^lookup_table_type dns_algorithms[] = {$/;"	v
dns_certificate_types	nsd/rdata.c	/^lookup_table_type dns_certificate_types[] = {$/;"	v
dns_rrclasses	nsd/dns.c	/^static lookup_table_type dns_rrclasses[] = {$/;"	v	file:
dnssec_ok	include/edns.h	/^	int              dnssec_ok;$/;"	m	struct:edns_record
do_deldomain	nsd/namedb.c	/^do_deldomain(namedb_type* db, domain_type* domain)$/;"	f	file:
do_ip4	include/options.h	/^	int do_ip4;$/;"	m	struct:nsd_options
do_ip6	include/options.h	/^	int do_ip6;$/;"	m	struct:nsd_options
domain	include/namedb.h	/^	domain_type* domain;$/;"	m	union:rdata_atom
domain	include/namedb.h	/^struct domain$/;"	s
domain	include/zparser.h	/^	domain_type	 *domain;$/;"	m	union:YYSTYPE
domain	nsd/zparser.c	/^	domain_type	 *domain;$/;"	m	union:YYSTYPE	file:
domain_add_rrset	nsd/namedb.c	/^domain_add_rrset(domain_type* domain, rrset_type* rrset)$/;"	f
domain_can_be_deleted	nsd/namedb.c	/^domain_can_be_deleted(domain_type* domain)$/;"	f	file:
domain_clear	nsd/udbzone.c	/^domain_clear(udb_base* udb, udb_ptr* d)$/;"	f	file:
domain_create	nsd/udbzone.c	/^domain_create(udb_base* udb, udb_ptr* zone, const uint8_t* nm, size_t nmlen,$/;"	f	file:
domain_d	include/udbzone.h	/^struct domain_d {$/;"	s
domain_delete	nsd/udbzone.c	/^domain_delete(udb_base* udb, udb_ptr* d)$/;"	f	file:
domain_delete_unlink	nsd/udbzone.c	/^domain_delete_unlink(udb_base* udb, udb_ptr* z, udb_ptr* d)$/;"	f	file:
domain_dname	include/namedb.h	/^domain_dname(domain_type* domain)$/;"	f
domain_find_any_rrset	nsd/namedb.c	/^domain_find_any_rrset(domain_type* domain, zone_type* zone)$/;"	f
domain_find_non_cname_rrset	nsd/namedb.c	/^domain_find_non_cname_rrset(domain_type* domain, zone_type* zone)$/;"	f
domain_find_ns_rrsets	nsd/namedb.c	/^domain_find_ns_rrsets(domain_type* domain, zone_type* zone, rrset_type **ns)$/;"	f
domain_find_or_create	nsd/udbzone.c	/^domain_find_or_create(udb_base* udb, udb_ptr* zone, const uint8_t* nm,$/;"	f	file:
domain_find_parent_zone	nsd/namedb.c	/^domain_find_parent_zone(zone_type* zone)$/;"	f
domain_find_rrset	nsd/namedb.c	/^domain_find_rrset(domain_type* domain, zone_type* zone, uint16_t type)$/;"	f
domain_find_rrset_any	include/zonec.c	/^domain_find_rrset_any(domain_type *domain, uint16_t type)$/;"	f	file:
domain_find_rrset_any	nsd/zonec.c	/^domain_find_rrset_any(domain_type *domain, uint16_t type)$/;"	f	file:
domain_find_zone	nsd/namedb.c	/^domain_find_zone(domain_type* domain)$/;"	f
domain_has_only_NSEC3	nsd/nsec3.c	/^domain_has_only_NSEC3(struct domain* domain, struct zone* zone)$/;"	f
domain_is_glue	nsd/namedb.c	/^domain_is_glue(domain_type* domain, zone_type* zone)$/;"	f
domain_is_prehash	nsd/namedb.c	/^int domain_is_prehash(domain_table_type* table, domain_type* domain)$/;"	f
domain_is_subdomain	include/namedb.h	/^static inline int domain_is_subdomain(domain_type* d1, domain_type* d2)$/;"	f
domain_next	include/namedb.h	/^domain_next(domain_type* domain)$/;"	f
domain_previous	include/namedb.h	/^domain_previous(domain_type* domain)$/;"	f
domain_remove_rrset	nsd/udbzone.c	/^domain_remove_rrset(udb_base* udb, udb_ptr* domain, uint16_t t)$/;"	f	file:
domain_table	include/namedb.h	/^struct domain_table$/;"	s
domain_table_count	include/namedb.h	/^domain_table_count(domain_table_type* table)$/;"	f
domain_table_create	nsd/namedb.c	/^domain_table_create(region_type* region)$/;"	f
domain_table_deldomain	nsd/namedb.c	/^domain_table_deldomain(namedb_type* db, domain_type* domain)$/;"	f
domain_table_find	nsd/namedb.c	/^domain_table_find(domain_table_type* table,$/;"	f
domain_table_insert	nsd/namedb.c	/^domain_table_insert(domain_table_type* table,$/;"	f
domain_table_iterate	nsd/namedb.c	/^domain_table_iterate(domain_table_type* table,$/;"	f
domain_table_iterator_type	include/namedb.h	/^typedef int (*domain_table_iterator_type)(domain_type *node,$/;"	t
domain_table_search	nsd/namedb.c	/^domain_table_search(domain_table_type *table,$/;"	f
domain_table_type	include/namedb.h	/^typedef struct domain_table domain_table_type;$/;"	t	typeref:struct:domain_table
domain_to_string	include/namedb.h	/^static inline const char* domain_to_string(domain_type* domain)$/;"	f
domain_type	include/namedb.h	/^typedef struct domain domain_type;$/;"	t	typeref:struct:domain
domain_wildcard_child	nsd/namedb.c	/^domain_wildcard_child(domain_type* domain)$/;"	f
domains	include/answer.h	/^	domain_type *domains[MAXRRSPP];$/;"	m	struct:answer
domains	include/namedb.h	/^	domain_table_type* domains;$/;"	m	struct:namedb
domains	include/udbzone.h	/^	udb_rel_ptr domains;$/;"	m	struct:zone_d
driver1	nsd/lookup3.c	/^void driver1()$/;"	f
driver2	nsd/lookup3.c	/^void driver2()$/;"	f
driver3	nsd/lookup3.c	/^void driver3()$/;"	f
driver4	nsd/lookup3.c	/^ void driver4()$/;"	f
dshash_node	include/namedb.h	/^	rbnode_t dshash_node;$/;"	m	struct:nsec3_domain_data
dshashtree	include/namedb.h	/^	rbtree_t* dshashtree; \/* tree, ds-parent-hash domains *\/$/;"	m	struct:zone
edns	include/query.h	/^	edns_record_type edns;$/;"	m	struct:query
edns_data	include/edns.h	/^struct edns_data$/;"	s
edns_data_type	include/edns.h	/^typedef struct edns_data edns_data_type;$/;"	t	typeref:struct:edns_data
edns_init_data	nsd/edns.c	/^edns_init_data(edns_data_type *data, uint16_t max_length)$/;"	f
edns_init_nsid	nsd/edns.c	/^edns_init_nsid(edns_data_type *data, uint16_t nsid_len)$/;"	f
edns_init_record	nsd/edns.c	/^edns_init_record(edns_record_type *edns)$/;"	f
edns_ipv4	include/nsd.h	/^    edns_data_type edns_ipv4;$/;"	m	struct:nsd
edns_parse_record	nsd/edns.c	/^edns_parse_record(edns_record_type *edns, buffer_type *packet)$/;"	f
edns_record	include/edns.h	/^struct edns_record$/;"	s
edns_record_type	include/edns.h	/^typedef struct edns_record edns_record_type;$/;"	t	typeref:struct:edns_record
edns_reserved_space	nsd/edns.c	/^edns_reserved_space(edns_record_type *edns)$/;"	f
edns_status	include/edns.h	/^enum edns_status$/;"	g
edns_status_type	include/edns.h	/^typedef enum edns_status edns_status_type;$/;"	t	typeref:enum:edns_status
elem	include/radtree.h	/^	void* elem;$/;"	m	struct:radnode
elem	include/udbradtree.h	/^	struct udb_rel_ptr elem;$/;"	m	struct:udb_radnode_d	typeref:struct:udb_radnode_d::udb_rel_ptr
email	include/xfrd.h	/^	uint8_t email[MAXDOMAINLEN + 2];$/;"	m	struct:xfrd_soa
encode_answer	nsd/answer.c	/^encode_answer(query_type *q, const answer_type *answer)$/;"	f
encode_dname	nsd/packet.c	/^encode_dname(query_type *q, domain_type *domain)$/;"	f	file:
enough_free	nsd/udb.c	/^enough_free(udb_alloc* alloc)$/;"	f	file:
err	include/options.h	/^	void (*err)(void*,const char*);$/;"	m	struct:config_parser_state
err_arg	include/options.h	/^	void* err_arg;$/;"	m	struct:config_parser_state
error	include/edns.h	/^	char error[OPT_LEN];$/;"	m	struct:edns_data
error_code	include/tsig.h	/^	uint16_t          error_code;$/;"	m	struct:tsig_record
error_dname	include/zonec.c	/^const dname_type *error_dname;$/;"	v
error_dname	nsd/zonec.c	/^const dname_type *error_dname;$/;"	v
error_domain	include/zonec.c	/^domain_type *error_domain;$/;"	v
error_domain	nsd/zonec.c	/^domain_type *error_domain;$/;"	v
error_occurred	include/zonec.h	/^	int error_occurred;$/;"	m	struct:zparser
error_va_list	nsd/zparser.c	/^error_va_list(unsigned line, const char *fmt, va_list args)$/;"	f	file:
errors	include/options.h	/^	int errors;$/;"	m	struct:config_parser_state
errors	include/zonec.h	/^	unsigned int errors;$/;"	m	struct:zparser
ev_arg	include/mini_event.h	/^	void *ev_arg;$/;"	m	struct:event
ev_base	include/mini_event.h	/^	struct event_base *ev_base;$/;"	m	struct:event	typeref:struct:event::event_base
ev_callback	include/mini_event.h	/^	void (*ev_callback)(int, short, void *arg);$/;"	m	struct:event
ev_fd	include/mini_event.h	/^	int ev_fd;$/;"	m	struct:event
ev_flags	include/mini_event.h	/^	short ev_flags;$/;"	m	struct:event
ev_timeout	include/mini_event.h	/^	struct timeval ev_timeout;$/;"	m	struct:event	typeref:struct:event::timeval
event	include/mini_event.h	/^struct event {$/;"	s
event_added	include/xfrd.h	/^	int event_added;$/;"	m	struct:xfrd_zone
event_base	include/mini_event.h	/^struct event_base$/;"	s
event_base	include/xfrd.h	/^	struct event_base* event_base;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::event_base
event_handler	include/netio.h	/^	netio_event_handler_type event_handler;$/;"	m	struct:netio_handler
event_types	include/netio.h	/^	netio_event_types_type event_types;$/;"	m	struct:netio_handler
evtimer_add	include/mini_event.h	164;"	d
evtimer_del	include/mini_event.h	166;"	d
exp	include/udb.h	/^	uint8_t exp;$/;"	m	struct:udb_chunk_d
exp	include/udb.h	/^	uint8_t exp;$/;"	m	struct:udb_free_chunk_d
exp	include/udb.h	/^	uint8_t exp;$/;"	m	struct:udb_xl_chunk_d
expire	include/xfrd.h	/^	uint32_t expire;$/;"	m	struct:xfrd_soa
expired	include/udbzone.h	/^	uint8_t expired;$/;"	m	struct:zone_d
fd	include/netio.h	/^	int fd;$/;"	m	struct:netio_handler
fd	include/udb.h	/^	int fd;$/;"	m	struct:udb_base
fd	include/xfrd-tcp.h	/^	int fd;$/;"	m	struct:xfrd_tcp
fdns_init	nsd/fdns.c	/^int fdns_init() {$/;"	f
fdns_prepare	nsd/fdns.c	/^int fdns_prepare(struct nsd *nsd) {$/;"	f
fdns_process	nsd/fdns.c	/^query_type * fdns_process(struct rte_mbuf *pkt , int offset, int received) {$/;"	f
fdns_slave	nsd/fdns.c	/^int fdns_slave(unsigned lcore_id) {$/;"	f
fds	include/mini_event.h	/^	struct event** fds;$/;"	m	struct:event_base	typeref:struct:event_base::event
file_get_mtime	nsd/dbaccess.c	/^file_get_mtime(const char* file, time_t* mtime, int* nonexist)$/;"	f	file:
filename	include/options.h	/^	const char* filename;$/;"	m	struct:config_parser_state
filename	include/zonec.h	/^	const char *filename;$/;"	m	struct:zparser
filename	nsd/configlexer.c	/^	const char* filename;$/;"	m	struct:inc_state	file:
final	nsd/lookup3.c	188;"	d	file:
final	nsd/tsig-openssl.c	/^final(void *context, uint8_t *digest, size_t *size)$/;"	f	file:
find_covering_nsec	nsd/query.c	/^find_covering_nsec(domain_type *closest_match,$/;"	f
find_or_create_zone	nsd/difffile.c	/^find_or_create_zone(namedb_type* db, const dname_type* zone_name,$/;"	f	file:
find_rr_num	nsd/difffile.c	/^find_rr_num(rrset_type* rrset, uint16_t type, uint16_t klass,$/;"	f	file:
find_same_master_notify	nsd/xfrd.c	/^find_same_master_notify(xfrd_zone_t* zone, int acl_num_nfy)$/;"	f	file:
flags	include/udb.h	/^	uint8_t flags;$/;"	m	struct:udb_chunk_d
flags	include/udb.h	/^	uint8_t flags;$/;"	m	struct:udb_free_chunk_d
flags	include/udb.h	/^	uint8_t flags;$/;"	m	struct:udb_xl_chunk_d
flex_int16_t	nsd/configlexer.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	nsd/configlexer.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int16_t	nsd/zlexer.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	nsd/zlexer.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	nsd/configlexer.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	nsd/configlexer.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int32_t	nsd/zlexer.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	nsd/zlexer.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	nsd/configlexer.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	nsd/configlexer.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_int8_t	nsd/zlexer.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	nsd/zlexer.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	nsd/configlexer.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	nsd/configlexer.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint16_t	nsd/zlexer.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	nsd/zlexer.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	nsd/configlexer.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	nsd/configlexer.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint32_t	nsd/zlexer.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	nsd/zlexer.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	nsd/configlexer.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	nsd/configlexer.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flex_uint8_t	nsd/zlexer.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	nsd/zlexer.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
fname	include/udb.h	/^	char* fname;$/;"	m	struct:udb_base
forward_mode	include/ipc.h	/^	int		forward_mode;$/;"	m	struct:main_ipc_handler_data
free	include/udb.h	/^	udb_void free[UDB_ALLOC_CHUNKS_MAX-UDB_ALLOC_CHUNK_MINEXP+1];$/;"	m	struct:udb_alloc_d
free_xl_space	nsd/udb.c	/^free_xl_space(void* base, udb_alloc* alloc, udb_void s, uint64_t m)$/;"	f	file:
freeaddrinfo	compat/fake-rfc2553.c	/^freeaddrinfo(struct addrinfo *ai)$/;"	f
freeaddrinfo	compat/fake-rfc2553.h	170;"	d
fresh_xfr_timeout	include/xfrd.h	/^	int fresh_xfr_timeout;$/;"	m	struct:xfrd_zone
fsck_file	nsd/udb.c	/^fsck_file(udb_base* udb, udb_alloc* alloc, int moved)$/;"	f	file:
fsck_fsize	nsd/udb.c	/^fsck_fsize(udb_base* udb, udb_alloc* alloc)$/;"	f	file:
fsck_rb	nsd/udb.c	/^fsck_rb(void* base, udb_void rb_old, udb_void rb_new, uint64_t rb_size,$/;"	f	file:
fsck_rb_xl	nsd/udb.c	/^fsck_rb_xl(void* base, udb_base* udb, udb_void rb_old, udb_void rb_new,$/;"	f	file:
fseeko	include/config.h	699;"	d
fsize	include/udb.h	/^	uint64_t fsize;$/;"	m	struct:udb_glob_d
ftello	include/config.h	700;"	d
full_months	compat/strptime.c	/^static const char *full_months[] = {$/;"	v	file:
full_weekdays	compat/strptime.c	/^static const char *full_weekdays[] = {$/;"	v	file:
gai_strerror	compat/fake-rfc2553.c	/^gai_strerror(int err)$/;"	f
gai_strerror	compat/fake-rfc2553.h	165;"	d
generate_packet_burst	ipv4.c	/^generate_packet_burst(struct rte_mempool *mp, struct rte_mbuf **pkts_burst,$/;"	f
get_bit	nsd/util.c	/^get_bit(uint8_t bits[], size_t index)$/;"	f
get_char	nsd/options.c	/^get_char(const char* str, size_t i)$/;"	f	file:
get_end_label	nsd/options.c	/^get_end_label(zone_options_t* zone, int i)$/;"	f	file:
get_negsign	compat/snprintf.c	/^get_negsign(int negative, int plus, int space)$/;"	f	file:
getaddrinfo	compat/fake-rfc2553.c	/^getaddrinfo(const char *hostname, const char *servname, $/;"	f
getaddrinfo	compat/fake-rfc2553.h	157;"	d
getaddrinfo	compat/fake-rfc2553.h	159;"	d
getnameinfo	compat/fake-rfc2553.c	/^int getnameinfo(const struct sockaddr *sa, size_t ATTR_UNUSED(salen), char *host, $/;"	f
getnameinfo	compat/fake-rfc2553.h	175;"	d
glob_data	include/udb.h	/^	udb_glob_d* glob_data;$/;"	m	struct:udb_base
global_ident	nsd/util.c	/^static const char *global_ident = NULL;$/;"	v	file:
got_bytes	include/ipc.h	/^	size_t		got_bytes;$/;"	m	struct:main_ipc_handler_data
got_time	include/xfrd.h	/^	uint8_t got_time;$/;"	m	struct:xfrd_state
grow_align	nsd/udb.c	/^grow_align(void* base, udb_alloc* alloc, uint64_t esz)$/;"	f	file:
grow_chunks	nsd/udb.c	/^grow_chunks(void* base, udb_alloc* alloc, size_t sz, int exp)$/;"	f	file:
grow_end_calc	nsd/udb.c	/^grow_end_calc(udb_alloc* alloc, int exp)$/;"	f	file:
grow_extra_check	nsd/udb.c	/^grow_extra_check(udb_alloc* alloc, uint64_t ge)$/;"	f	file:
grow_ram_hash	nsd/udb.c	/^grow_ram_hash(udb_base* udb, udb_ptr** newhash)$/;"	f	file:
grow_xl	nsd/udb.c	/^grow_xl(void* base, udb_alloc* alloc, uint64_t xlsz, uint64_t sz)$/;"	f	file:
handler	include/netio.h	/^	netio_handler_type      *handler;$/;"	m	struct:netio_handler_list
handler	include/xfrd-tcp.h	/^	struct event handler;$/;"	m	struct:xfrd_tcp_pipeline	typeref:struct:xfrd_tcp_pipeline::event
handler_added	include/xfrd-tcp.h	/^	int handler_added;$/;"	m	struct:xfrd_tcp_pipeline
handlers	include/netio.h	/^	netio_handler_list_type *handlers;$/;"	m	struct:netio
has_data_below	nsd/difffile.c	/^has_data_below(domain_type* top)$/;"	f	file:
has_soa	include/zonec.c	/^has_soa(domain_type* domain)$/;"	f	file:
has_soa	nsd/zonec.c	/^has_soa(domain_type* domain)$/;"	f	file:
hash_node	include/namedb.h	/^	rbnode_t hash_node;$/;"	m	struct:nsec3_domain_data
hash_set_raninit	nsd/lookup3.c	/^hash_set_raninit(uint32_t v)$/;"	f
hash_tree_clear	nsd/namedb.c	/^hash_tree_clear(rbtree_t* tree)$/;"	f
hash_tree_delete	nsd/namedb.c	/^void hash_tree_delete(region_type* region, rbtree_t* tree)$/;"	f
hashlittle	nsd/lookup3.c	/^uint32_t hashlittle( const void *key, size_t length, uint32_t initval)$/;"	f
hashlittle2	nsd/lookup3.c	/^void hashlittle2( $/;"	f
hashmask	nsd/lookup3.c	106;"	d	file:
hashsize	nsd/lookup3.c	105;"	d	file:
hashtree	include/namedb.h	/^	rbtree_t* hashtree; \/* tree, hashed NSEC3precompiled domains *\/$/;"	m	struct:zone
hashword	nsd/lookup3.c	/^uint32_t hashword($/;"	f
hashword2	nsd/lookup3.c	/^void hashword2 ($/;"	f
have_current_time	include/netio.h	/^	int have_current_time;$/;"	m	struct:netio
have_free_for	nsd/udb.c	/^have_free_for(udb_alloc* alloc, int exp)$/;"	f	file:
have_nsec3_ds_parent_hash	include/namedb.h	/^	unsigned  have_nsec3_ds_parent_hash : 1;$/;"	m	struct:nsec3_domain_data
have_nsec3_hash	include/namedb.h	/^	unsigned  have_nsec3_hash : 1;$/;"	m	struct:nsec3_domain_data
have_nsec3_wc_hash	include/namedb.h	/^	unsigned  have_nsec3_wc_hash : 1;$/;"	m	struct:nsec3_domain_data
hex_ntop	nsd/util.c	/^hex_ntop(uint8_t const *src, size_t srclength, char *target, size_t targsize)$/;"	f
hex_pton	nsd/util.c	/^hex_pton(const char* src, uint8_t* target, size_t targsize)$/;"	f
hex_to_string	nsd/rdata.c	/^hex_to_string(buffer_type *output, const uint8_t *data, size_t size)$/;"	f	file:
hexdigit_to_int	nsd/util.c	/^hexdigit_to_int(char ch)$/;"	f
hide_version	include/options.h	/^	int hide_version;$/;"	m	struct:nsd_options
hmac_create_context	include/tsig.h	/^	void *(*hmac_create_context)(region_type *region);$/;"	m	struct:tsig_algorithm
hmac_final	include/tsig.h	/^	void  (*hmac_final)(void *context, uint8_t *digest, size_t *size);$/;"	m	struct:tsig_algorithm
hmac_init_context	include/tsig.h	/^	void  (*hmac_init_context)(void *context,$/;"	m	struct:tsig_algorithm
hmac_update	include/tsig.h	/^	void  (*hmac_update)(void *context, const void *data, size_t size);$/;"	m	struct:tsig_algorithm
hsize	include/udb.h	/^	uint64_t hsize;$/;"	m	struct:udb_glob_d
id	include/tsig.h	/^	uint8_t id;$/;"	m	struct:tsig_lookup_struct_table
id	include/util.h	/^	int id;$/;"	m	struct:lookup_table
id	include/xfrd-tcp.h	/^	struct xfrd_zone* id[ID_PIPE_NUM];$/;"	m	struct:xfrd_tcp_pipeline	typeref:struct:xfrd_tcp_pipeline::xfrd_zone
identity	include/nsd.h	/^    const char      *identity;$/;"	m	struct:nsd
identity	include/options.h	/^	const char* identity;$/;"	m	struct:nsd_options
implicit	include/options.h	/^	uint8_t implicit; \/* pattern is implicit, part_of_config zone used *\/$/;"	m	struct:pattern_options
in6_addr	compat/fake-rfc2553.h	/^struct in6_addr {$/;"	s
in_tcp_send	include/xfrd.h	/^	uint8_t in_tcp_send;$/;"	m	struct:xfrd_zone
inc_state	nsd/configlexer.c	/^struct inc_state {$/;"	s	file:
incl	nsd/zlexer.c	630;"	d	file:
include	nsd/configlexer.c	1166;"	d	file:
include_quoted	nsd/configlexer.c	1167;"	d	file:
include_stack	nsd/configlexer.c	/^static YY_BUFFER_STATE include_stack[MAXINCLUDES];$/;"	v	file:
include_stack	nsd/zlexer.c	/^static YY_BUFFER_STATE include_stack[MAXINCLUDES];$/;"	v	file:
include_stack_ptr	nsd/zlexer.c	/^static int include_stack_ptr = 0;$/;"	v	file:
inet_aton	compat/inet_aton.c	/^inet_aton(const char *cp, struct in_addr *addr)$/;"	f
inet_ntop	compat/inet_ntop.c	/^inet_ntop(int af, const void *src, char *dst, size_t size)$/;"	f
inet_ntop4	compat/inet_ntop.c	/^inet_ntop4(const u_char *src, char *dst, size_t size)$/;"	f	file:
inet_ntop6	compat/inet_ntop.c	/^inet_ntop6(const u_char *src, char *dst, size_t size)$/;"	f	file:
inet_pton	compat/inet_pton.c	/^inet_pton(af, src, dst)$/;"	f
inet_pton4	compat/inet_pton.c	/^inet_pton4(src, dst)$/;"	f	file:
inet_pton6	compat/inet_pton.c	/^inet_pton6(src, dst)$/;"	f	file:
init_context	nsd/tsig-openssl.c	/^init_context(void *context,$/;"	f	file:
init_eth_header	ipv4.c	/^init_eth_header(struct ether_hdr *eth_hdr, struct ether_addr *src_mac, \\$/;"	f
init_ipv4_header	ipv4.c	/^init_ipv4_header(struct ipv4_hdr *ip_hdr, uint32_t src_addr,$/;"	f
init_lookup_key_ds_tree	nsd/nsec3.c	/^init_lookup_key_ds_tree(domain_type* d, uint8_t* hash)$/;"	f	file:
init_lookup_key_hash_tree	nsd/nsec3.c	/^init_lookup_key_hash_tree(domain_type* d, uint8_t* hash)$/;"	f	file:
init_lookup_key_wc_tree	nsd/nsec3.c	/^init_lookup_key_wc_tree(domain_type* d, uint8_t* hash)$/;"	f	file:
init_notify_send	nsd/xfrd-notify.c	/^init_notify_send(rbtree_t* tree, region_type* region, zone_options_t* options)$/;"	f
init_udp_header	ipv4.c	/^init_udp_header(struct udp_hdr *udp_hdr, uint16_t src_port,$/;"	f
initial_data	nsd/region-allocator.c	/^	char         *initial_data;$/;"	m	struct:region	file:
initialize_dname_compression_tables	nsd/fdns.c	/^initialize_dname_compression_tables(struct nsd *nsd)$/;"	f	file:
ip	include/xfrd-tcp.h	/^	struct sockaddr_in ip;$/;"	m	struct:xfrd_tcp_pipeline	typeref:struct:xfrd_tcp_pipeline::sockaddr_in
ip	include/xfrd-tcp.h	/^	struct sockaddr_storage ip;$/;"	m	struct:xfrd_tcp_pipeline	typeref:struct:xfrd_tcp_pipeline::sockaddr_storage
ip_address_option_t	include/options.h	/^typedef struct ipaddress_option ip_address_option_t;$/;"	t	typeref:struct:ipaddress_option
ip_address_spec	include/options.h	/^	const char* ip_address_spec;$/;"	m	struct:acl_options
ip_addresses	include/options.h	/^	ip_address_option_t* ip_addresses;$/;"	m	struct:nsd_options
ip_len	include/xfrd-tcp.h	/^	socklen_t ip_len;$/;"	m	struct:xfrd_tcp_pipeline
ip_transparent	include/options.h	/^	int ip_transparent;$/;"	m	struct:nsd_options
ipaddress_option	include/options.h	/^struct ipaddress_option {$/;"	s
ipc_conn	include/xfrd.h	/^	struct xfrd_tcp *ipc_conn;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::xfrd_tcp
ipc_handler	include/xfrd.h	/^	struct event ipc_handler;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::event
ipc_handler_conn_data	include/ipc.h	/^struct ipc_handler_conn_data$/;"	s
ipc_handler_flags	include/xfrd.h	/^	int ipc_handler_flags;$/;"	m	struct:xfrd_state
ipc_pass	include/xfrd.h	/^	struct buffer* ipc_pass;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::buffer
ipc_send_blocked	include/xfrd.h	/^	uint8_t	ipc_send_blocked;$/;"	m	struct:xfrd_state
ipv4_edns_size	include/nsd.h	/^    size_t ipv4_edns_size;$/;"	m	struct:nsd
ipv4_edns_size	include/options.h	/^	size_t ipv4_edns_size;$/;"	m	struct:nsd_options
ipv4_rcv	ipv4.c	/^int ipv4_rcv(struct rte_mbuf *pkt, uint16_t offset) {$/;"	f
ipv6_edns_size	include/options.h	/^	size_t ipv6_edns_size;$/;"	m	struct:nsd_options
is_activated	include/xfrd.h	/^	uint8_t is_activated;$/;"	m	struct:xfrd_zone
is_apex	include/namedb.h	/^	unsigned     is_apex : 1;$/;"	m	struct:domain
is_changed	include/namedb.h	/^	unsigned     is_changed : 1; \/* zone was changed by AXFR *\/$/;"	m	struct:zone
is_changed	include/udbzone.h	/^	uint8_t is_changed;$/;"	m	struct:zone_d
is_existing	include/namedb.h	/^	unsigned     is_existing : 1;$/;"	m	struct:domain
is_ipv6	include/options.h	/^	uint8_t is_ipv6;$/;"	m	struct:acl_options
is_leap_year	nsd/util.c	/^is_leap_year(int year)$/;"	f	file:
is_ok	include/namedb.h	/^	unsigned     is_ok : 1; \/* zone has not expired. *\/$/;"	m	struct:zone
is_reading	include/xfrd-tcp.h	/^	uint8_t is_reading;$/;"	m	struct:xfrd_tcp
is_secure	include/namedb.h	/^	unsigned     is_secure : 1; \/* zone uses DNSSEC *\/$/;"	m	struct:zone
is_waiting	include/xfrd-notify.h	/^	uint8_t is_waiting;$/;"	m	struct:notify_zone_t
iterated_hash	nsd/iterated_hash.c	/^iterated_hash(unsigned char out[SHA_DIGEST_LENGTH],$/;"	f
ixfr_disabled	include/options.h	/^	time_t ixfr_disabled;$/;"	m	struct:acl_options
key	include/rbtree.h	/^	const void *key;$/;"	m	struct:rbnode_t
key	include/tsig.h	/^	tsig_key_type       *key;$/;"	m	struct:tsig_record
key	nsd/tsig.c	/^	tsig_key_type *key;$/;"	m	struct:tsig_key_table	file:
key_name	include/options.h	/^	const char* key_name;$/;"	m	struct:acl_options
key_name	include/tsig.h	/^	const dname_type *key_name;$/;"	m	struct:tsig_record
key_options	include/options.h	/^	key_options_t* key_options;$/;"	m	struct:acl_options
key_options	include/options.h	/^struct key_options {$/;"	s
key_options_add_modify	nsd/options.c	/^key_options_add_modify(nsd_options_t* opt, key_options_t* key)$/;"	f
key_options_create	nsd/options.c	/^key_options_create(region_type* region)$/;"	f
key_options_desetup	nsd/options.c	/^key_options_desetup(region_type* region, key_options_t* key)$/;"	f
key_options_equal	nsd/options.c	/^key_options_equal(key_options_t* p, key_options_t* q)$/;"	f
key_options_find	nsd/options.c	/^key_options_find(nsd_options_t* opt, const char* name)$/;"	f
key_options_insert	nsd/options.c	/^key_options_insert(nsd_options_t* opt, key_options_t* key)$/;"	f
key_options_remove	nsd/options.c	/^key_options_remove(nsd_options_t* opt, const char* name)$/;"	f
key_options_setup	nsd/options.c	/^key_options_setup(region_type* region, key_options_t* key)$/;"	f
key_options_t	include/options.h	/^typedef struct key_options key_options_t;$/;"	t	typeref:struct:key_options
key_options_tsig_add	nsd/options.c	/^key_options_tsig_add(nsd_options_t* opt)$/;"	f
keys	include/options.h	/^	rbtree_t* keys;$/;"	m	struct:nsd_options
klass	include/namedb.h	/^	uint16_t         klass;$/;"	m	struct:rr
klass	include/udbzone.h	/^	uint16_t klass;$/;"	m	struct:rr_d
klass	include/xfrd.h	/^	uint16_t klass; \/* = CLASS_IN *\/$/;"	m	struct:xfrd_soa
klass	include/zparser.h	/^	uint16_t	  klass;$/;"	m	union:YYSTYPE
klass	nsd/zparser.c	/^	uint16_t	  klass;$/;"	m	union:YYSTYPE	file:
kni	main.c	/^struct rte_kni *kni;$/;"	v	typeref:struct:rte_kni
kni_burst_free_mbufs	main.c	/^kni_burst_free_mbufs(struct rte_mbuf **pkts, unsigned num)$/;"	f	file:
kni_ops	main.c	/^static struct rte_kni_ops kni_ops = {$/;"	v	typeref:struct:rte_kni_ops	file:
label_compare	nsd/dname.c	/^label_compare(const uint8_t *left, const uint8_t *right)$/;"	f
label_count	include/dname.h	/^	uint8_t label_count;$/;"	m	struct:dname
label_data	include/dname.h	/^label_data(const uint8_t *label)$/;"	f
label_is_normal	include/dname.h	/^label_is_normal(const uint8_t *label)$/;"	f
label_is_pointer	include/dname.h	/^label_is_pointer(const uint8_t *label)$/;"	f
label_is_root	include/dname.h	/^label_is_root(const uint8_t *label)$/;"	f
label_is_wildcard	include/dname.h	/^label_is_wildcard(const uint8_t *label)$/;"	f
label_length	include/dname.h	/^label_length(const uint8_t *label)$/;"	f
label_next	include/dname.h	/^label_next(const uint8_t *label)$/;"	f
label_pointer_location	include/dname.h	/^label_pointer_location(const uint8_t *label)$/;"	f
large_elem	nsd/region-allocator.c	/^struct large_elem {$/;"	s	file:
large_list	nsd/region-allocator.c	/^	struct large_elem* large_list;$/;"	m	struct:region	typeref:struct:region::large_elem	file:
large_object_size	nsd/region-allocator.c	/^	size_t        large_object_size;$/;"	m	struct:region	file:
large_objects	nsd/region-allocator.c	/^	size_t        large_objects;$/;"	m	struct:region	file:
last_task	include/xfrd.h	/^	struct udb_ptr* last_task;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::udb_ptr
lcore_master	main.c	/^lcore_master(__attribute__((unused)) void *arg) {$/;"	f	file:
lcore_slave	main.c	/^lcore_slave(__attribute__((unused)) void *arg) {$/;"	f	file:
leap_days	nsd/util.c	/^leap_days(int y1, int y2)$/;"	f	file:
left	include/rbtree.h	/^	rbnode_t   *left;$/;"	m	struct:rbnode_t
len	include/radtree.h	/^	radstrlen_t len;$/;"	m	struct:radsel
len	include/radtree.h	/^	uint16_t len;$/;"	m	struct:radnode
len	include/udbradtree.h	/^	udb_radstrlen_t len;$/;"	m	struct:udb_radsel_d
len	include/udbradtree.h	/^	uint16_t len;$/;"	m	struct:udb_radarray_d
len	include/udbzone.h	/^	uint16_t len;$/;"	m	struct:rr_d
len	include/zonec.h	/^    size_t   len;		\/* holds the label length *\/$/;"	m	struct:lex_data
lex_data	include/zonec.h	/^struct lex_data {$/;"	s
lexer_state	nsd/zlexer.c	/^enum lexer_state {$/;"	g	file:
line	include/options.h	/^	int line;$/;"	m	struct:config_parser_state
line	include/zonec.h	/^	unsigned int line;$/;"	m	struct:zparser
line	nsd/configlexer.c	/^	int line;$/;"	m	struct:inc_state	file:
linesize	include/options.h	/^	int linesize;$/;"	m	struct:zone_options
linesize	include/options.h	/^	int linesize;$/;"	m	struct:zonelist_bucket
list	include/options.h	/^	struct zonelist_free* list;$/;"	m	struct:zonelist_bucket	typeref:struct:zonelist_bucket::zonelist_free
log_file	include/util.h	/^log_function_type log_file;$/;"	v
log_file	nsd/util.c	/^log_file(int priority, const char *message)$/;"	f
log_finalize	nsd/util.c	/^log_finalize(void)$/;"	f
log_function_type	include/util.h	/^typedef void log_function_type(int priority, const char *message);$/;"	t
log_init	nsd/util.c	/^log_init(const char *ident)$/;"	f
log_msg	nsd/util.c	/^log_msg(int priority, const char *format, ...)$/;"	f
log_myopen	nsd/util.c	/^log_myopen(const char *filename)$/;"	f
log_open	nsd/util.c	/^log_open(int option, int facility, const char *filename)$/;"	f
log_priority_table	nsd/util.c	/^static lookup_table_type log_priority_table[] = {$/;"	v	file:
log_reopen	nsd/util.c	/^log_reopen(const char *filename, uint8_t verbose)$/;"	f
log_set_log_function	nsd/util.c	/^log_set_log_function(log_function_type *log_function)$/;"	f
log_str	include/udbzone.h	/^	udb_rel_ptr log_str;$/;"	m	struct:zone_d
log_syslog	include/util.h	/^log_function_type log_syslog;$/;"	v
log_syslog	nsd/util.c	/^log_syslog(int priority, const char *message)$/;"	f
log_vmsg	nsd/util.c	/^log_vmsg(int priority, const char *format, va_list args)$/;"	f
logfile	include/options.h	/^	const char* logfile;$/;"	m	struct:nsd_options
lookup	include/udbradtree.h	/^	struct udb_rel_ptr lookup;$/;"	m	struct:udb_radnode_d	typeref:struct:udb_radnode_d::udb_rel_ptr
lookup	nsd/udbradtree.c	/^static struct udb_radarray_d* lookup(udb_ptr* n)$/;"	f	file:
lookup_by_id	nsd/util.c	/^lookup_by_id(lookup_table_type *table, int id)$/;"	f
lookup_by_name	nsd/util.c	/^lookup_by_name(lookup_table_type *table, const char *name)$/;"	f
lookup_len	nsd/udbradtree.c	/^static udb_radstrlen_t lookup_len(udb_ptr* n, unsigned i)$/;"	f	file:
lookup_node	nsd/udbradtree.c	/^static struct udb_radnode_d* lookup_node(udb_ptr* n, unsigned i)$/;"	f	file:
lookup_string	nsd/udbradtree.c	/^static uint8_t* lookup_string(udb_ptr* n, unsigned i)$/;"	f	file:
lookup_table	include/util.h	/^struct lookup_table {$/;"	s
lookup_table_type	include/util.h	/^typedef struct lookup_table lookup_table_type;$/;"	t	typeref:struct:lookup_table
mac_data	include/tsig.h	/^	uint8_t          *mac_data;$/;"	m	struct:tsig_record
mac_size	include/tsig.h	/^	uint16_t          mac_size;$/;"	m	struct:tsig_record
main	compat/snprintf.c	/^int main(void)$/;"	f
main	main.c	/^main(int argc, char **argv)$/;"	f
main	nsd/lookup3.c	/^int main()$/;"	f
main_ipc_handler_data	include/ipc.h	/^struct main_ipc_handler_data$/;"	s
malloc	compat/malloc.c	7;"	d	file:
malloc_ai	compat/fake-rfc2553.c	/^addrinfo *malloc_ai(int port, u_long addr, const struct addrinfo *hints)$/;"	f	file:
marshal_acl	nsd/options.c	/^marshal_acl(struct buffer* b, acl_options_t* acl)$/;"	f	file:
marshal_acl_list	nsd/options.c	/^marshal_acl_list(struct buffer* b, acl_options_t* list)$/;"	f	file:
marshal_str	nsd/options.c	/^marshal_str(struct buffer* b, const char* s)$/;"	f	file:
marshal_u16	nsd/options.c	/^marshal_u16(struct buffer* b, uint16_t v)$/;"	f	file:
marshal_u8	nsd/options.c	/^marshal_u8(struct buffer* b, uint8_t v)$/;"	f	file:
master	include/xfrd.h	/^	acl_options_t* master;$/;"	m	struct:xfrd_zone
master_num	include/xfrd.h	/^	int master_num;$/;"	m	struct:xfrd_zone
master_process_packets	main.c	/^master_process_packets(uint32_t port_num __rte_unused,$/;"	f	file:
match_string	compat/strptime.c	/^match_string(const char **buf, const char **strs)$/;"	f	file:
max_algo_digest_size	nsd/tsig.c	/^static size_t max_algo_digest_size = 0;$/;"	v	file:
maxfd	include/mini_event.h	/^	int maxfd;$/;"	m	struct:event_base
maximum	include/dns.h	/^	uint32_t    maximum;	\/* Maximum number of RDATAs.  *\/$/;"	m	struct:rrtype_descriptor
maximum_cleanup_count	nsd/region-allocator.c	/^	size_t        maximum_cleanup_count;$/;"	m	struct:region	file:
maximum_digest_size	include/tsig.h	/^	size_t maximum_digest_size;$/;"	m	struct:tsig_algorithm
maxlen	include/edns.h	/^	size_t           maxlen;$/;"	m	struct:edns_record
maxlen	include/query.h	/^	size_t maxlen;$/;"	m	struct:query
mdays	nsd/util.c	/^static const int mdays[] = {$/;"	v	file:
memcmp	compat/memcmp.c	/^int memcmp(const void *x, const void *y, size_t n)$/;"	f
memcmp	compat/memcmp.h	13;"	d
memcmp	include/config.h	741;"	d
memmove	compat/memmove.c	/^void *memmove(void *dest, const void *src, size_t n)$/;"	f
minimum	include/dns.h	/^	uint32_t    minimum;	\/* Minimum number of RDATAs.  *\/$/;"	m	struct:rrtype_descriptor
minimum	include/xfrd.h	/^	uint32_t minimum;$/;"	m	struct:xfrd_soa
mix	nsd/lookup3.c	153;"	d	file:
mktime_from_utc	nsd/util.c	/^mktime_from_utc(const struct tm *tm)$/;"	f
mmap_alloc	nsd/util.c	/^mmap_alloc(size_t size)$/;"	f
mmap_free	nsd/util.c	/^mmap_free(void *ptr)$/;"	f
move_chunk	nsd/udb.c	/^move_chunk(void* base, udb_alloc* alloc, udb_void f, int exp, uint64_t esz,$/;"	f	file:
move_xl_list	nsd/udb.c	/^move_xl_list(void* base, udb_alloc* alloc, udb_void xl_start, uint64_t xl_sz,$/;"	f	file:
move_xl_segment	nsd/udb.c	/^move_xl_segment(void* base, udb_base* udb, udb_void xl, udb_void n,$/;"	f	file:
msg_is_ixfr	include/xfrd.h	/^	uint8_t msg_is_ixfr; \/* 1:IXFR detected. 2:middle IXFR SOA seen. *\/$/;"	m	struct:xfrd_zone
msg_new_serial	include/xfrd.h	/^	uint32_t msg_old_serial, msg_new_serial; \/* host byte order *\/$/;"	m	struct:xfrd_zone
msg_old_serial	include/xfrd.h	/^	uint32_t msg_old_serial, msg_new_serial; \/* host byte order *\/$/;"	m	struct:xfrd_zone
msg_rr_count	include/xfrd.h	/^	size_t msg_rr_count;$/;"	m	struct:xfrd_zone
msg_seq_nr	include/xfrd.h	/^	uint32_t msg_seq_nr; \/* number of messages already handled *\/$/;"	m	struct:xfrd_zone
msglen	include/xfrd-tcp.h	/^	uint16_t msglen;$/;"	m	struct:xfrd_tcp
mtime	include/udbzone.h	/^	uint64_t mtime;$/;"	m	struct:zone_d
my_strnlen	compat/snprintf.c	/^my_strnlen(const char* s, int max)$/;"	f	file:
name	include/dns.h	/^	const char *name;	\/* Textual name.  *\/$/;"	m	struct:rrtype_descriptor
name	include/options.h	/^	char* name;$/;"	m	struct:key_options
name	include/options.h	/^	const char* name;$/;"	m	struct:zone_options
name	include/tsig.h	/^	const dname_type *name;$/;"	m	struct:tsig_key
name	include/udbzone.h	/^	uint8_t name[0];$/;"	m	struct:domain_d
name	include/udbzone.h	/^	uint8_t name[0];$/;"	m	struct:zone_d
name	include/util.h	/^	const char *name;$/;"	m	struct:lookup_table
name_size	include/dname.h	/^	uint8_t name_size;$/;"	m	struct:dname
namedb	include/namedb.h	/^struct namedb$/;"	s
namedb_check_zonefile	nsd/dbaccess.c	/^void namedb_check_zonefile(struct nsd* nsd, udb_base* taskudb,$/;"	f
namedb_check_zonefiles	nsd/dbaccess.c	/^void namedb_check_zonefiles(struct nsd* nsd, nsd_options_t* opt,$/;"	f
namedb_close	nsd/dbaccess.c	/^namedb_close(struct namedb* db)$/;"	f
namedb_close_udb	nsd/dbaccess.c	/^namedb_close_udb(struct namedb* db)$/;"	f
namedb_find_zone	nsd/namedb.c	/^namedb_find_zone(namedb_type* db, const dname_type* dname)$/;"	f
namedb_lookup	nsd/namedb.c	/^namedb_lookup(struct namedb* db,$/;"	f
namedb_open	nsd/dbaccess.c	/^namedb_open (const char* filename, nsd_options_t* opt)$/;"	f
namedb_read_zonefile	nsd/dbaccess.c	/^namedb_read_zonefile(struct nsd* nsd, struct zone* zone, udb_base* taskudb,$/;"	f
namedb_type	include/namedb.h	/^typedef struct namedb namedb_type;$/;"	t	typeref:struct:namedb
namedb_walkfunc	nsd/udbzone.c	/^void namedb_walkfunc(void* base, void* warg, uint8_t t, void* d, uint64_t s,$/;"	f
namedb_write_zonefile	nsd/dbcreate.c	/^namedb_write_zonefile(struct nsd* nsd, zone_options_t* zopt)$/;"	f
namedb_write_zonefiles	nsd/dbcreate.c	/^namedb_write_zonefiles(struct nsd* nsd, nsd_options_t* options)$/;"	f
namedb_zone_create	nsd/dbaccess.c	/^namedb_zone_create(namedb_type* db, const dname_type* dname,$/;"	f
namedb_zone_delete	nsd/dbaccess.c	/^namedb_zone_delete(namedb_type* db, zone_type* zone)$/;"	f
namelen	include/udbzone.h	/^	udb_radstrlen_t namelen;$/;"	m	struct:domain_d
namelen	include/udbzone.h	/^	udb_radstrlen_t namelen;$/;"	m	struct:zone_d
nametree	include/namedb.h	/^	struct radtree *nametree;$/;"	m	struct:domain_table	typeref:struct:domain_table::radtree
neato_timeout	nsd/xfrd-disk.c	/^neato_timeout(FILE* out, const char* str, time_t secs)$/;"	f	file:
need_to_exit	include/mini_event.h	/^	int need_to_exit;$/;"	m	struct:event_base
need_to_send_quit	include/xfrd.h	/^	uint8_t need_to_send_quit;$/;"	m	struct:xfrd_state
need_to_send_reload	include/xfrd.h	/^	uint8_t need_to_send_reload;$/;"	m	struct:xfrd_state
need_to_send_shutdown	include/xfrd.h	/^	uint8_t need_to_send_shutdown;$/;"	m	struct:xfrd_state
need_to_send_stats	include/xfrd.h	/^	uint8_t need_to_send_stats;$/;"	m	struct:xfrd_state
neteth_rcv	netdev.c	/^int neteth_rcv(struct rte_mbuf *pkt) { $/;"	f
netio	include/netio.h	/^struct netio$/;"	s
netio_event_handler_type	include/netio.h	/^typedef void (*netio_event_handler_type)(netio_type *netio,$/;"	t
netio_event_types	include/netio.h	/^enum netio_event_types {$/;"	g
netio_event_types_type	include/netio.h	/^typedef enum netio_event_types netio_event_types_type;$/;"	t	typeref:enum:netio_event_types
netio_handler	include/netio.h	/^struct netio_handler$/;"	s
netio_handler_list	include/netio.h	/^struct netio_handler_list$/;"	s
netio_handler_list_type	include/netio.h	/^typedef struct netio_handler_list netio_handler_list_type;$/;"	t	typeref:struct:netio_handler_list
netio_handler_type	include/netio.h	/^typedef struct netio_handler netio_handler_type;$/;"	t	typeref:struct:netio_handler
netio_type	include/netio.h	/^typedef struct netio netio_type;$/;"	t	typeref:struct:netio
newserial	include/difffile.h	/^	uint32_t oldserial, newserial;$/;"	m	struct:task_list_d
next	include/difffile.h	/^	udb_rel_ptr next;$/;"	m	struct:task_list_d
next	include/namedb.h	/^	rrset_type* next;$/;"	m	struct:rrset
next	include/netio.h	/^	netio_handler_list_type *next;$/;"	m	struct:netio_handler_list
next	include/options.h	/^	acl_options_t* next;$/;"	m	struct:acl_options
next	include/options.h	/^	ip_address_option_t* next;$/;"	m	struct:ipaddress_option
next	include/options.h	/^	struct zonelist_free* next;$/;"	m	struct:zonelist_free	typeref:struct:zonelist_free::zonelist_free
next	include/udb.h	/^	udb_ptr* next;$/;"	m	struct:udb_ptr
next	include/udb.h	/^	udb_void next;$/;"	m	struct:udb_free_chunk_d
next	include/udb.h	/^	udb_void next;$/;"	m	struct:udb_rel_ptr
next	include/udbzone.h	/^	udb_rel_ptr next;$/;"	m	struct:rr_d
next	include/udbzone.h	/^	udb_rel_ptr next;$/;"	m	struct:rrset_d
next	nsd/region-allocator.c	/^	struct large_elem* next;$/;"	m	struct:large_elem	typeref:struct:large_elem::large_elem	file:
next	nsd/region-allocator.c	/^	struct recycle_elem* next;$/;"	m	struct:recycle_elem	typeref:struct:recycle_elem::recycle_elem	file:
next	nsd/tsig.c	/^	struct tsig_algorithm_table *next;$/;"	m	struct:tsig_algorithm_table	typeref:struct:tsig_algorithm_table::tsig_algorithm_table	file:
next_master	include/xfrd.h	/^	int next_master; \/* -1 or set by notify where to try next *\/$/;"	m	struct:xfrd_zone
nextgrow	include/udb.h	/^	volatile uint64_t nextgrow;$/;"	m	struct:udb_alloc_d
node	include/mini_event.h	/^	rbnode_t node;$/;"	m	struct:event
node	include/namedb.h	/^	struct radnode *node; \/* this entry in zonetree *\/$/;"	m	struct:zone	typeref:struct:zone::radnode
node	include/options.h	/^	rbnode_t node; \/* key is ptr to linesize *\/$/;"	m	struct:zonelist_bucket
node	include/options.h	/^	rbnode_t node; \/* key of tree is name *\/$/;"	m	struct:key_options
node	include/options.h	/^	rbnode_t node;$/;"	m	struct:pattern_options
node	include/options.h	/^	rbnode_t node;$/;"	m	struct:zone_options
node	include/radtree.h	/^	struct radnode* node;$/;"	m	struct:radsel	typeref:struct:radsel::radnode
node	include/udbradtree.h	/^	struct udb_rel_ptr node;$/;"	m	struct:udb_radsel_d	typeref:struct:udb_radsel_d::udb_rel_ptr
node	include/udbzone.h	/^	udb_rel_ptr node;$/;"	m	struct:domain_d
node	include/udbzone.h	/^	udb_rel_ptr node;$/;"	m	struct:zone_d
node	include/xfrd-notify.h	/^	rbnode_t node;$/;"	m	struct:notify_zone_t
node	include/xfrd-tcp.h	/^	rbnode_t node;$/;"	m	struct:xfrd_tcp_pipeline
node	include/xfrd.h	/^	rbnode_t node;$/;"	m	struct:xfrd_zone
node	nsd/tsig.c	/^	rbnode_t node; \/* by dname *\/$/;"	m	struct:tsig_key_table	file:
nokey	include/options.h	/^	uint8_t nokey;$/;"	m	struct:acl_options
notify	include/options.h	/^	acl_options_t* notify;$/;"	m	struct:pattern_options
notify_current	include/xfrd-notify.h	/^	struct acl_options* notify_current; \/* current slave to notify *\/$/;"	m	struct:notify_zone_t	typeref:struct:notify_zone_t::acl_options
notify_disable	nsd/xfrd-notify.c	/^notify_disable(struct notify_zone_t* zone)$/;"	f
notify_enable	nsd/xfrd-notify.c	/^notify_enable(struct notify_zone_t* zone, struct xfrd_soa* new_soa)$/;"	f	file:
notify_handle_master_zone_soainfo	nsd/xfrd-notify.c	/^notify_handle_master_zone_soainfo(rbtree_t* tree,$/;"	f
notify_query_id	include/xfrd-notify.h	/^	uint16_t notify_query_id;$/;"	m	struct:notify_zone_t
notify_restart	include/xfrd-notify.h	/^	uint8_t notify_restart; \/* restart notify after repattern *\/$/;"	m	struct:notify_zone_t
notify_retry	include/options.h	/^	uint8_t notify_retry;$/;"	m	struct:pattern_options
notify_retry	include/xfrd-notify.h	/^	uint8_t notify_retry; \/* how manieth retry in sending to current *\/$/;"	m	struct:notify_zone_t
notify_retry_is_default	include/options.h	/^	uint8_t notify_retry_is_default;$/;"	m	struct:pattern_options
notify_send_disable	nsd/xfrd-notify.c	/^notify_send_disable(struct notify_zone_t* zone)$/;"	f	file:
notify_send_enable	include/xfrd-notify.h	/^	int notify_send_enable;$/;"	m	struct:notify_zone_t
notify_send_handler	include/xfrd-notify.h	/^	struct event notify_send_handler;$/;"	m	struct:notify_zone_t	typeref:struct:notify_zone_t::event
notify_timeout	include/xfrd-notify.h	/^	struct timeval notify_timeout;$/;"	m	struct:notify_zone_t	typeref:struct:notify_zone_t::timeval
notify_tsig	include/xfrd-notify.h	/^	tsig_record_type notify_tsig; \/* tsig state for notify *\/$/;"	m	struct:notify_zone_t
notify_udp_num	include/xfrd.h	/^	int notify_udp_num;$/;"	m	struct:xfrd_state
notify_waiting_first	include/xfrd.h	/^	struct notify_zone_t *notify_waiting_first, *notify_waiting_last;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::notify_zone_t
notify_waiting_last	include/xfrd.h	/^	struct notify_zone_t *notify_waiting_first, *notify_waiting_last;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::
notify_zone_t	include/xfrd-notify.h	/^struct notify_zone_t {$/;"	s
notify_zones	include/xfrd.h	/^	rbtree_t *notify_zones;$/;"	m	struct:xfrd_state
ns_rrset	include/namedb.h	/^	rrset_type*  ns_rrset;$/;"	m	struct:zone
nsd	include/ipc.h	/^	struct nsd	*nsd;$/;"	m	struct:ipc_handler_conn_data	typeref:struct:ipc_handler_conn_data::nsd
nsd	include/ipc.h	/^	struct nsd	*nsd;$/;"	m	struct:main_ipc_handler_data	typeref:struct:main_ipc_handler_data::nsd
nsd	include/nsd.h	/^struct nsd {$/;"	s
nsd	include/xfrd.h	/^	struct nsd* nsd;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::nsd
nsd	nsd/fdns.c	/^struct nsd nsd;$/;"	v	typeref:struct:nsd
nsd_debug_facilities	nsd/util.c	/^unsigned nsd_debug_facilities = 0xffff;$/;"	v
nsd_debug_level	nsd/util.c	/^int nsd_debug_level = 0;$/;"	v
nsd_options	include/options.h	/^struct nsd_options {$/;"	s
nsd_options_create	nsd/options.c	/^nsd_options_create(region_type* region)$/;"	f
nsd_options_destroy	nsd/options.c	/^nsd_options_destroy(nsd_options_t* opt)$/;"	f
nsd_options_insert_pattern	nsd/options.c	/^nsd_options_insert_pattern(nsd_options_t* opt, pattern_options_t* pat)$/;"	f
nsd_options_insert_zone	nsd/options.c	/^nsd_options_insert_zone(nsd_options_t* opt, zone_options_t* zone)$/;"	f
nsd_options_num_zones	include/options.h	/^static inline size_t nsd_options_num_zones(nsd_options_t* opt)$/;"	f
nsd_options_t	include/options.h	/^typedef struct nsd_options nsd_options_t;$/;"	t	typeref:struct:nsd_options
nsd_rc	include/dns.h	/^enum nsd_rc$/;"	g
nsd_rc_type	include/dns.h	/^typedef enum nsd_rc nsd_rc_type;$/;"	t	typeref:enum:nsd_rc
nsd_strptime	compat/strptime.c	/^nsd_strptime(const char *s, const char *format, struct tm *tm)$/;"	f
nsd_type	include/nsd.h	/^typedef struct nsd nsd_type;$/;"	t	typeref:struct:nsd
nsec3	include/namedb.h	/^	struct nsec3_domain_data* nsec3;$/;"	m	struct:domain	typeref:struct:domain::nsec3_domain_data
nsec3_add_closest_encloser_proof	nsd/nsec3.c	/^nsec3_add_closest_encloser_proof($/;"	f	file:
nsec3_add_ds_proof	nsd/nsec3.c	/^nsec3_add_ds_proof(struct query *query, struct answer *answer,$/;"	f	file:
nsec3_add_nonexist_proof	nsd/nsec3.c	/^nsec3_add_nonexist_proof(struct query* query, struct answer* answer,$/;"	f	file:
nsec3_add_params	nsd/zparser.c	/^nsec3_add_params(const char* hashalgo_str, const char* flag_str,$/;"	f	file:
nsec3_add_rr_trigger	nsd/difffile.c	/^nsec3_add_rr_trigger(namedb_type* db, rr_type* rr, zone_type* zone,$/;"	f	file:
nsec3_add_rrset	nsd/nsec3.c	/^nsec3_add_rrset(struct query* query, struct answer* answer,$/;"	f	file:
nsec3_add_rrset_trigger	nsd/difffile.c	/^nsec3_add_rrset_trigger(namedb_type* db, domain_type* domain, zone_type* zone,$/;"	f	file:
nsec3_answer_authoritative	nsd/nsec3.c	/^nsec3_answer_authoritative(struct domain** match, struct query *query,$/;"	f
nsec3_answer_delegation	nsd/nsec3.c	/^nsec3_answer_delegation(struct query *query, struct answer *answer)$/;"	f
nsec3_answer_nodata	nsd/nsec3.c	/^nsec3_answer_nodata(struct query* query, struct answer* answer,$/;"	f
nsec3_answer_wildcard	nsd/nsec3.c	/^nsec3_answer_wildcard(struct query *query, struct answer *answer,$/;"	f
nsec3_b32_create	nsd/nsec3.c	/^nsec3_b32_create(region_type* region, zone_type* zone, unsigned char* hash)$/;"	f
nsec3_chain_find_prev	nsd/nsec3.c	/^nsec3_chain_find_prev(struct zone* zone, struct domain* domain)$/;"	f
nsec3_clear_precompile	nsd/nsec3.c	/^nsec3_clear_precompile(struct namedb* db, zone_type* zone)$/;"	f
nsec3_condition_dshash	nsd/nsec3.c	/^nsec3_condition_dshash(domain_type* d, zone_type* z)$/;"	f
nsec3_condition_hash	nsd/nsec3.c	/^nsec3_condition_hash(domain_type* d, zone_type* z)$/;"	f
nsec3_cover	include/namedb.h	/^	domain_type* nsec3_cover;$/;"	m	struct:nsec3_domain_data
nsec3_delete_rr_trigger	nsd/difffile.c	/^nsec3_delete_rr_trigger(namedb_type* db, rr_type* rr, zone_type* zone,$/;"	f	file:
nsec3_delete_rrset_trigger	nsd/difffile.c	/^nsec3_delete_rrset_trigger(namedb_type* db, domain_type* domain,$/;"	f	file:
nsec3_domain_data	include/namedb.h	/^struct nsec3_domain_data {$/;"	s
nsec3_domain_part_of_zone	nsd/nsec3.c	/^nsec3_domain_part_of_zone(domain_type* d, zone_type* z)$/;"	f
nsec3_ds_parent_cover	include/namedb.h	/^	domain_type* nsec3_ds_parent_cover;$/;"	m	struct:nsec3_domain_data
nsec3_ds_parent_hash	include/namedb.h	/^	uint8_t nsec3_ds_parent_hash[NSEC3_HASH_LEN];$/;"	m	struct:nsec3_domain_data
nsec3_ds_parent_is_exact	include/namedb.h	/^	unsigned     nsec3_ds_parent_is_exact : 1;$/;"	m	struct:nsec3_domain_data
nsec3_find_cover	nsd/nsec3.c	/^nsec3_find_cover(zone_type* zone, uint8_t* hash, size_t hashlen,$/;"	f
nsec3_find_zone_param	nsd/nsec3.c	/^nsec3_find_zone_param(struct namedb* db, struct zone* zone, udb_ptr* z)$/;"	f
nsec3_has_soa	nsd/nsec3.c	/^nsec3_has_soa(rr_type* rr)$/;"	f	file:
nsec3_hash	include/namedb.h	/^	uint8_t nsec3_hash[NSEC3_HASH_LEN];$/;"	m	struct:nsec3_domain_data
nsec3_hash_and_store	nsd/nsec3.c	/^nsec3_hash_and_store(zone_type* zone, const dname_type* dname, uint8_t* store)$/;"	f
nsec3_hash_tree_clear	nsd/nsec3.c	/^void nsec3_hash_tree_clear(struct zone* zone)$/;"	f
nsec3_in_chain_count	nsd/nsec3.c	/^nsec3_in_chain_count(domain_type* domain, zone_type* zone)$/;"	f
nsec3_is_exact	include/namedb.h	/^	unsigned     nsec3_is_exact : 1;$/;"	m	struct:nsec3_domain_data
nsec3_last	include/namedb.h	/^	domain_type* nsec3_last; \/* last domain with nsec3, wraps *\/$/;"	m	struct:zone
nsec3_lookup_hash_and_wc	nsd/nsec3.c	/^nsec3_lookup_hash_and_wc(zone_type* zone, const dname_type* dname,$/;"	f	file:
nsec3_lookup_hash_ds	nsd/nsec3.c	/^nsec3_lookup_hash_ds(zone_type* zone, const dname_type* dname,$/;"	f	file:
nsec3_node	include/namedb.h	/^	rbnode_t nsec3_node;$/;"	m	struct:nsec3_domain_data
nsec3_param	include/namedb.h	/^	rr_type* nsec3_param; \/* NSEC3PARAM RR of chain in use or NULL *\/$/;"	m	struct:zone
nsec3_precompile_domain	nsd/nsec3.c	/^nsec3_precompile_domain(struct namedb* db, struct domain* domain,$/;"	f
nsec3_precompile_domain_ds	nsd/nsec3.c	/^nsec3_precompile_domain_ds(struct namedb* db, struct domain* domain,$/;"	f
nsec3_precompile_newparam	nsd/nsec3.c	/^nsec3_precompile_newparam(namedb_type* db, zone_type* zone)$/;"	f
nsec3_precompile_nsec3rr	nsd/nsec3.c	/^nsec3_precompile_nsec3rr(namedb_type* db, struct domain* domain,$/;"	f
nsec3_rdata_params_ok	nsd/nsec3.c	/^nsec3_rdata_params_ok(rdata_atom_type* prd, rdata_atom_type* rd)$/;"	f	file:
nsec3_rr_uses_params	nsd/nsec3.c	/^nsec3_rr_uses_params(rr_type* rr, zone_type* zone)$/;"	f
nsec3_rrsets_changed_add_prehash	nsd/difffile.c	/^nsec3_rrsets_changed_add_prehash(namedb_type* db, domain_type* domain,$/;"	f	file:
nsec3_rrsets_changed_remove_prehash	nsd/difffile.c	/^nsec3_rrsets_changed_remove_prehash(domain_type* domain, zone_type* zone)$/;"	f	file:
nsec3_tree_dszone	nsd/nsec3.c	/^nsec3_tree_dszone(namedb_type* db, domain_type* d)$/;"	f
nsec3_tree_zone	nsd/nsec3.c	/^nsec3_tree_zone(namedb_type* db, domain_type* d)$/;"	f
nsec3_wc_hash	include/namedb.h	/^	uint8_t nsec3_wc_hash[NSEC3_HASH_LEN];$/;"	m	struct:nsec3_domain_data
nsec3_wcard_child_cover	include/namedb.h	/^	domain_type* nsec3_wcard_child_cover;$/;"	m	struct:nsec3_domain_data
nsec3_zone_trees_create	nsd/nsec3.c	/^void nsec3_zone_trees_create(struct region* region, zone_type* zone)$/;"	f
nsec3param	include/udbzone.h	/^	udb_rel_ptr nsec3param;$/;"	m	struct:zone_d
nsec3tree	include/namedb.h	/^	rbtree_t* nsec3tree; \/* tree with relevant NSEC3 domains *\/$/;"	m	struct:zone
nsec_highest_rcode	nsd/zparser.c	/^uint16_t nsec_highest_rcode;$/;"	v
nsecbits	nsd/zparser.c	/^static uint8_t nsecbits[NSEC_WINDOW_COUNT][NSEC_WINDOW_BITS_SIZE];$/;"	v	file:
nsid	include/edns.h	/^	char nsid[OPT_HDR];$/;"	m	struct:edns_data
nsid	include/edns.h	/^	int              nsid;$/;"	m	struct:edns_record
nsid	include/nsd.h	/^    unsigned char   *nsid;$/;"	m	struct:nsd
nsid	include/options.h	/^	const char* nsid;$/;"	m	struct:nsd_options
nsid_len	include/nsd.h	/^    uint16_t        nsid_len;$/;"	m	struct:nsd
num_skip	include/xfrd-tcp.h	/^	int num_skip;$/;"	m	struct:xfrd_tcp_pipeline
num_unused	include/xfrd-tcp.h	/^	int num_unused;$/;"	m	struct:xfrd_tcp_pipeline
number	include/namedb.h	/^	size_t     number; \/* Unique domain name number.  *\/$/;"	m	struct:domain
number_temporary_domains	include/query.h	/^	size_t number_temporary_domains;$/;"	m	struct:query
numlist_last	include/namedb.h	/^	domain_type *numlist_last;$/;"	m	struct:domain_table
numlist_make_last	nsd/namedb.c	/^numlist_make_last(domain_table_type* table, domain_type* domain)$/;"	f	file:
numlist_next	include/namedb.h	/^	domain_type* numlist_prev, *numlist_next;$/;"	m	struct:domain
numlist_pop_last	nsd/namedb.c	/^numlist_pop_last(domain_table_type* table)$/;"	f	file:
numlist_prev	include/namedb.h	/^	domain_type* numlist_prev, *numlist_next;$/;"	m	struct:domain
nxtbits	nsd/zparser.c	/^static uint8_t nxtbits[16];$/;"	v	file:
off	include/options.h	/^	off_t off;$/;"	m	struct:zone_options
off	include/options.h	/^	off_t off;$/;"	m	struct:zonelist_free
offset	include/radtree.h	/^	uint8_t offset;$/;"	m	struct:radnode
offset	include/udbradtree.h	/^	uint8_t offset;$/;"	m	struct:udb_radnode_d
ok	include/edns.h	/^	char ok[OPT_LEN];$/;"	m	struct:edns_data
oldserial	include/difffile.h	/^	uint32_t oldserial, newserial;$/;"	m	struct:task_list_d
oldstate	nsd/zlexer.c	/^static YY_BUFFER_STATE oldstate;$/;"	v	file:
opcode	include/query.h	/^	uint8_t opcode;$/;"	m	struct:query
operator ++	include/dns.h	/^operator++(rr_section_type &lhs)$/;"	f
operator |	include/netio.h	/^operator | (netio_event_types_type lhs, netio_event_types_type rhs) {$/;"	f
operator |=	include/netio.h	/^operator |= (netio_event_types_type &lhs, netio_event_types_type rhs) {$/;"	f
opt	include/options.h	/^	nsd_options_t* opt;$/;"	m	struct:config_parser_state
options	include/nsd.h	/^    struct nsd_options *options;$/;"	m	struct:nsd	typeref:struct:nsd::nsd_options
options	include/xfrd-notify.h	/^	struct zone_options* options;$/;"	m	struct:notify_zone_t	typeref:struct:notify_zone_t::zone_options
opts	include/namedb.h	/^	struct zone_options* opts;$/;"	m	struct:zone	typeref:struct:zone::zone_options
orig_dbregion	include/zonec.c	/^static region_type* orig_dbregion = NULL;$/;"	v	file:
orig_dbregion	nsd/zonec.c	/^static region_type* orig_dbregion = NULL;$/;"	v	file:
orig_domains	include/zonec.c	/^static domain_table_type* orig_domains = NULL;$/;"	v	file:
orig_domains	nsd/zonec.c	/^static domain_table_type* orig_domains = NULL;$/;"	v	file:
orig_region	include/zonec.c	/^static region_type* orig_region = NULL;$/;"	v	file:
orig_region	nsd/zonec.c	/^static region_type* orig_region = NULL;$/;"	v	file:
origin	include/zonec.h	/^	domain_type *origin;$/;"	m	struct:zparser
original_query_id	include/tsig.h	/^	uint16_t          original_query_id;$/;"	m	struct:tsig_record
other_data	include/tsig.h	/^	uint8_t          *other_data;$/;"	m	struct:tsig_record
other_size	include/tsig.h	/^	uint16_t          other_size;$/;"	m	struct:tsig_record
outgoing_interface	include/options.h	/^	acl_options_t* outgoing_interface;$/;"	m	struct:pattern_options
owner	include/namedb.h	/^	domain_type*     owner;$/;"	m	struct:rr
packet	include/ipc.h	/^	struct buffer	*packet;$/;"	m	struct:main_ipc_handler_data	typeref:struct:main_ipc_handler_data::buffer
packet	include/query.h	/^	buffer_type *packet;$/;"	m	struct:query
packet	include/xfrd-tcp.h	/^	struct buffer* packet;$/;"	m	struct:xfrd_tcp	typeref:struct:xfrd_tcp::buffer
packet	include/xfrd.h	/^	struct buffer* packet;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::buffer
packet_encode_rr	nsd/packet.c	/^packet_encode_rr(query_type *q, domain_type *owner, rr_type *rr, uint32_t ttl)$/;"	f
packet_encode_rrset	nsd/packet.c	/^packet_encode_rrset(query_type *query,$/;"	f
packet_read_query_section	nsd/packet.c	/^int packet_read_query_section(buffer_type *packet,$/;"	f
packet_read_rr	nsd/packet.c	/^packet_read_rr(region_type *region, domain_table_type *owners,$/;"	f
packet_skip_dname	nsd/packet.c	/^packet_skip_dname(buffer_type *packet)$/;"	f
packet_skip_rr	nsd/packet.c	/^packet_skip_rr(buffer_type *packet, int question_section)$/;"	f
pad	include/udb.h	/^	uint8_t pad[5];$/;"	m	struct:udb_chunk_d
pad	include/udb.h	/^	uint8_t pad[5];$/;"	m	struct:udb_free_chunk_d
pad	include/udb.h	/^	uint8_t pad[5];$/;"	m	struct:udb_xl_chunk_d
pad1	include/udb.h	/^	uint8_t pad1[4];$/;"	m	struct:udb_glob_d
padding	include/udbradtree.h	/^	uint16_t padding;$/;"	m	struct:udb_radarray_d
padding16	include/udbradtree.h	/^	uint16_t padding16;$/;"	m	struct:udb_radsel_d
padding32	include/udbradtree.h	/^	uint32_t padding32;$/;"	m	struct:udb_radsel_d
parent	include/namedb.h	/^	domain_type* parent;$/;"	m	struct:domain
parent	include/radtree.h	/^	struct radnode* parent;$/;"	m	struct:radnode	typeref:struct:radnode::radnode
parent	include/rbtree.h	/^	rbnode_t   *parent;$/;"	m	struct:rbnode_t
parent	include/udbradtree.h	/^	struct udb_rel_ptr parent;$/;"	m	struct:udb_radnode_d	typeref:struct:udb_radnode_d::udb_rel_ptr
parse_acl_info	nsd/options.c	/^parse_acl_info(region_type* region, char* ip, const char* key)$/;"	f
parse_acl_is_ipv6	nsd/options.c	/^parse_acl_is_ipv6(const char* p)$/;"	f
parse_acl_range_subnet	nsd/options.c	/^parse_acl_range_subnet(char* p, void* addr, int maxbits)$/;"	f
parse_acl_range_type	nsd/options.c	/^parse_acl_range_type(char* ip, char** mask)$/;"	f
parse_int	include/zonec.c	/^parse_int(const char *str,$/;"	f	file:
parse_int	nsd/zonec.c	/^parse_int(const char *str,$/;"	f	file:
parse_nsec3_name	nsd/nsec3.c	/^parse_nsec3_name(const dname_type* dname, uint8_t* hash, size_t buflen)$/;"	f	file:
parse_options_file	nsd/options.c	/^parse_options_file(nsd_options_t* opt, const char* file,$/;"	f
parse_stack	nsd/configlexer.c	/^static struct inc_state parse_stack[MAXINCLUDES];$/;"	v	typeref:struct:inc_state	file:
parse_token	nsd/zlexer.c	/^parse_token(int token, char *yytext, enum lexer_state *lexer_state)$/;"	f	file:
parse_unknown_rdata	include/zonec.c	/^parse_unknown_rdata(uint16_t type, uint16_t *wireformat)$/;"	f
parse_unknown_rdata	nsd/zonec.c	/^parse_unknown_rdata(uint16_t type, uint16_t *wireformat)$/;"	f
parse_zone_list_file	nsd/options.c	/^parse_zone_list_file(nsd_options_t* opt)$/;"	f
parser	nsd/zparser.c	/^zparser_type *parser;$/;"	v
parser_pop_stringbuf	nsd/zlexer.c	/^parser_pop_stringbuf(void)$/;"	f
parser_push_stringbuf	nsd/zlexer.c	/^parser_push_stringbuf(char* str)$/;"	f
part_of_config	include/options.h	/^	uint8_t part_of_config;$/;"	m	struct:zone_options
pattern	include/options.h	/^	pattern_options_t* pattern;$/;"	m	struct:zone_options
pattern_options	include/options.h	/^struct pattern_options {$/;"	s
pattern_options_add_modify	nsd/options.c	/^pattern_options_add_modify(nsd_options_t* opt, pattern_options_t* p)$/;"	f
pattern_options_create	nsd/options.c	/^pattern_options_create(region_type* region)$/;"	f
pattern_options_equal	nsd/options.c	/^pattern_options_equal(pattern_options_t* p, pattern_options_t* q)$/;"	f
pattern_options_find	nsd/options.c	/^pattern_options_find(nsd_options_t* opt, const char* name)$/;"	f
pattern_options_marshal	nsd/options.c	/^pattern_options_marshal(struct buffer* b, pattern_options_t* p)$/;"	f
pattern_options_remove	nsd/options.c	/^pattern_options_remove(nsd_options_t* opt, const char* name)$/;"	f
pattern_options_t	include/options.h	/^typedef struct pattern_options pattern_options_t;$/;"	t	typeref:struct:pattern_options
pattern_options_unmarshal	nsd/options.c	/^pattern_options_unmarshal(region_type* r, struct buffer* b)$/;"	f
patterns	include/options.h	/^	rbtree_t* patterns;$/;"	m	struct:nsd_options
pidfile	include/options.h	/^	const char* pidfile;$/;"	m	struct:nsd_options
pidx	include/radtree.h	/^	uint8_t pidx;$/;"	m	struct:radnode
pidx	include/udbradtree.h	/^	uint8_t pidx;$/;"	m	struct:udb_radnode_d
pipeline_find	nsd/xfrd-tcp.c	/^pipeline_find(xfrd_tcp_set_t* set, xfrd_zone_t* zone)$/;"	f	file:
pipeline_setup_new_zone	nsd/xfrd-tcp.c	/^pipeline_setup_new_zone(xfrd_tcp_set_t* set, struct xfrd_tcp_pipeline* tp,$/;"	f	file:
pipetree	include/xfrd-tcp.h	/^	rbtree_t* pipetree;$/;"	m	struct:xfrd_tcp_set
pktmbuf_pool	main.c	/^struct rte_mempool *pktmbuf_pool;$/;"	v	typeref:struct:rte_mempool
pname	include/options.h	/^	const char* pname; \/* name of the pattern, key of rbtree *\/$/;"	m	struct:pattern_options
pop_parser_state	nsd/zlexer.c	/^pop_parser_state(void)$/;"	f	file:
port	include/options.h	/^	const char* port;$/;"	m	struct:nsd_options
port	include/options.h	/^	unsigned int port;	\/* is 0(no port) or suffix @port value *\/$/;"	m	struct:acl_options
port_conf_default	main.c	/^static const struct rte_eth_conf port_conf_default = {$/;"	v	typeref:struct:rte_eth_conf	file:
port_init	main.c	/^port_init(uint8_t port, struct rte_mempool *mbuf_pool)  $/;"	f	file:
position	include/edns.h	/^	size_t           position;$/;"	m	struct:edns_record
position	include/tsig.h	/^	size_t               position;$/;"	m	struct:tsig_record
poweroften	include/zonec.c	/^static unsigned int poweroften[10] = {1, 10, 100, 1000, 10000, 100000,$/;"	v	file:
poweroften	nsd/zonec.c	/^static unsigned int poweroften[10] = {1, 10, 100, 1000, 10000, 100000,$/;"	v	file:
precsize_aton	include/zonec.c	/^precsize_aton (char *cp, char **endptr)$/;"	f	file:
precsize_aton	nsd/zonec.c	/^precsize_aton (char *cp, char **endptr)$/;"	f	file:
prehash_add	nsd/namedb.c	/^prehash_add(domain_table_type* table, domain_type* domain)$/;"	f
prehash_clear	nsd/namedb.c	/^void prehash_clear(domain_table_type* table)$/;"	f
prehash_del	nsd/namedb.c	/^prehash_del(domain_table_type* table, domain_type* domain)$/;"	f
prehash_list	include/namedb.h	/^	domain_type* prehash_list;$/;"	m	struct:domain_table
prehash_next	include/namedb.h	/^	domain_type* prehash_prev, *prehash_next;$/;"	m	struct:nsec3_domain_data
prehash_prev	include/namedb.h	/^	domain_type* prehash_prev, *prehash_next;$/;"	m	struct:nsec3_domain_data
prehash_zone	nsd/nsec3.c	/^void prehash_zone(struct namedb* db, struct zone* zone)$/;"	f
prehash_zone_complete	nsd/nsec3.c	/^prehash_zone_complete(struct namedb* db, struct zone* zone)$/;"	f
prev	include/udb.h	/^	udb_ptr* prev;$/;"	m	struct:udb_ptr
prev	include/udb.h	/^	udb_void prev;$/;"	m	struct:udb_free_chunk_d
prev	include/udb.h	/^	udb_void prev;$/;"	m	struct:udb_rel_ptr
prev	nsd/region-allocator.c	/^	struct large_elem* prev;$/;"	m	struct:large_elem	typeref:struct:large_elem::large_elem	file:
prev_dname	include/zonec.h	/^	domain_type *prev_dname;$/;"	m	struct:zparser
previous_owner	include/util.h	/^	const struct dname *previous_owner;$/;"	m	struct:state_pretty_rr	typeref:struct:state_pretty_rr::dname
previous_owner_origin	include/util.h	/^	const struct dname *previous_owner_origin;$/;"	m	struct:state_pretty_rr	typeref:struct:state_pretty_rr::dname
previous_owner_region	include/util.h	/^	struct region *previous_owner_region;$/;"	m	struct:state_pretty_rr	typeref:struct:state_pretty_rr::region
prim_ns	include/xfrd.h	/^	uint8_t prim_ns[MAXDOMAINLEN + 2];$/;"	m	struct:xfrd_soa
print_char	compat/snprintf.c	/^print_char(char** at, size_t* left, int* ret, int c,$/;"	f	file:
print_dec	compat/snprintf.c	/^print_dec(char* buf, int max, unsigned int value)$/;"	f	file:
print_dec_l	compat/snprintf.c	/^print_dec_l(char* buf, int max, unsigned long value)$/;"	f	file:
print_dec_ll	compat/snprintf.c	/^print_dec_ll(char* buf, int max, unsigned long long value)$/;"	f	file:
print_float	compat/snprintf.c	/^print_float(char* buf, int max, double value, int prec)$/;"	f	file:
print_float_g	compat/snprintf.c	/^print_float_g(char* buf, int max, double value, int prec)$/;"	f	file:
print_header	nsd/dbcreate.c	/^print_header(zone_type* zone, FILE* out, time_t* now, const char* logs)$/;"	f	file:
print_hex	compat/snprintf.c	/^print_hex(char* buf, int max, unsigned int value)$/;"	f	file:
print_hex_l	compat/snprintf.c	/^print_hex_l(char* buf, int max, unsigned long value)$/;"	f	file:
print_hex_ll	compat/snprintf.c	/^print_hex_ll(char* buf, int max, unsigned long long value)$/;"	f	file:
print_num	compat/snprintf.c	/^print_num(char** at, size_t* left, int* ret, int minw, int precision,$/;"	f	file:
print_num_d	compat/snprintf.c	/^print_num_d(char** at, size_t* left, int* ret, int value,$/;"	f	file:
print_num_f	compat/snprintf.c	/^print_num_f(char** at, size_t* left, int* ret, double value,$/;"	f	file:
print_num_g	compat/snprintf.c	/^print_num_g(char** at, size_t* left, int* ret, double value,$/;"	f	file:
print_num_ld	compat/snprintf.c	/^print_num_ld(char** at, size_t* left, int* ret, long value,$/;"	f	file:
print_num_lld	compat/snprintf.c	/^print_num_lld(char** at, size_t* left, int* ret, long long value,$/;"	f	file:
print_num_llp	compat/snprintf.c	/^print_num_llp(char** at, size_t* left, int* ret, void* value,$/;"	f	file:
print_num_llu	compat/snprintf.c	/^print_num_llu(char** at, size_t* left, int* ret, unsigned long long value,$/;"	f	file:
print_num_llx	compat/snprintf.c	/^print_num_llx(char** at, size_t* left, int* ret, unsigned long long value,$/;"	f	file:
print_num_lu	compat/snprintf.c	/^print_num_lu(char** at, size_t* left, int* ret, unsigned long value,$/;"	f	file:
print_num_lx	compat/snprintf.c	/^print_num_lx(char** at, size_t* left, int* ret, unsigned long value,$/;"	f	file:
print_num_u	compat/snprintf.c	/^print_num_u(char** at, size_t* left, int* ret, unsigned int value,$/;"	f	file:
print_num_x	compat/snprintf.c	/^print_num_x(char** at, size_t* left, int* ret, unsigned int value,$/;"	f	file:
print_pad	compat/snprintf.c	/^print_pad(char** at, size_t* left, int* ret, char p, int num)$/;"	f	file:
print_rdata	nsd/rdata.c	/^print_rdata(buffer_type *output, rrtype_descriptor_type *descriptor,$/;"	f
print_remainder	compat/snprintf.c	/^print_remainder(char* buf, int max, double r, int prec)$/;"	f	file:
print_rr	nsd/util.c	/^print_rr(FILE *out,$/;"	f
print_rrs	nsd/dbcreate.c	/^print_rrs(FILE* out, struct zone* zone)$/;"	f	file:
print_str	compat/snprintf.c	/^print_str(char** at, size_t* left, int* ret, char* s,$/;"	f	file:
prior_mac_data	include/tsig.h	/^	uint8_t             *prior_mac_data;$/;"	m	struct:tsig_record
prior_mac_size	include/tsig.h	/^	size_t               prior_mac_size;$/;"	m	struct:tsig_record
process_edns	nsd/query.c	/^process_edns(nsd_type* nsd, struct query *q)$/;"	f	file:
process_end	nsd/nsec3.c	/^process_end(rbtree_t* tree, uint8_t* hash, rbnode_t** p,$/;"	f	file:
process_first	nsd/nsec3.c	/^process_first(rbtree_t* tree, uint8_t* hash, rbnode_t** p,$/;"	f	file:
process_prehash_domain	nsd/nsec3.c	/^process_prehash_domain(domain_type* domain, zone_type* zone)$/;"	f	file:
process_query_section	nsd/query.c	/^process_query_section(query_type *query)$/;"	f	file:
process_range	nsd/nsec3.c	/^process_range(zone_type* zone, domain_type* start,$/;"	f	file:
process_rr	include/zonec.c	/^process_rr(void)$/;"	f
process_rr	nsd/zonec.c	/^process_rr(void)$/;"	f
provide_xfr	include/options.h	/^	acl_options_t* provide_xfr;$/;"	m	struct:pattern_options
pselect	compat/pselect.c	/^pselect (int n,$/;"	f
ptrlist	include/udb.h	/^	udb_void ptrlist;$/;"	m	struct:udb_chunk_d
ptrlist	include/udb.h	/^	udb_void ptrlist;$/;"	m	struct:udb_xl_chunk_d
push_parser_state	nsd/zlexer.c	/^push_parser_state(FILE *input)$/;"	f	file:
qclass	include/query.h	/^	uint16_t qclass;$/;"	m	struct:query
qid_generate	nsd/util.c	/^qid_generate(void)$/;"	f
qname	include/query.h	/^	const dname_type *qname;$/;"	m	struct:query
qtype	include/query.h	/^	uint16_t qtype;$/;"	m	struct:query
queries	nsd/fdns.c	/^static struct query *queries[MAX_CORES];$/;"	v	typeref:struct:query	file:
query	include/query.h	/^struct query {$/;"	s
query_add_compression_domain	nsd/query.c	/^query_add_compression_domain(struct query *q, domain_type *domain, uint16_t offset)$/;"	f
query_add_optional	nsd/query.c	/^query_add_optional(query_type *q, nsd_type *nsd)$/;"	f
query_addtxt	nsd/query.c	/^query_addtxt(struct query  *q,$/;"	f	file:
query_cleanup	nsd/query.c	/^query_cleanup(void *data)$/;"	f	file:
query_clear_compression_tables	nsd/query.c	/^query_clear_compression_tables(struct query *q)$/;"	f
query_clear_dname_offsets	nsd/query.c	/^query_clear_dname_offsets(struct query *q, size_t max_offset)$/;"	f
query_create	nsd/query.c	/^query_create(region_type *region, uint16_t *compressed_dname_offsets,$/;"	f
query_error	nsd/query.c	/^query_error (struct query *q, nsd_rc_type rcode)$/;"	f
query_formerr	nsd/query.c	/^query_formerr (struct query *query)$/;"	f	file:
query_get_dname_offset	include/query.h	/^uint16_t query_get_dname_offset(struct query *query, domain_type *domain)$/;"	f
query_get_tempdomain	nsd/query.c	/^query_get_tempdomain(struct query *q)$/;"	f	file:
query_id	include/xfrd.h	/^	uint16_t query_id;$/;"	m	struct:xfrd_zone
query_overflow	include/query.h	/^query_overflow(query_type *q)$/;"	f
query_overflow_nsid	include/query.h	/^query_overflow_nsid(query_type *q, uint16_t nsid_len)$/;"	f
query_prepare_response	nsd/query.c	/^query_prepare_response(query_type *q)$/;"	f
query_process	nsd/query.c	/^query_process(query_type *q, nsd_type *nsd)$/;"	f
query_put_dname_offset	nsd/query.c	/^query_put_dname_offset(struct query *q, domain_type *domain, uint16_t offset)$/;"	f
query_reset	nsd/query.c	/^query_reset(query_type *q, size_t maxlen, int is_tcp)$/;"	f
query_state	include/query.h	/^enum query_state {$/;"	g
query_state_type	include/query.h	/^typedef enum query_state query_state_type;$/;"	t	typeref:enum:query_state
query_synthesize_cname	nsd/query.c	/^query_synthesize_cname(struct query* q, struct answer* answer, const dname_type* from_name,$/;"	f
query_type	include/query.h	/^typedef struct query query_type;$/;"	t	typeref:struct:query
quotedstring	nsd/configlexer.c	1165;"	d	file:
quotedstring	nsd/zlexer.c	632;"	d	file:
radix_delete	nsd/radtree.c	/^void radix_delete(struct radtree* rt, struct radnode* n)$/;"	f
radix_find_less_equal	nsd/radtree.c	/^int radix_find_less_equal(struct radtree* rt, uint8_t* k, radstrlen_t len,$/;"	f
radix_find_prefix_node	nsd/radtree.c	/^static int radix_find_prefix_node(struct radtree* rt, uint8_t* k,$/;"	f	file:
radix_first	nsd/radtree.c	/^struct radnode* radix_first(struct radtree* rt)$/;"	f
radix_insert	nsd/radtree.c	/^struct radnode* radix_insert(struct radtree* rt, uint8_t* k, radstrlen_t len,$/;"	f
radix_last	nsd/radtree.c	/^struct radnode* radix_last(struct radtree* rt)$/;"	f
radix_next	nsd/radtree.c	/^struct radnode* radix_next(struct radnode* n)$/;"	f
radix_prev	nsd/radtree.c	/^struct radnode* radix_prev(struct radnode* n)$/;"	f
radix_search	nsd/radtree.c	/^struct radnode* radix_search(struct radtree* rt, uint8_t* k, radstrlen_t len)$/;"	f
radix_tree_clear	nsd/radtree.c	/^void radix_tree_clear(struct radtree* rt)$/;"	f
radix_tree_create	nsd/radtree.c	/^struct radtree* radix_tree_create(struct region* region)$/;"	f
radix_tree_delete	nsd/radtree.c	/^void radix_tree_delete(struct radtree* rt)$/;"	f
radix_tree_init	nsd/radtree.c	/^void radix_tree_init(struct radtree* rt)$/;"	f
radname_d2r	nsd/radtree.c	/^void radname_d2r(uint8_t* k, radstrlen_t* len, const uint8_t* dname,$/;"	f
radname_delete	nsd/radtree.c	/^radname_delete(struct radtree* rt, const uint8_t* d, size_t max)$/;"	f
radname_find_less_equal	nsd/radtree.c	/^int radname_find_less_equal(struct radtree* rt, const uint8_t* d, size_t max,$/;"	f
radname_insert	nsd/radtree.c	/^radname_insert(struct radtree* rt, const uint8_t* d, size_t max, void* elem)$/;"	f
radname_r2d	nsd/radtree.c	/^void radname_r2d(uint8_t* k, radstrlen_t len, uint8_t* dname, size_t* dlen)$/;"	f
radname_search	nsd/radtree.c	/^struct radnode* radname_search(struct radtree* rt, const uint8_t* d,$/;"	f
radnode	include/radtree.h	/^struct radnode {$/;"	s
radnode_array_clean_all	nsd/radtree.c	/^radnode_array_clean_all(struct region* region, struct radnode* n)$/;"	f	file:
radnode_array_clean_end	nsd/radtree.c	/^radnode_array_clean_end(struct region* region, struct radnode* n)$/;"	f	file:
radnode_array_clean_front	nsd/radtree.c	/^radnode_array_clean_front(struct region* region, struct radnode* n)$/;"	f	file:
radnode_array_grow	nsd/radtree.c	/^radnode_array_grow(struct region* region, struct radnode* n, unsigned want)$/;"	f	file:
radnode_array_reduce_if_needed	nsd/radtree.c	/^radnode_array_reduce_if_needed(struct region* region, struct radnode* n)$/;"	f	file:
radnode_array_space	nsd/radtree.c	/^radnode_array_space(struct region* region, struct radnode* n, uint8_t byte)$/;"	f	file:
radnode_cleanup	nsd/radtree.c	/^radnode_cleanup(struct radtree* rt, struct radnode* n)$/;"	f	file:
radnode_cleanup_leaf	nsd/radtree.c	/^radnode_cleanup_leaf(struct region* region, struct radnode* n,$/;"	f	file:
radnode_cleanup_onechild	nsd/radtree.c	/^radnode_cleanup_onechild(struct region* region, struct radnode* n,$/;"	f	file:
radnode_del_postorder	nsd/radtree.c	/^static void radnode_del_postorder(struct region* region, struct radnode* n)$/;"	f	file:
radnode_delete	nsd/radtree.c	/^static void radnode_delete(struct region* region, struct radnode* n)$/;"	f	file:
radnode_find_prev_from_idx	nsd/radtree.c	/^radnode_find_prev_from_idx(struct radnode* n, unsigned from)$/;"	f	file:
radnode_first_in_subtree	nsd/radtree.c	/^radnode_first_in_subtree(struct radnode* n)$/;"	f	file:
radnode_last_in_subtree	nsd/radtree.c	/^radnode_last_in_subtree(struct radnode* n)$/;"	f	file:
radnode_last_in_subtree_incl_self	nsd/radtree.c	/^radnode_last_in_subtree_incl_self(struct radnode* n)$/;"	f	file:
radsel	include/radtree.h	/^struct radsel {$/;"	s
radsel_prefix_remainder	nsd/radtree.c	/^radsel_prefix_remainder(struct region* region, radstrlen_t plen,$/;"	f	file:
radsel_split	nsd/radtree.c	/^radsel_split(struct region* region, struct radsel* r, uint8_t* k,$/;"	f	file:
radsel_str_create	nsd/radtree.c	/^radsel_str_create(struct region* region, struct radsel* r, uint8_t* k,$/;"	f	file:
radstrlen_t	include/radtree.h	/^typedef uint16_t radstrlen_t;$/;"	t
radtree	include/radtree.h	/^struct radtree {$/;"	s
ram_hash	include/udb.h	/^	udb_ptr** ram_hash;$/;"	m	struct:udb_base
ram_mask	include/udb.h	/^	int ram_mask;$/;"	m	struct:udb_base
ram_num	include/udb.h	/^	size_t ram_num;$/;"	m	struct:udb_base
ram_size	include/udb.h	/^	size_t ram_size;$/;"	m	struct:udb_base
random_generate	nsd/util.c	/^random_generate(int max)$/;"	f
range_mask	include/options.h	/^	union acl_addr_storage range_mask;$/;"	m	struct:acl_options	typeref:union:acl_options::acl_addr_storage
rangetype	include/options.h	/^	} rangetype;$/;"	m	struct:acl_options	typeref:enum:acl_options::__anon1
raninit	nsd/lookup3.c	/^static uint32_t raninit = 0xdeadbeef;$/;"	v	file:
rb_mark_free_segs	nsd/udb.c	/^rb_mark_free_segs(void* base, udb_void s, uint64_t m)$/;"	f	file:
rb_new	include/udb.h	/^	volatile udb_void rb_new;$/;"	m	struct:udb_glob_d
rb_old	include/udb.h	/^	volatile udb_void rb_old;$/;"	m	struct:udb_glob_d
rb_seg	include/udb.h	/^	volatile uint64_t rb_seg;$/;"	m	struct:udb_glob_d
rb_size	include/udb.h	/^	volatile uint64_t rb_size;$/;"	m	struct:udb_glob_d
rbnode_t	include/rbtree.h	/^struct rbnode_t {$/;"	s
rbnode_t	include/rbtree.h	/^typedef struct rbnode_t rbnode_t;$/;"	t	typeref:struct:rbnode_t
rbtree_create	nsd/rbtree.c	/^rbtree_create (region_type *region, int (*cmpf)(const void *, const void *))$/;"	f
rbtree_delete	nsd/rbtree.c	/^rbtree_delete(rbtree_t *rbtree, const void *key)$/;"	f
rbtree_delete_fixup	nsd/rbtree.c	/^static void rbtree_delete_fixup(rbtree_t* rbtree, rbnode_t* child, rbnode_t* child_parent)$/;"	f	file:
rbtree_find_less_equal	nsd/rbtree.c	/^rbtree_find_less_equal(rbtree_t *rbtree, const void *key, rbnode_t **result)$/;"	f
rbtree_first	nsd/rbtree.c	/^rbtree_first (rbtree_t *rbtree)$/;"	f
rbtree_insert	nsd/rbtree.c	/^rbtree_insert (rbtree_t *rbtree, rbnode_t *data)$/;"	f
rbtree_insert_fixup	nsd/rbtree.c	/^rbtree_insert_fixup(rbtree_t *rbtree, rbnode_t *node)$/;"	f	file:
rbtree_last	nsd/rbtree.c	/^rbtree_last (rbtree_t *rbtree)$/;"	f
rbtree_next	nsd/rbtree.c	/^rbtree_next (rbnode_t *node)$/;"	f
rbtree_null_node	nsd/rbtree.c	/^rbnode_t	rbtree_null_node = {$/;"	v
rbtree_previous	nsd/rbtree.c	/^rbtree_previous(rbnode_t *node)$/;"	f
rbtree_rotate_left	nsd/rbtree.c	/^rbtree_rotate_left(rbtree_t *rbtree, rbnode_t *node)$/;"	f	file:
rbtree_rotate_right	nsd/rbtree.c	/^rbtree_rotate_right(rbtree_t *rbtree, rbnode_t *node)$/;"	f	file:
rbtree_search	nsd/rbtree.c	/^rbtree_search (rbtree_t *rbtree, const void *key)$/;"	f
rbtree_strcmp	nsd/options.c	/^rbtree_strcmp(const void* p1, const void* p2)$/;"	f	file:
rbtree_t	include/rbtree.h	/^struct rbtree_t {$/;"	s
rbtree_t	include/rbtree.h	/^typedef struct rbtree_t rbtree_t;$/;"	t	typeref:struct:rbtree_t
rcode2str	nsd/util.c	/^rcode2str(int rc)$/;"	f
rdata_a_to_string	nsd/rdata.c	/^rdata_a_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_aaaa_to_string	nsd/rdata.c	/^rdata_aaaa_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_algorithm_to_string	nsd/rdata.c	/^rdata_algorithm_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_apl_to_string	nsd/rdata.c	/^rdata_apl_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_atom	include/namedb.h	/^union rdata_atom$/;"	u
rdata_atom_data	include/namedb.h	/^rdata_atom_data(rdata_atom_type atom)$/;"	f
rdata_atom_domain	include/namedb.h	/^rdata_atom_domain(rdata_atom_type atom)$/;"	f
rdata_atom_is_domain	include/namedb.h	/^rdata_atom_is_domain(uint16_t type, size_t index)$/;"	f
rdata_atom_is_literal_domain	include/namedb.h	/^rdata_atom_is_literal_domain(uint16_t type, size_t index)$/;"	f
rdata_atom_size	include/namedb.h	/^rdata_atom_size(rdata_atom_type atom)$/;"	f
rdata_atom_to_string	nsd/rdata.c	/^rdata_atom_to_string(buffer_type *output, rdata_zoneformat_type type,$/;"	f
rdata_atom_type	include/namedb.h	/^typedef union rdata_atom rdata_atom_type;$/;"	t	typeref:union:rdata_atom
rdata_atom_wireformat_type	include/namedb.h	/^rdata_atom_wireformat_type(uint16_t type, size_t index)$/;"	f
rdata_atoms_to_unknown_string	nsd/rdata.c	/^rdata_atoms_to_unknown_string(buffer_type *output,$/;"	f
rdata_base32_to_string	nsd/rdata.c	/^rdata_base32_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_base64_to_string	nsd/rdata.c	/^rdata_base64_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_byte_to_string	nsd/rdata.c	/^rdata_byte_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_certificate_type_to_string	nsd/rdata.c	/^rdata_certificate_type_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_count	include/namedb.h	/^	uint16_t         rdata_count;$/;"	m	struct:rr
rdata_count	include/xfrd.h	/^	uint16_t rdata_count; \/* = 7 *\/$/;"	m	struct:xfrd_soa
rdata_dname_to_string	nsd/rdata.c	/^rdata_dname_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_dns_name_to_string	nsd/rdata.c	/^rdata_dns_name_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_eui48_to_string	nsd/rdata.c	/^rdata_eui48_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_eui64_to_string	nsd/rdata.c	/^rdata_eui64_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_hex_to_string	nsd/rdata.c	/^rdata_hex_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_hexlen_to_string	nsd/rdata.c	/^rdata_hexlen_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_ilnp64_to_string	nsd/rdata.c	/^rdata_ilnp64_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_ipsecgateway_to_string	nsd/rdata.c	/^rdata_ipsecgateway_to_string(buffer_type *output, rdata_atom_type rdata, rr_type* rr)$/;"	f	file:
rdata_long_text_to_string	nsd/rdata.c	/^rdata_long_text_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_long_to_string	nsd/rdata.c	/^rdata_long_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_maximum_wireformat_size	nsd/rdata.c	/^rdata_maximum_wireformat_size(rrtype_descriptor_type *descriptor,$/;"	f
rdata_none	include/edns.h	/^	char rdata_none[OPT_RDATA];$/;"	m	struct:edns_data
rdata_nsap_to_string	nsd/rdata.c	/^rdata_nsap_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_nsec_to_string	nsd/rdata.c	/^rdata_nsec_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_nsid	include/edns.h	/^	char rdata_nsid[OPT_RDATA];$/;"	m	struct:edns_data
rdata_nxt_to_string	nsd/rdata.c	/^rdata_nxt_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_period_to_string	nsd/rdata.c	/^rdata_period_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_rrtype_to_string	nsd/rdata.c	/^rdata_rrtype_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_services_to_string	nsd/rdata.c	/^rdata_services_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_short_to_string	nsd/rdata.c	/^rdata_short_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_tag_to_string	nsd/rdata.c	/^rdata_tag_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_text_to_string	nsd/rdata.c	/^rdata_text_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_texts_to_string	nsd/rdata.c	/^rdata_texts_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_time_to_string	nsd/rdata.c	/^rdata_time_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_to_string_table	nsd/rdata.c	/^static rdata_to_string_type rdata_to_string_table[RDATA_ZF_UNKNOWN + 1] = {$/;"	v	file:
rdata_to_string_type	nsd/rdata.c	/^typedef int (*rdata_to_string_type)(buffer_type *output,$/;"	t	file:
rdata_unknown_to_string	nsd/rdata.c	/^rdata_unknown_to_string(buffer_type *output, rdata_atom_type rdata,$/;"	f	file:
rdata_wireformat	include/dns.h	/^enum rdata_wireformat$/;"	g
rdata_wireformat_to_rdata_atoms	nsd/rdata.c	/^rdata_wireformat_to_rdata_atoms(region_type *region,$/;"	f
rdata_wireformat_type	include/dns.h	/^typedef enum rdata_wireformat rdata_wireformat_type;$/;"	t	typeref:enum:rdata_wireformat
rdata_zoneformat	include/dns.h	/^enum rdata_zoneformat$/;"	g
rdata_zoneformat_type	include/dns.h	/^typedef enum rdata_zoneformat rdata_zoneformat_type;$/;"	t	typeref:enum:rdata_zoneformat
rdatas	include/namedb.h	/^	rdata_atom_type* rdatas;$/;"	m	struct:rr
rdatas_equal	nsd/difffile.c	/^rdatas_equal(rdata_atom_type *a, rdata_atom_type *b, int num, uint16_t type,$/;"	f	file:
read_node_elem	nsd/dbaccess.c	/^static void read_node_elem(udb_base* udb, namedb_type* db, $/;"	f	file:
read_rr	nsd/dbaccess.c	/^read_rr(namedb_type* db, rr_type* rr, udb_ptr* urr, domain_type* domain)$/;"	f	file:
read_rrset	nsd/dbaccess.c	/^read_rrset(udb_base* udb, namedb_type* db, zone_type* zone,$/;"	f	file:
read_uint16	include/util.h	/^read_uint16(const void *src)$/;"	f
read_uint32	include/util.h	/^read_uint32(const void *src)$/;"	f
read_zone	nsd/dbaccess.c	/^read_zone(udb_base* udb, namedb_type* db, nsd_options_t* opt,$/;"	f	file:
read_zone_data	nsd/dbaccess.c	/^read_zone_data(udb_base* udb, namedb_type* db, region_type* dname_region,$/;"	f	file:
read_zone_recurse	nsd/dbaccess.c	/^static void read_zone_recurse(udb_base* udb, namedb_type* db,$/;"	f	file:
read_zones	nsd/dbaccess.c	/^read_zones(udb_base* udb, namedb_type* db, nsd_options_t* opt,$/;"	f	file:
reads	include/mini_event.h	/^		reads, $/;"	m	struct:event_base
ready	include/mini_event.h	/^		ready, $/;"	m	struct:event_base
recv_ring	main.c	/^struct rte_ring *recv_ring;$/;"	v	typeref:struct:rte_ring
recycle_bin	nsd/region-allocator.c	/^	struct recycle_elem** recycle_bin;$/;"	m	struct:region	typeref:struct:region::recycle_elem	file:
recycle_elem	nsd/region-allocator.c	/^struct recycle_elem {$/;"	s	file:
recycle_size	nsd/region-allocator.c	/^	size_t		recycle_size;$/;"	m	struct:region	file:
refresh	include/xfrd.h	/^	uint32_t refresh;$/;"	m	struct:xfrd_soa
regen_data	nsd/udb.c	/^regen_data(void* base, udb_void c, int exp, udb_alloc_d* regen)$/;"	f	file:
regen_free	nsd/udb.c	/^regen_free(void* base, udb_void c, int exp, udb_alloc_d* regen)$/;"	f	file:
regen_its_ptrs	nsd/udb.c	/^regen_its_ptrs(void* base, udb_base* udb, udb_chunk_d* atp,$/;"	f	file:
regen_ptrlist	nsd/udb.c	/^regen_ptrlist(void* base, udb_base* udb, udb_alloc* alloc,$/;"	f	file:
regen_relptr_func	nsd/udb.c	/^regen_relptr_func(void* base, udb_rel_ptr* rp, void* arg)$/;"	f	file:
regen_xl	nsd/udb.c	/^regen_xl(void* base, udb_void c, udb_alloc_d* regen)$/;"	f	file:
region	include/mini_event.h	/^	struct region* region;$/;"	m	struct:event_base	typeref:struct:event_base::region
region	include/namedb.h	/^	region_type*       region;$/;"	m	struct:namedb
region	include/namedb.h	/^	region_type* region;$/;"	m	struct:domain_table
region	include/netio.h	/^	region_type             *region;$/;"	m	struct:netio
region	include/options.h	/^	region_type* region;$/;"	m	struct:nsd_options
region	include/query.h	/^	region_type *region;$/;"	m	struct:query
region	include/radtree.h	/^	struct region* region;$/;"	m	struct:radtree	typeref:struct:radtree::region
region	include/rbtree.h	/^	region_type *region;$/;"	m	struct:rbtree_t
region	include/xfrd.h	/^	struct region* region;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::region
region	include/zonec.h	/^	region_type *region;	\/* Allocate for parser lifetime data.  *\/$/;"	m	struct:zparser
region	nsd/region-allocator.c	/^struct region$/;"	s	file:
region_add_cleanup	nsd/region-allocator.c	/^region_add_cleanup(region_type *region, void (*action)(void *), void *data)$/;"	f
region_alloc	nsd/region-allocator.c	/^region_alloc(region_type *region, size_t size)$/;"	f
region_alloc_init	nsd/region-allocator.c	/^region_alloc_init(region_type *region, const void *init, size_t size)$/;"	f
region_alloc_zero	nsd/region-allocator.c	/^region_alloc_zero(region_type *region, size_t size)$/;"	f
region_create	nsd/region-allocator.c	/^region_create(void *(*allocator)(size_t size),$/;"	f
region_create_custom	nsd/region-allocator.c	/^region_type *region_create_custom(void *(*allocator)(size_t),$/;"	f
region_destroy	nsd/region-allocator.c	/^region_destroy(region_type *region)$/;"	f
region_dump_stats	nsd/region-allocator.c	/^region_dump_stats(region_type *region, FILE *out)$/;"	f
region_free_all	nsd/region-allocator.c	/^region_free_all(region_type *region)$/;"	f
region_get_mem	nsd/region-allocator.c	/^size_t region_get_mem(region_type* region)$/;"	f
region_get_mem_unused	nsd/region-allocator.c	/^size_t region_get_mem_unused(region_type* region)$/;"	f
region_get_recycle_size	nsd/region-allocator.c	/^size_t region_get_recycle_size(region_type* region)$/;"	f
region_log_stats	nsd/region-allocator.c	/^region_log_stats(region_type *region)$/;"	f
region_recycle	nsd/region-allocator.c	/^region_recycle(region_type *region, void *block, size_t size)$/;"	f
region_remove_cleanup	nsd/region-allocator.c	/^region_remove_cleanup(region_type *region, void (*action)(void *), void *data)$/;"	f
region_strdup	nsd/region-allocator.c	/^region_strdup(region_type *region, const char *string)$/;"	f
region_type	include/region-allocator.h	/^typedef struct region region_type;$/;"	t	typeref:struct:region
reload_added	include/xfrd.h	/^	int reload_added;$/;"	m	struct:xfrd_state
reload_cmd_last_sent	include/xfrd.h	/^	time_t reload_cmd_last_sent;$/;"	m	struct:xfrd_state
reload_handler	include/xfrd.h	/^	struct event reload_handler;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::event
reload_pid	include/xfrd.h	/^	pid_t reload_pid;$/;"	m	struct:xfrd_state
reload_timeout	include/xfrd.h	/^	struct timeval reload_timeout;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::timeval
replace_str	nsd/options.c	/^replace_str(char* str, size_t len, const char* one, const char* two)$/;"	f
request_xfr	include/options.h	/^	acl_options_t* request_xfr;$/;"	m	struct:pattern_options
reserved_space	include/query.h	/^	size_t reserved_space;$/;"	m	struct:query
response_count	include/tsig.h	/^	size_t               response_count;$/;"	m	struct:tsig_record
result_data	nsd/udbradtree.c	/^uint64_t* result_data = NULL;$/;"	v
ret_self_or_prev	nsd/radtree.c	/^static int ret_self_or_prev(struct radnode* n, struct radnode** result)$/;"	f	file:
retry	include/xfrd.h	/^	uint32_t retry;$/;"	m	struct:xfrd_soa
right	include/rbtree.h	/^	rbnode_t   *right;$/;"	m	struct:rbnode_t
rnode	include/namedb.h	/^	struct radnode* rnode;$/;"	m	struct:domain	typeref:struct:domain::radnode
root	include/namedb.h	/^	domain_type* root;$/;"	m	struct:domain_table
root	include/radtree.h	/^	struct radnode* root;$/;"	m	struct:radtree	typeref:struct:radtree::radnode
root	include/rbtree.h	/^	rbnode_t    *root;$/;"	m	struct:rbtree_t
root	include/udbradtree.h	/^	struct udb_rel_ptr root;$/;"	m	struct:udb_radtree_d	typeref:struct:udb_radtree_d::udb_rel_ptr
rot	nsd/lookup3.c	107;"	d	file:
round_num	include/xfrd.h	/^	int round_num;$/;"	m	struct:xfrd_zone
rpl_malloc	compat/malloc.c	/^rpl_malloc (size_t n)$/;"	f
rr	include/namedb.h	/^struct rr {$/;"	s
rr_count	include/namedb.h	/^	uint16_t    rr_count;$/;"	m	struct:rrset
rr_count	include/udbzone.h	/^	uint64_t rr_count;$/;"	m	struct:zone_d
rr_create	nsd/udbzone.c	/^rr_create(udb_base* udb, uint16_t t, uint16_t k, uint32_t ttl,$/;"	f	file:
rr_d	include/udbzone.h	/^struct rr_d {$/;"	s
rr_delete	nsd/udbzone.c	/^rr_delete(udb_base* udb, udb_ptr* rr)$/;"	f	file:
rr_lower_usage	nsd/difffile.c	/^rr_lower_usage(namedb_type* db, rr_type* rr)$/;"	f	file:
rr_marshal_rdata	nsd/dbcreate.c	/^rr_marshal_rdata(rr_type* rr, uint8_t* rdata, size_t sz)$/;"	f
rr_match	nsd/udbzone.c	/^rr_match(udb_ptr* rr, uint16_t t, uint16_t k, uint8_t* rdata, size_t rdatalen)$/;"	f	file:
rr_region	include/tsig.h	/^	region_type      *rr_region;$/;"	m	struct:tsig_record
rr_region	include/zonec.h	/^	region_type *rr_region;	\/* Allocate RR lifetime data.  *\/$/;"	m	struct:zparser
rr_rrsig_type_covered	nsd/namedb.c	/^rr_rrsig_type_covered(rr_type* rr)$/;"	f
rr_search	nsd/udbzone.c	/^rr_search(udb_base* udb, udb_ptr* rrset, uint16_t t, uint16_t k,$/;"	f	file:
rr_section	include/dns.h	/^enum rr_section {$/;"	g
rr_section	nsd/query.c	/^    rr_section_type rr_section;$/;"	m	struct:additional_rr_types	file:
rr_section_type	include/dns.h	/^typedef enum rr_section rr_section_type;$/;"	t	typeref:enum:rr_section
rr_type	include/namedb.h	/^typedef struct rr rr_type;$/;"	t	typeref:struct:rr
rr_type	nsd/query.c	/^    uint16_t        rr_type;$/;"	m	struct:additional_rr_types	file:
rrclass_from_string	nsd/dns.c	/^rrclass_from_string(const char *name)$/;"	f
rrclass_to_string	nsd/dns.c	/^rrclass_to_string(uint16_t rrclass)$/;"	f
rrl_ip6	include/rrl.h	/^	rrl_ip6			= 0x8000$/;"	e	enum:rrl_type
rrl_ipv4_prefix_length	include/options.h	/^	size_t rrl_ipv4_prefix_length;$/;"	m	struct:nsd_options
rrl_ipv6_prefix_length	include/options.h	/^	size_t rrl_ipv6_prefix_length;$/;"	m	struct:nsd_options
rrl_ratelimit	include/options.h	/^	size_t rrl_ratelimit;$/;"	m	struct:nsd_options
rrl_size	include/options.h	/^	size_t rrl_size;$/;"	m	struct:nsd_options
rrl_slip	include/options.h	/^	size_t rrl_slip;$/;"	m	struct:nsd_options
rrl_type	include/rrl.h	/^enum rrl_type {$/;"	g
rrl_type_all	include/rrl.h	/^	rrl_type_all		= 0x1ff,$/;"	e	enum:rrl_type
rrl_type_any	include/rrl.h	/^	rrl_type_any		= 0x08,$/;"	e	enum:rrl_type
rrl_type_dnskey	include/rrl.h	/^	rrl_type_dnskey		= 0x40,$/;"	e	enum:rrl_type
rrl_type_error	include/rrl.h	/^	rrl_type_error		= 0x02,$/;"	e	enum:rrl_type
rrl_type_nodata	include/rrl.h	/^	rrl_type_nodata		= 0x20,$/;"	e	enum:rrl_type
rrl_type_nxdomain	include/rrl.h	/^	rrl_type_nxdomain	= 0x01,$/;"	e	enum:rrl_type
rrl_type_positive	include/rrl.h	/^	rrl_type_positive	= 0x80,$/;"	e	enum:rrl_type
rrl_type_referral	include/rrl.h	/^	rrl_type_referral	= 0x04,$/;"	e	enum:rrl_type
rrl_type_rrsig	include/rrl.h	/^	rrl_type_rrsig		= 0x100,$/;"	e	enum:rrl_type
rrl_type_wildcard	include/rrl.h	/^	rrl_type_wildcard	= 0x10,$/;"	e	enum:rrl_type
rrl_whitelist	include/options.h	/^	uint16_t rrl_whitelist; \/* bitmap with rrl types *\/$/;"	m	struct:pattern_options
rrl_whitelist_ratelimit	include/options.h	/^	size_t rrl_whitelist_ratelimit;$/;"	m	struct:nsd_options
rrs	include/namedb.h	/^	rr_type*    rrs;$/;"	m	struct:rrset
rrs	include/udbzone.h	/^	udb_rel_ptr rrs;$/;"	m	struct:rrset_d
rrset	include/namedb.h	/^struct rrset$/;"	s
rrset_add_rr	nsd/udbzone.c	/^rrset_add_rr(udb_base* udb, udb_ptr* rrset, uint16_t t, uint16_t k,$/;"	f	file:
rrset_count	include/answer.h	/^	size_t rrset_count;$/;"	m	struct:answer
rrset_count	include/udbzone.h	/^	uint64_t rrset_count;$/;"	m	struct:zone_d
rrset_create	nsd/udbzone.c	/^rrset_create(udb_base* udb, udb_ptr* domain, uint16_t t, udb_ptr* res)$/;"	f	file:
rrset_d	include/udbzone.h	/^struct rrset_d {$/;"	s
rrset_del_rr	nsd/udbzone.c	/^rrset_del_rr(udb_base* udb, udb_ptr* rrset, uint16_t t, uint16_t k,$/;"	f	file:
rrset_delete	nsd/difffile.c	/^rrset_delete(namedb_type* db, domain_type* domain, rrset_type* rrset)$/;"	f	file:
rrset_delete	nsd/udbzone.c	/^rrset_delete(udb_base* udb, udb_ptr* rrset)$/;"	f	file:
rrset_find_or_create	nsd/udbzone.c	/^rrset_find_or_create(udb_base* udb, udb_ptr* domain, uint16_t t, udb_ptr* res)$/;"	f	file:
rrset_lower_usage	nsd/difffile.c	/^rrset_lower_usage(namedb_type* db, rrset_type* rrset)$/;"	f	file:
rrset_rrclass	include/namedb.h	/^rrset_rrclass(rrset_type* rrset)$/;"	f
rrset_rrtype	include/namedb.h	/^rrset_rrtype(rrset_type* rrset)$/;"	f
rrset_type	include/namedb.h	/^typedef struct rrset rrset_type;$/;"	t	typeref:struct:rrset
rrsets	include/answer.h	/^	rrset_type *rrsets[MAXRRSPP];$/;"	m	struct:answer
rrsets	include/namedb.h	/^	rrset_type* rrsets;$/;"	m	struct:domain
rrsets	include/udbzone.h	/^	udb_rel_ptr rrsets;$/;"	m	struct:domain_d
rrtype_descriptor	include/dns.h	/^struct rrtype_descriptor$/;"	s
rrtype_descriptor_by_name	nsd/dns.c	/^rrtype_descriptor_by_name(const char *name)$/;"	f
rrtype_descriptor_by_type	nsd/dns.c	/^rrtype_descriptor_by_type(uint16_t type)$/;"	f
rrtype_descriptor_type	include/dns.h	/^typedef struct rrtype_descriptor rrtype_descriptor_type;$/;"	t	typeref:struct:rrtype_descriptor
rrtype_descriptors	nsd/dns.c	/^static rrtype_descriptor_type rrtype_descriptors[(RRTYPE_DESCRIPTORS_LENGTH+1)] = {$/;"	v	file:
rrtype_from_string	nsd/dns.c	/^rrtype_from_string(const char *name)$/;"	f
rrtype_to_string	nsd/dns.c	/^rrtype_to_string(uint16_t rrtype)$/;"	f
rrtype_to_token	nsd/zlexer.c	/^rrtype_to_token(const char *word, uint16_t *type) $/;"	f	file:
rt_additional_rr_types	nsd/query.c	/^struct additional_rr_types rt_additional_rr_types[] = {$/;"	v	typeref:struct:additional_rr_types
s6_addr	compat/fake-rfc2553.h	/^	uint8_t	s6_addr[16];$/;"	m	struct:in6_addr
secret	include/options.h	/^	char* secret;$/;"	m	struct:key_options
section	include/answer.h	/^	rr_section_type section[MAXRRSPP];$/;"	m	struct:answer
select_nsec3_param	nsd/udbzone.c	/^select_nsec3_param(udb_base* udb, udb_ptr* zone, udb_ptr* rrset)$/;"	f	file:
serial	include/xfrd.h	/^	uint32_t serial;$/;"	m	struct:xfrd_soa
server_cert_file	include/options.h	/^	char* server_cert_file;$/;"	m	struct:nsd_options
server_count	include/options.h	/^	int server_count;$/;"	m	struct:nsd_options
server_key_file	include/options.h	/^	char* server_key_file;$/;"	m	struct:nsd_options
server_settings_seen	include/options.h	/^	int server_settings_seen;$/;"	m	struct:config_parser_state
set_bit	nsd/util.c	/^set_bit(uint8_t bits[], size_t index)$/;"	f
set_bitnsec	include/zonec.c	/^set_bitnsec(uint8_t bits[NSEC_WINDOW_COUNT][NSEC_WINDOW_BITS_SIZE],$/;"	f
set_bitnsec	nsd/zonec.c	/^set_bitnsec(uint8_t bits[NSEC_WINDOW_COUNT][NSEC_WINDOW_BITS_SIZE],$/;"	f
set_previous_owner	nsd/util.c	/^set_previous_owner(struct state_pretty_rr *state, const dname_type *dname)$/;"	f	file:
setup_notify_active	nsd/xfrd-notify.c	/^setup_notify_active(struct notify_zone_t* zone)$/;"	f	file:
short	nsd/configparser.c	327;"	d	file:
short	nsd/zparser.c	370;"	d	file:
short_name	include/tsig.h	/^	const char *short_name;$/;"	m	struct:tsig_algorithm
short_name	include/tsig.h	/^	const char* short_name;$/;"	m	struct:tsig_lookup_struct_table
shutdown	include/xfrd.h	/^	uint8_t shutdown;$/;"	m	struct:xfrd_state
signal_set	include/mini_event.h	173;"	d
signals	include/mini_event.h	/^	struct event** signals;$/;"	m	struct:event_base	typeref:struct:event_base::event
signed_time_fudge	include/tsig.h	/^	uint16_t          signed_time_fudge;$/;"	m	struct:tsig_record
signed_time_high	include/tsig.h	/^	uint16_t          signed_time_high;$/;"	m	struct:tsig_record
signed_time_low	include/tsig.h	/^	uint32_t          signed_time_low;$/;"	m	struct:tsig_record
sin6_addr	compat/fake-rfc2553.h	/^	struct in6_addr	sin6_addr;$/;"	m	struct:sockaddr_in6	typeref:struct:sockaddr_in6::in6_addr
sin6_family	compat/fake-rfc2553.h	/^	unsigned short	sin6_family;$/;"	m	struct:sockaddr_in6
sin6_flowinfo	compat/fake-rfc2553.h	/^	uint32_t	sin6_flowinfo;$/;"	m	struct:sockaddr_in6
sin6_port	compat/fake-rfc2553.h	/^	uint16_t	sin6_port;$/;"	m	struct:sockaddr_in6
size	include/difffile.h	/^	uint32_t size; \/* size of this struct *\/$/;"	m	struct:task_list_d
size	include/tsig.h	/^	size_t            size;$/;"	m	struct:tsig_key
size	include/udb.h	/^	uint64_t size;$/;"	m	struct:udb_xl_chunk_d
size_of_lookup	nsd/udbradtree.c	/^static size_t size_of_lookup(udb_ptr* node)$/;"	f	file:
size_of_lookup_ext	nsd/udbradtree.c	/^size_t size_of_lookup_ext(udb_ptr* lookup)$/;"	f
size_of_lookup_needed	nsd/udbradtree.c	/^static size_t size_of_lookup_needed(uint16_t capacity, udb_radstrlen_t str_cap)$/;"	f	file:
size_of_radarray	nsd/udbradtree.c	/^static size_t size_of_radarray(struct udb_radarray_d* a)$/;"	f	file:
slave_process_packet	main.c	/^slave_process_packet(__attribute__((unused)) unsigned lcore_id, struct rte_mbuf *pkt) {$/;"	f	file:
small_objects	nsd/region-allocator.c	/^	size_t        small_objects;$/;"	m	struct:region	file:
snprintf	compat/snprintf.c	/^int snprintf(char* str, size_t size, const char* format, ...)$/;"	f
snprintf	compat/snprintf.c	49;"	d	file:
snprintf	compat/snprintf.c	836;"	d	file:
soa_disk	include/xfrd.h	/^	xfrd_soa_t soa_disk;$/;"	m	struct:xfrd_zone
soa_disk_acquired	include/xfrd.h	/^	time_t soa_disk_acquired;$/;"	m	struct:xfrd_zone
soa_notified	include/xfrd.h	/^	xfrd_soa_t soa_notified;$/;"	m	struct:xfrd_zone
soa_notified_acquired	include/xfrd.h	/^	time_t soa_notified_acquired;$/;"	m	struct:xfrd_zone
soa_nsd	include/xfrd.h	/^	xfrd_soa_t soa_nsd;$/;"	m	struct:xfrd_zone
soa_nsd_acquired	include/xfrd.h	/^	time_t soa_nsd_acquired;$/;"	m	struct:xfrd_zone
soa_nx_rrset	include/namedb.h	/^	rrset_type*  soa_nx_rrset; \/* see bug #103 *\/$/;"	m	struct:zone
soa_rrset	include/namedb.h	/^	rrset_type*  soa_rrset;$/;"	m	struct:zone
sockaddr_in6	compat/fake-rfc2553.h	/^struct sockaddr_in6 {$/;"	s
sockaddr_storage	compat/fake-rfc2553.h	/^struct sockaddr_storage {$/;"	s
spool_str	compat/snprintf.c	/^spool_str(char** at, size_t* left, int* ret, const char* buf, int len)$/;"	f	file:
spool_str_rev	compat/snprintf.c	/^spool_str_rev(char** at, size_t* left, int* ret, const char* buf, int len)$/;"	f	file:
ss_family	compat/fake-rfc2553.h	58;"	d
ss_sa	compat/fake-rfc2553.h	/^	struct sockaddr	ss_sa;$/;"	m	struct:sockaddr_storage	typeref:struct:sockaddr_storage::sockaddr
startzonec	include/zonec.c	/^static time_t startzonec = 0;$/;"	v	file:
startzonec	nsd/zonec.c	/^static time_t startzonec = 0;$/;"	v	file:
stat_alloc	include/udb.h	/^	uint64_t stat_alloc;$/;"	m	struct:udb_alloc_d
stat_data	include/udb.h	/^	uint64_t stat_data;$/;"	m	struct:udb_alloc_d
stat_free	include/udb.h	/^	uint64_t stat_free;$/;"	m	struct:udb_alloc_d
state	include/xfrd.h	/^	} state;$/;"	m	struct:xfrd_zone	typeref:enum:xfrd_zone::xfrd_zone_state
state_pretty_rr	include/util.h	/^struct state_pretty_rr {$/;"	s
statistics	include/options.h	/^	int statistics;$/;"	m	struct:nsd_options
status	include/edns.h	/^	edns_status_type status;$/;"	m	struct:edns_record
status	include/tsig.h	/^	tsig_status_type     status;$/;"	m	struct:tsig_record
str	include/configparser.h	/^	char*	str;$/;"	m	union:YYSTYPE
str	include/radtree.h	/^	uint8_t* str;$/;"	m	struct:radsel
str	include/zonec.h	/^    char    *str;		\/* holds the data *\/$/;"	m	struct:lex_data
str	nsd/configparser.c	/^	char*	str;$/;"	m	union:YYSTYPE	file:
str2int	compat/strptime.c	/^str2int(const char **buf, int max)$/;"	f	file:
str_cap	include/udbradtree.h	/^	udb_radstrlen_t str_cap;$/;"	m	struct:udb_radarray_d
string_size	main.c	/^const unsigned string_size = 15;$/;"	v
strip_string	nsd/util.c	/^strip_string(char *str)$/;"	f
strlcat	compat/strlcat.c	/^strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	compat/strlcpy.c	/^strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strptime	include/config.h	734;"	d
strtoserial	nsd/util.c	/^strtoserial(const char* nptr, const char** endptr)$/;"	f
strtottl	nsd/util.c	/^strtottl(const char *nptr, const char **endptr)$/;"	f
swap_int8	nsd/rbtree.c	/^static void swap_int8(uint8_t* x, uint8_t* y)$/;"	f	file:
swap_np	nsd/rbtree.c	/^static void swap_np(rbnode_t** x, rbnode_t** y)$/;"	f	file:
task_add_key	include/difffile.h	/^		task_add_key,$/;"	e	enum:task_list_d::__anon2
task_add_pattern	include/difffile.h	/^		task_add_pattern,$/;"	e	enum:task_list_d::__anon2
task_add_zone	include/difffile.h	/^		task_add_zone,$/;"	e	enum:task_list_d::__anon2
task_apply_xfr	include/difffile.h	/^		task_apply_xfr,$/;"	e	enum:task_list_d::__anon2
task_check_zonefiles	include/difffile.h	/^		task_check_zonefiles,$/;"	e	enum:task_list_d::__anon2
task_clear	nsd/difffile.c	/^void task_clear(struct udb_base* taskudb)$/;"	f
task_create_new_elem	nsd/difffile.c	/^task_create_new_elem(struct udb_base* udb, udb_ptr* last, udb_ptr* e,$/;"	f	file:
task_del_key	include/difffile.h	/^		task_del_key,$/;"	e	enum:task_list_d::__anon2
task_del_pattern	include/difffile.h	/^		task_del_pattern,$/;"	e	enum:task_list_d::__anon2
task_del_zone	include/difffile.h	/^		task_del_zone,$/;"	e	enum:task_list_d::__anon2
task_expire	include/difffile.h	/^		task_expire,$/;"	e	enum:task_list_d::__anon2
task_file_create	nsd/difffile.c	/^struct udb_base* task_file_create(const char* file)$/;"	f
task_list_d	include/difffile.h	/^struct task_list_d {$/;"	s
task_new_add_key	nsd/difffile.c	/^void task_new_add_key(udb_base* udb, udb_ptr* last, key_options_t* key)$/;"	f
task_new_add_pattern	nsd/difffile.c	/^void task_new_add_pattern(udb_base* udb, udb_ptr* last, pattern_options_t* p)$/;"	f
task_new_add_zone	nsd/difffile.c	/^task_new_add_zone(udb_base* udb, udb_ptr* last, const char* zone,$/;"	f
task_new_apply_xfr	nsd/difffile.c	/^task_new_apply_xfr(udb_base* udb, udb_ptr* last, const dname_type* dname,$/;"	f
task_new_check_zonefiles	nsd/difffile.c	/^void task_new_check_zonefiles(udb_base* udb, udb_ptr* last,$/;"	f
task_new_del_key	nsd/difffile.c	/^void task_new_del_key(udb_base* udb, udb_ptr* last, const char* name)$/;"	f
task_new_del_pattern	nsd/difffile.c	/^void task_new_del_pattern(udb_base* udb, udb_ptr* last, const char* name)$/;"	f
task_new_del_zone	nsd/difffile.c	/^task_new_del_zone(udb_base* udb, udb_ptr* last, const dname_type* dname)$/;"	f
task_new_expire	nsd/difffile.c	/^void task_new_expire(struct udb_base* udb, udb_ptr* last,$/;"	f
task_new_opt_change	nsd/difffile.c	/^void task_new_opt_change(udb_base* udb, udb_ptr* last, nsd_options_t* opt)$/;"	f
task_new_set_verbosity	nsd/difffile.c	/^void task_new_set_verbosity(udb_base* udb, udb_ptr* last, int v)$/;"	f
task_new_soainfo	nsd/difffile.c	/^void task_new_soainfo(struct udb_base* udb, udb_ptr* last, struct zone* z,$/;"	f
task_new_write_zonefiles	nsd/difffile.c	/^void task_new_write_zonefiles(udb_base* udb, udb_ptr* last,$/;"	f
task_opt_change	include/difffile.h	/^		task_opt_change$/;"	e	enum:task_list_d::__anon2
task_process_add_key	nsd/difffile.c	/^task_process_add_key(struct nsd* nsd, struct task_list_d* task)$/;"	f	file:
task_process_add_pattern	nsd/difffile.c	/^task_process_add_pattern(struct nsd* nsd, struct task_list_d* task)$/;"	f	file:
task_process_add_zone	nsd/difffile.c	/^task_process_add_zone(struct nsd* nsd, udb_base* udb, udb_ptr* last_task,$/;"	f	file:
task_process_checkzones	nsd/difffile.c	/^task_process_checkzones(struct nsd* nsd, udb_base* udb, udb_ptr* last_task,$/;"	f	file:
task_process_del_key	nsd/difffile.c	/^task_process_del_key(struct nsd* nsd, struct task_list_d* task)$/;"	f	file:
task_process_del_pattern	nsd/difffile.c	/^task_process_del_pattern(struct nsd* nsd, struct task_list_d* task)$/;"	f	file:
task_process_del_zone	nsd/difffile.c	/^task_process_del_zone(struct nsd* nsd, struct task_list_d* task)$/;"	f	file:
task_process_expire	nsd/difffile.c	/^task_process_expire(namedb_type* db, struct task_list_d* task)$/;"	f
task_process_in_reload	nsd/difffile.c	/^void task_process_in_reload(struct nsd* nsd, udb_base* udb, udb_ptr *last_task,$/;"	f
task_process_opt_change	nsd/difffile.c	/^task_process_opt_change(struct nsd* nsd, struct task_list_d* task)$/;"	f	file:
task_process_set_verbosity	nsd/difffile.c	/^task_process_set_verbosity(struct task_list_d* task)$/;"	f	file:
task_process_sync	nsd/difffile.c	/^void task_process_sync(struct udb_base* taskudb)$/;"	f
task_process_writezones	nsd/difffile.c	/^task_process_writezones(struct nsd* nsd, struct task_list_d* task)$/;"	f	file:
task_remap	nsd/difffile.c	/^void task_remap(struct udb_base* taskudb)$/;"	f
task_set_verbosity	include/difffile.h	/^		task_set_verbosity,$/;"	e	enum:task_list_d::__anon2
task_soa_info	include/difffile.h	/^		task_soa_info,$/;"	e	enum:task_list_d::__anon2
task_stat_info	include/difffile.h	/^		task_stat_info,$/;"	e	enum:task_list_d::__anon2
task_type	include/difffile.h	/^	} task_type;$/;"	m	struct:task_list_d	typeref:enum:task_list_d::__anon2
task_write_zonefiles	include/difffile.h	/^		task_write_zonefiles,$/;"	e	enum:task_list_d::__anon2
tcp	include/query.h	/^	int tcp;$/;"	m	struct:query
tcp_conn	include/xfrd.h	/^	int tcp_conn;$/;"	m	struct:xfrd_zone
tcp_conn_ready_for_reading	nsd/xfrd-tcp.c	/^tcp_conn_ready_for_reading(xfrd_tcp_t* tcp)$/;"	f	file:
tcp_count	include/options.h	/^	int tcp_count;$/;"	m	struct:nsd_options
tcp_count	include/xfrd-tcp.h	/^	int tcp_count;$/;"	m	struct:xfrd_tcp_set
tcp_pipe_id_remove	nsd/xfrd-tcp.c	/^tcp_pipe_id_remove(struct xfrd_tcp_pipeline* tp, xfrd_zone_t* zone)$/;"	f	file:
tcp_pipe_reset_timeout	nsd/xfrd-tcp.c	/^tcp_pipe_reset_timeout(struct xfrd_tcp_pipeline* tp)$/;"	f	file:
tcp_pipe_sendlist_popfirst	nsd/xfrd-tcp.c	/^tcp_pipe_sendlist_popfirst(struct xfrd_tcp_pipeline* tp, xfrd_zone_t* zone)$/;"	f	file:
tcp_pipe_sendlist_remove	nsd/xfrd-tcp.c	/^tcp_pipe_sendlist_remove(struct xfrd_tcp_pipeline* tp, xfrd_zone_t* zone)$/;"	f	file:
tcp_query_count	include/options.h	/^	int tcp_query_count;$/;"	m	struct:nsd_options
tcp_r	include/xfrd-tcp.h	/^	xfrd_tcp_t* tcp_r;$/;"	m	struct:xfrd_tcp_pipeline
tcp_send_first	include/xfrd-tcp.h	/^	struct xfrd_zone* tcp_send_first, *tcp_send_last;$/;"	m	struct:xfrd_tcp_pipeline	typeref:struct:xfrd_tcp_pipeline::xfrd_zone
tcp_send_last	include/xfrd-tcp.h	/^	struct xfrd_zone* tcp_send_first, *tcp_send_last;$/;"	m	struct:xfrd_tcp_pipeline	typeref:struct:xfrd_tcp_pipeline::
tcp_send_next	include/xfrd.h	/^	xfrd_zone_t* tcp_send_next;$/;"	m	struct:xfrd_zone
tcp_send_prev	include/xfrd.h	/^	xfrd_zone_t* tcp_send_prev;$/;"	m	struct:xfrd_zone
tcp_set	include/xfrd.h	/^	struct xfrd_tcp_set* tcp_set;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::xfrd_tcp_set
tcp_state	include/xfrd-tcp.h	/^	struct xfrd_tcp_pipeline *tcp_state[XFRD_MAX_TCP];$/;"	m	struct:xfrd_tcp_set	typeref:struct:xfrd_tcp_set::xfrd_tcp_pipeline
tcp_timeout	include/options.h	/^	int tcp_timeout;$/;"	m	struct:nsd_options
tcp_timeout	include/xfrd-tcp.h	/^	int tcp_timeout;$/;"	m	struct:xfrd_tcp_set
tcp_w	include/xfrd-tcp.h	/^	xfrd_tcp_t* tcp_w;$/;"	m	struct:xfrd_tcp_pipeline
tcp_waiting	include/xfrd.h	/^	uint8_t tcp_waiting;$/;"	m	struct:xfrd_zone
tcp_waiting_first	include/xfrd-tcp.h	/^	struct xfrd_zone *tcp_waiting_first, *tcp_waiting_last;$/;"	m	struct:xfrd_tcp_set	typeref:struct:xfrd_tcp_set::xfrd_zone
tcp_waiting_last	include/xfrd-tcp.h	/^	struct xfrd_zone *tcp_waiting_first, *tcp_waiting_last;$/;"	m	struct:xfrd_tcp_set	typeref:struct:xfrd_tcp_set::
tcp_waiting_next	include/xfrd.h	/^	xfrd_zone_t* tcp_waiting_next;$/;"	m	struct:xfrd_zone
tcp_waiting_prev	include/xfrd.h	/^	xfrd_zone_t* tcp_waiting_prev;$/;"	m	struct:xfrd_zone
tcp_zone_waiting_list_popfirst	nsd/xfrd-tcp.c	/^tcp_zone_waiting_list_popfirst(xfrd_tcp_set_t* set, xfrd_zone_t* zone)$/;"	f	file:
tcplen	include/query.h	/^	uint16_t tcplen;$/;"	m	struct:query
tempdirname	nsd/xfrd-disk.c	/^tempdirname(char* buf, size_t sz, struct nsd* nsd)$/;"	f	file:
temporary_rdatas	include/zonec.h	/^	rdata_atom_type *temporary_rdatas;$/;"	m	struct:zparser
tempxfrname	nsd/xfrd-disk.c	/^tempxfrname(char* buf, size_t sz, struct nsd* nsd, uint64_t number)$/;"	f	file:
time_secs	include/mini_event.h	/^	time_t* time_secs;$/;"	m	struct:event_base
time_tv	include/mini_event.h	/^	struct timeval* time_tv;$/;"	m	struct:event_base	typeref:struct:event_base::timeval
timeout	include/netio.h	/^	struct timespec *timeout;$/;"	m	struct:netio_handler	typeref:struct:netio_handler::timespec
timeout	include/xfrd.h	/^	struct timeval timeout;$/;"	m	struct:xfrd_zone	typeref:struct:xfrd_zone::timeval
times	include/mini_event.h	/^	rbtree_t* times;$/;"	m	struct:event_base
timespec	include/config.h	/^	struct timespec {$/;"	s
timespec_add	nsd/util.c	/^timespec_add(struct timespec *left,$/;"	f
timespec_compare	nsd/util.c	/^timespec_compare(const struct timespec *left,$/;"	f
timespec_subtract	nsd/util.c	/^timespec_subtract(struct timespec *left,$/;"	f
timeval_to_timespec	include/util.h	/^timeval_to_timespec(struct timespec *left,$/;"	f
token	include/dns.h	/^	int         token;	\/* Parser token.  *\/$/;"	m	struct:rrtype_descriptor
total_allocated	nsd/region-allocator.c	/^	size_t        total_allocated;$/;"	m	struct:region	file:
total_bytes	include/ipc.h	/^	uint16_t	total_bytes;$/;"	m	struct:main_ipc_handler_data
total_bytes	include/xfrd-tcp.h	/^	uint32_t total_bytes;$/;"	m	struct:xfrd_tcp
totalrrs	include/zonec.c	/^static long int totalrrs = 0;$/;"	v	file:
totalrrs	nsd/zonec.c	/^static long int totalrrs = 0;$/;"	v	file:
tree_dname_compare	nsd/tsig.c	/^tree_dname_compare(const void* a, const void* b)$/;"	f	file:
try_read_udb	nsd/dbaccess.c	/^try_read_udb(namedb_type* db, int fd, const char* filename,$/;"	f	file:
tsig	include/query.h	/^	tsig_record_type tsig;$/;"	m	struct:query
tsig	include/xfrd.h	/^	tsig_record_type tsig; \/* tsig state for IXFR\/AXFR *\/$/;"	m	struct:xfrd_zone
tsig_add_algorithm	nsd/tsig.c	/^tsig_add_algorithm(tsig_algorithm_type *algorithm)$/;"	f
tsig_add_key	nsd/tsig.c	/^tsig_add_key(tsig_key_type *key)$/;"	f
tsig_algorithm	include/tsig.h	/^struct tsig_algorithm$/;"	s
tsig_algorithm_table	nsd/tsig.c	/^static tsig_algorithm_table_type *tsig_algorithm_table;$/;"	v	file:
tsig_algorithm_table	nsd/tsig.c	/^struct tsig_algorithm_table$/;"	s	file:
tsig_algorithm_table_type	nsd/tsig.c	/^typedef struct tsig_algorithm_table tsig_algorithm_table_type;$/;"	t	typeref:struct:tsig_algorithm_table	file:
tsig_algorithm_type	include/tsig.h	/^typedef struct tsig_algorithm tsig_algorithm_type;$/;"	t	typeref:struct:tsig_algorithm
tsig_append_rr	nsd/tsig.c	/^tsig_append_rr(tsig_record_type *tsig, buffer_type *packet)$/;"	f
tsig_cleanup	nsd/tsig.c	/^tsig_cleanup(void *data)$/;"	f	file:
tsig_create_record	nsd/tsig.c	/^tsig_create_record(tsig_record_type *tsig, region_type *region)$/;"	f
tsig_create_record_custom	nsd/tsig.c	/^tsig_create_record_custom(tsig_record_type *tsig, region_type *region,$/;"	f
tsig_del_key	nsd/tsig.c	/^tsig_del_key(tsig_key_type *key)$/;"	f
tsig_delete_record	nsd/tsig.c	/^tsig_delete_record(tsig_record_type* tsig, region_type* region)$/;"	f
tsig_digest_variables	nsd/tsig.c	/^tsig_digest_variables(tsig_record_type *tsig, int tsig_timers_only)$/;"	f	file:
tsig_error	nsd/tsig.c	/^tsig_error(int error_code)$/;"	f
tsig_error_reply	nsd/tsig.c	/^tsig_error_reply(tsig_record_type *tsig)$/;"	f
tsig_finalize	nsd/tsig.c	/^tsig_finalize()$/;"	f
tsig_find_key	nsd/tsig.c	/^tsig_find_key(const dname_type* name)$/;"	f
tsig_find_rr	nsd/tsig.c	/^tsig_find_rr(tsig_record_type *tsig, buffer_type *packet)$/;"	f
tsig_from_query	nsd/tsig.c	/^tsig_from_query(tsig_record_type *tsig)$/;"	f
tsig_get_algorithm_by_name	nsd/tsig.c	/^tsig_get_algorithm_by_name(const char *name)$/;"	f
tsig_init	nsd/tsig.c	/^tsig_init(region_type *region)$/;"	f
tsig_init_query	nsd/tsig.c	/^tsig_init_query(tsig_record_type *tsig, uint16_t original_query_id)$/;"	f
tsig_init_record	nsd/tsig.c	/^tsig_init_record(tsig_record_type *tsig,$/;"	f
tsig_key	include/options.h	/^	struct tsig_key* tsig_key;$/;"	m	struct:key_options	typeref:struct:key_options::tsig_key
tsig_key	include/tsig.h	/^struct tsig_key$/;"	s
tsig_key_table	nsd/tsig.c	/^static rbtree_t *tsig_key_table;$/;"	v	file:
tsig_key_table	nsd/tsig.c	/^struct tsig_key_table$/;"	s	file:
tsig_key_table_type	nsd/tsig.c	/^typedef struct tsig_key_table tsig_key_table_type;$/;"	t	typeref:struct:tsig_key_table	file:
tsig_key_type	include/tsig.h	/^typedef struct tsig_key tsig_key_type;$/;"	t	typeref:struct:tsig_key
tsig_lookup_algorithm_table	include/tsig.h	/^typedef struct tsig_lookup_struct_table tsig_lookup_algorithm_table;$/;"	t	typeref:struct:tsig_lookup_struct_table
tsig_lookup_struct_table	include/tsig.h	/^struct tsig_lookup_struct_table$/;"	s
tsig_openssl_finalize	nsd/tsig-openssl.c	/^tsig_openssl_finalize()$/;"	f
tsig_openssl_init	nsd/tsig-openssl.c	/^tsig_openssl_init(region_type *region)$/;"	f
tsig_openssl_init_algorithm	nsd/tsig-openssl.c	/^tsig_openssl_init_algorithm(region_type* region,$/;"	f	file:
tsig_parse_rr	nsd/tsig.c	/^tsig_parse_rr(tsig_record_type *tsig, buffer_type *packet)$/;"	f
tsig_prepare	nsd/tsig.c	/^tsig_prepare(tsig_record_type *tsig)$/;"	f
tsig_prepare_it	include/query.h	/^	int tsig_prepare_it, tsig_update_it, tsig_sign_it;$/;"	m	struct:query
tsig_record	include/tsig.h	/^struct tsig_record$/;"	s
tsig_record_type	include/tsig.h	/^typedef struct tsig_record tsig_record_type;$/;"	t	typeref:struct:tsig_record
tsig_region	nsd/tsig.c	/^static region_type *tsig_region;$/;"	v	file:
tsig_reserved_space	nsd/tsig.c	/^tsig_reserved_space(tsig_record_type *tsig)$/;"	f
tsig_sign	nsd/tsig.c	/^tsig_sign(tsig_record_type *tsig)$/;"	f
tsig_sign_it	include/query.h	/^	int tsig_prepare_it, tsig_update_it, tsig_sign_it;$/;"	m	struct:query
tsig_status	include/tsig.h	/^enum tsig_status$/;"	g
tsig_status_type	include/tsig.h	/^typedef enum tsig_status tsig_status_type;$/;"	t	typeref:enum:tsig_status
tsig_strlowercmp	nsd/tsig.c	/^tsig_strlowercmp(const char* str1, const char* str2)$/;"	f
tsig_update	nsd/tsig.c	/^tsig_update(tsig_record_type *tsig, buffer_type *packet, size_t length)$/;"	f
tsig_update_it	include/query.h	/^	int tsig_prepare_it, tsig_update_it, tsig_sign_it;$/;"	m	struct:query
tsig_verify	nsd/tsig.c	/^tsig_verify(tsig_record_type *tsig)$/;"	f
ttl	include/namedb.h	/^	uint32_t         ttl;$/;"	m	struct:rr
ttl	include/udbzone.h	/^	uint32_t ttl;$/;"	m	struct:rr_d
ttl	include/xfrd.h	/^	uint32_t ttl;$/;"	m	struct:xfrd_soa
ttl	include/zparser.h	/^	uint32_t	  ttl;$/;"	m	union:YYSTYPE
ttl	nsd/zparser.c	/^	uint32_t	  ttl;$/;"	m	union:YYSTYPE	file:
tv_nsec	include/config.h	/^		long    tv_nsec;        \/* nanoseconds *\/$/;"	m	struct:timespec
tv_sec	include/config.h	/^		long    tv_sec;         \/* seconds *\/$/;"	m	struct:timespec
type	include/dns.h	/^	uint16_t    type;	\/* RR type *\/$/;"	m	struct:rrtype_descriptor
type	include/namedb.h	/^	uint16_t         type;$/;"	m	struct:rr
type	include/udb.h	/^	uint8_t type;$/;"	m	struct:udb_chunk_d
type	include/udb.h	/^	uint8_t type;$/;"	m	struct:udb_free_chunk_d
type	include/udb.h	/^	uint8_t type;$/;"	m	struct:udb_xl_chunk_d
type	include/udbzone.h	/^	uint16_t type;$/;"	m	struct:rr_d
type	include/udbzone.h	/^	uint16_t type;$/;"	m	struct:rrset_d
type	include/xfrd.h	/^	uint16_t type; \/* = TYPE_SOA *\/$/;"	m	struct:xfrd_soa
type	include/zparser.h	/^	uint16_t	  type;$/;"	m	union:YYSTYPE
type	nsd/zparser.c	/^	uint16_t	  type;$/;"	m	union:YYSTYPE	file:
udb	include/namedb.h	/^	struct udb_base*   udb;$/;"	m	struct:namedb	typeref:struct:namedb::udb_base
udb	include/udb.h	/^	udb_base* udb;$/;"	m	struct:udb_alloc
udb_alloc	include/udb.h	/^struct udb_alloc {$/;"	s
udb_alloc	include/udb.h	/^typedef struct udb_alloc udb_alloc;$/;"	t	typeref:struct:udb_alloc
udb_alloc_compact	nsd/udb.c	/^udb_alloc_compact(void* base, udb_alloc* alloc)$/;"	f	file:
udb_alloc_create	nsd/udb.c	/^udb_alloc* udb_alloc_create(udb_base* udb, udb_alloc_d* disk)$/;"	f
udb_alloc_d	include/udb.h	/^struct udb_alloc_d {$/;"	s
udb_alloc_d	include/udb.h	/^typedef struct udb_alloc_d udb_alloc_d;$/;"	t	typeref:struct:udb_alloc_d
udb_alloc_delete	nsd/udb.c	/^void udb_alloc_delete(udb_alloc* alloc)$/;"	f
udb_alloc_exp_needed	nsd/udb.c	/^udb_alloc_exp_needed(size_t sz)$/;"	f	file:
udb_alloc_free	nsd/udb.c	/^int udb_alloc_free(udb_alloc* alloc, udb_void r, size_t sz)$/;"	f
udb_alloc_grow	nsd/udb.c	/^int udb_alloc_grow(udb_alloc* alloc, size_t sz, size_t num)$/;"	f
udb_alloc_grow_space	nsd/udb.c	/^udb_alloc_grow_space(void* base, udb_alloc* alloc, size_t sz, int exp)$/;"	f	file:
udb_alloc_init	nsd/udb.c	/^udb_void udb_alloc_init(udb_alloc* alloc, void* d, size_t sz)$/;"	f
udb_alloc_init_new	nsd/udb.c	/^void udb_alloc_init_new(udb_alloc_d* a)$/;"	f
udb_alloc_pop_fl	nsd/udb.c	/^udb_alloc_pop_fl(void* base, udb_alloc* alloc, int exp)$/;"	f	file:
udb_alloc_push_fl	nsd/udb.c	/^udb_alloc_push_fl(void* base, udb_alloc* alloc, udb_void f, int exp)$/;"	f	file:
udb_alloc_push_fl_noinit	nsd/udb.c	/^udb_alloc_push_fl_noinit(void* base, udb_alloc* alloc, udb_void f, int exp)$/;"	f	file:
udb_alloc_realloc	nsd/udb.c	/^udb_void udb_alloc_realloc(udb_alloc* alloc, udb_void r, size_t osz, size_t sz)$/;"	f
udb_alloc_set_type	nsd/udb.c	/^void udb_alloc_set_type(udb_alloc* alloc, udb_void r, udb_chunk_type tp)$/;"	f
udb_alloc_space	nsd/udb.c	/^udb_void udb_alloc_space(udb_alloc* alloc, size_t sz)$/;"	f
udb_alloc_subdivide	nsd/udb.c	/^udb_alloc_subdivide(void* base, udb_alloc* alloc, udb_void big, int e2,$/;"	f	file:
udb_alloc_unlink_fl	nsd/udb.c	/^udb_alloc_unlink_fl(void* base, udb_alloc* alloc, udb_void chunk, int exp)$/;"	f	file:
udb_alloc_xl_space	nsd/udb.c	/^udb_alloc_xl_space(void* base, udb_alloc* alloc, size_t sz)$/;"	f	file:
udb_base	include/udb.h	/^struct udb_base {$/;"	s
udb_base	include/udb.h	/^typedef struct udb_base udb_base;$/;"	t	typeref:struct:udb_base
udb_base_close	nsd/udb.c	/^void udb_base_close(udb_base* udb)$/;"	f
udb_base_create_fd	nsd/udb.c	/^udb_base_create_fd(const char* fname, int fd, udb_walk_relptr_func walkfunc,$/;"	f
udb_base_create_new	nsd/udb.c	/^udb_base* udb_base_create_new(const char* fname, udb_walk_relptr_func walkfunc,$/;"	f
udb_base_create_read	nsd/udb.c	/^udb_base* udb_base_create_read(const char* fname, udb_walk_relptr_func walkfunc,$/;"	f
udb_base_free	nsd/udb.c	/^void udb_base_free(udb_base* udb)$/;"	f
udb_base_free_keep_mmap	nsd/udb.c	/^void udb_base_free_keep_mmap(udb_base* udb)$/;"	f
udb_base_get_userdata	nsd/udb.c	/^udb_rel_ptr* udb_base_get_userdata(udb_base* udb)$/;"	f
udb_base_get_userflags	nsd/udb.c	/^uint8_t udb_base_get_userflags(udb_base* udb)$/;"	f
udb_base_grow_and_remap	nsd/udb.c	/^udb_base_grow_and_remap(udb_base* udb, uint64_t nsize)$/;"	f	file:
udb_base_link_ptr	nsd/udb.c	/^void udb_base_link_ptr(udb_base* udb, udb_ptr* ptr)$/;"	f
udb_base_ram_ptr_edit	nsd/udb.c	/^udb_base_ram_ptr_edit(udb_base* udb, udb_void old, udb_void newd)$/;"	f	file:
udb_base_remap	nsd/udb.c	/^udb_base_remap(udb_base* udb, udb_alloc* alloc, uint64_t nsize)$/;"	f	file:
udb_base_remap_process	nsd/udb.c	/^udb_base_remap_process(udb_base* udb)$/;"	f
udb_base_set_userdata	nsd/udb.c	/^void udb_base_set_userdata(udb_base* udb, udb_void user)$/;"	f
udb_base_set_userflags	nsd/udb.c	/^void udb_base_set_userflags(udb_base* udb, uint8_t v)$/;"	f
udb_base_shrink	nsd/udb.c	/^udb_base_shrink(udb_base* udb, uint64_t nsize)$/;"	f	file:
udb_base_sync	nsd/udb.c	/^void udb_base_sync(udb_base* udb, int wait)$/;"	f
udb_base_unlink_ptr	nsd/udb.c	/^void udb_base_unlink_ptr(udb_base* udb, udb_ptr* ptr)$/;"	f
udb_bstr_common	nsd/udbradtree.c	/^udb_bstr_common(uint8_t* x, udb_radstrlen_t xlen,$/;"	f	file:
udb_bstr_is_prefix	nsd/udbradtree.c	/^udb_bstr_is_prefix(uint8_t* p, udb_radstrlen_t plen,$/;"	f	file:
udb_check_ptrs_valid	nsd/udb.c	/^udb_check_ptrs_valid(udb_base* udb)$/;"	f	file:
udb_check_rptr_zero	nsd/udb.c	/^void udb_check_rptr_zero(void* base, udb_rel_ptr* p, void* arg)$/;"	f
udb_chunk_d	include/udb.h	/^struct udb_chunk_d {$/;"	s
udb_chunk_d	include/udb.h	/^typedef struct udb_chunk_d udb_chunk_d;$/;"	t	typeref:struct:udb_chunk_d
udb_chunk_type	include/udb.h	/^enum udb_chunk_type {$/;"	g
udb_chunk_type	include/udb.h	/^typedef enum udb_chunk_type udb_chunk_type;$/;"	t	typeref:enum:udb_chunk_type
udb_chunk_type_data	include/udb.h	/^	udb_chunk_type_data, \/* alloced data *\/$/;"	e	enum:udb_chunk_type
udb_chunk_type_domain	include/udb.h	/^	udb_chunk_type_domain,$/;"	e	enum:udb_chunk_type
udb_chunk_type_free	include/udb.h	/^	udb_chunk_type_free = 0,$/;"	e	enum:udb_chunk_type
udb_chunk_type_index	include/udb.h	/^	udb_chunk_type_index,$/;"	e	enum:udb_chunk_type
udb_chunk_type_internal	include/udb.h	/^	udb_chunk_type_internal$/;"	e	enum:udb_chunk_type
udb_chunk_type_radarray	include/udb.h	/^	udb_chunk_type_radarray,$/;"	e	enum:udb_chunk_type
udb_chunk_type_radnode	include/udb.h	/^	udb_chunk_type_radnode,$/;"	e	enum:udb_chunk_type
udb_chunk_type_radtree	include/udb.h	/^	udb_chunk_type_radtree,$/;"	e	enum:udb_chunk_type
udb_chunk_type_rr	include/udb.h	/^	udb_chunk_type_rr,$/;"	e	enum:udb_chunk_type
udb_chunk_type_rrset	include/udb.h	/^	udb_chunk_type_rrset,$/;"	e	enum:udb_chunk_type
udb_chunk_type_task	include/udb.h	/^	udb_chunk_type_task,$/;"	e	enum:udb_chunk_type
udb_chunk_type_zone	include/udb.h	/^	udb_chunk_type_zone,$/;"	e	enum:udb_chunk_type
udb_del_rr	nsd/dbcreate.c	/^udb_del_rr(udb_base* udb, udb_ptr* z, rr_type* rr)$/;"	f
udb_dirty_alloc	include/udb.h	/^enum udb_dirty_alloc {$/;"	g
udb_dirty_clean	include/udb.h	/^	udb_dirty_clean = 0, \/* all clean *\/$/;"	e	enum:udb_dirty_alloc
udb_dirty_compact	include/udb.h	/^	udb_dirty_compact    \/* allocs, freelists and relptrs are messed up *\/$/;"	e	enum:udb_dirty_alloc
udb_dirty_fl	include/udb.h	/^	udb_dirty_fl,        \/* allocs, freelists are messed up *\/$/;"	e	enum:udb_dirty_alloc
udb_dirty_fsize	include/udb.h	/^	udb_dirty_fsize,     \/* file size and fsize are messed up *\/$/;"	e	enum:udb_dirty_alloc
udb_dns_deinit_file	nsd/udbzone.c	/^udb_dns_deinit_file(udb_base* udb)$/;"	f
udb_dns_init_file	nsd/udbzone.c	/^udb_dns_init_file(udb_base* udb)$/;"	f
udb_domain_find	nsd/udbzone.c	/^udb_domain_find(udb_base* udb, udb_ptr* zone, const uint8_t* nm, size_t nmlen,$/;"	f
udb_domain_walk_chunk	nsd/udbzone.c	/^udb_domain_walk_chunk(void* base, void* d, uint64_t s, udb_walk_relptr_cb* cb,$/;"	f
udb_exp_offset	nsd/udb.c	/^int udb_exp_offset(uint64_t o)$/;"	f
udb_exp_size	nsd/udb.c	/^int udb_exp_size(uint64_t a)$/;"	f
udb_free_chunk_d	include/udb.h	/^struct udb_free_chunk_d {$/;"	s
udb_free_chunk_d	include/udb.h	/^typedef struct udb_free_chunk_d udb_free_chunk_d;$/;"	t	typeref:struct:udb_free_chunk_d
udb_free_xl	nsd/udb.c	/^udb_free_xl(void* base, udb_alloc* alloc, udb_void f, udb_xl_chunk_d* fp,$/;"	f	file:
udb_glob_d	include/udb.h	/^struct udb_glob_d {$/;"	s
udb_glob_d	include/udb.h	/^typedef struct udb_glob_d udb_glob_d;$/;"	t	typeref:struct:udb_glob_d
udb_glob_init_new	nsd/udb.c	/^static void udb_glob_init_new(udb_glob_d* g)$/;"	f	file:
udb_nsec3param_string	nsd/udbzone.c	/^udb_nsec3param_string(udb_ptr* rr)$/;"	f
udb_ptr	include/udb.h	/^struct udb_ptr {$/;"	s
udb_ptr	include/udb.h	/^typedef struct udb_ptr udb_ptr;$/;"	t	typeref:struct:udb_ptr
udb_ptr_alloc_space	nsd/udb.c	/^int udb_ptr_alloc_space(udb_ptr* ptr, udb_base* udb, udb_chunk_type type,$/;"	f
udb_ptr_data	include/udb.h	/^static inline uint8_t* udb_ptr_data(udb_ptr* ptr) {$/;"	f
udb_ptr_free_space	nsd/udb.c	/^void udb_ptr_free_space(udb_ptr* ptr, udb_base* udb, size_t sz)$/;"	f
udb_ptr_get_type	nsd/udb.c	/^udb_chunk_type udb_ptr_get_type(udb_ptr* ptr)$/;"	f
udb_ptr_init	nsd/udb.c	/^void udb_ptr_init(udb_ptr* ptr, udb_base* udb)$/;"	f
udb_ptr_is_null	include/udb.h	/^static inline int udb_ptr_is_null(udb_ptr* ptr) {$/;"	f
udb_ptr_is_on_bucket	nsd/udb.c	/^int udb_ptr_is_on_bucket(udb_base* udb, udb_ptr* ptr, udb_void to)$/;"	f
udb_ptr_new	include/udb.h	/^static inline void udb_ptr_new(udb_ptr* ptr, udb_base* udb, udb_rel_ptr* d) {$/;"	f
udb_ptr_set	nsd/udb.c	/^void udb_ptr_set(udb_ptr* ptr, udb_base* udb, udb_void newval)$/;"	f
udb_ptr_set_ptr	include/udb.h	/^static inline void udb_ptr_set_ptr(udb_ptr* dest, udb_base* udb, udb_ptr* p) {$/;"	f
udb_ptr_set_rptr	include/udb.h	/^static inline void udb_ptr_set_rptr(udb_ptr* dest, udb_base* udb,$/;"	f
udb_ptr_unlink	include/udb.h	/^static inline void udb_ptr_unlink(udb_ptr* ptr, udb_base* udb) {$/;"	f
udb_ptr_zero	include/udb.h	/^static inline void udb_ptr_zero(udb_ptr* dest, udb_base* udb) {$/;"	f
udb_radarray_d	include/udbradtree.h	/^struct udb_radarray_d {$/;"	s
udb_radarray_max_len	nsd/udbradtree.c	/^static udb_radstrlen_t udb_radarray_max_len(udb_ptr* n)$/;"	f	file:
udb_radarray_reduce	nsd/udbradtree.c	/^udb_radarray_reduce(udb_base* udb, udb_ptr* n, uint16_t cap,$/;"	f	file:
udb_radarray_reduce_if_needed	nsd/udbradtree.c	/^udb_radarray_reduce_if_needed(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radarray_zero_ptrs	nsd/udbradtree.c	/^static void udb_radarray_zero_ptrs(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radix_array_walk_chunk	nsd/udbradtree.c	/^void udb_radix_array_walk_chunk(void* base, void* d, uint64_t s,$/;"	f
udb_radix_delete	nsd/udbradtree.c	/^void udb_radix_delete(udb_base* udb, udb_ptr* rt, udb_ptr* n)$/;"	f
udb_radix_find_less_equal	nsd/udbradtree.c	/^int udb_radix_find_less_equal(udb_base* udb, udb_ptr* rt, uint8_t* k,$/;"	f
udb_radix_find_prefix_node	nsd/udbradtree.c	/^static int udb_radix_find_prefix_node(udb_base* udb, udb_ptr* rt, uint8_t* k,$/;"	f	file:
udb_radix_first	nsd/udbradtree.c	/^void udb_radix_first(udb_base* udb, udb_ptr* rt, udb_ptr* p)$/;"	f
udb_radix_insert	nsd/udbradtree.c	/^udb_void udb_radix_insert(udb_base* udb, udb_ptr* rt, uint8_t* k,$/;"	f
udb_radix_last	nsd/udbradtree.c	/^void udb_radix_last(udb_base* udb, udb_ptr* rt, udb_ptr* p)$/;"	f
udb_radix_next	nsd/udbradtree.c	/^void udb_radix_next(udb_base* udb, udb_ptr* n)$/;"	f
udb_radix_node_walk_chunk	nsd/udbradtree.c	/^void udb_radix_node_walk_chunk(void* base, void* d, uint64_t s,$/;"	f
udb_radix_prev	nsd/udbradtree.c	/^void udb_radix_prev(udb_base* udb, udb_ptr* n)$/;"	f
udb_radix_search	nsd/udbradtree.c	/^udb_void udb_radix_search(udb_ptr* rt, uint8_t* k, udb_radstrlen_t len)$/;"	f
udb_radix_tree_clear	nsd/udbradtree.c	/^void udb_radix_tree_clear(udb_base* udb, udb_ptr* rt)$/;"	f
udb_radix_tree_create	nsd/udbradtree.c	/^int udb_radix_tree_create(udb_base* udb, udb_ptr* ptr)$/;"	f
udb_radix_tree_delete	nsd/udbradtree.c	/^void udb_radix_tree_delete(udb_base* udb, udb_ptr* rt)$/;"	f
udb_radix_tree_walk_chunk	nsd/udbradtree.c	/^void udb_radix_tree_walk_chunk(void* base, void* d, uint64_t s,$/;"	f
udb_radname_insert	nsd/udbradtree.c	/^udb_void udb_radname_insert(udb_base* udb, udb_ptr* rt, const uint8_t* dname,$/;"	f
udb_radname_search	nsd/udbradtree.c	/^int udb_radname_search(udb_base* udb, udb_ptr* rt, const uint8_t* dname,$/;"	f
udb_radnode_array_clean_all	nsd/udbradtree.c	/^udb_radnode_array_clean_all(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_array_clean_end	nsd/udbradtree.c	/^udb_radnode_array_clean_end(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_array_clean_front	nsd/udbradtree.c	/^udb_radnode_array_clean_front(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_array_create	nsd/udbradtree.c	/^static int udb_radnode_array_create(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_array_grow	nsd/udbradtree.c	/^static int udb_radnode_array_grow(udb_base* udb, udb_ptr* n, size_t want)$/;"	f	file:
udb_radnode_array_space	nsd/udbradtree.c	/^static int udb_radnode_array_space(udb_base* udb, udb_ptr* n, uint8_t byte,$/;"	f	file:
udb_radnode_array_space_strremain	nsd/udbradtree.c	/^udb_radnode_array_space_strremain(udb_base* udb, udb_ptr* n,$/;"	f	file:
udb_radnode_cleanup	nsd/udbradtree.c	/^udb_radnode_cleanup(udb_base* udb, udb_ptr* rt, udb_ptr* n)$/;"	f	file:
udb_radnode_cleanup_leaf	nsd/udbradtree.c	/^udb_radnode_cleanup_leaf(udb_base* udb, udb_ptr* n, udb_ptr* par)$/;"	f	file:
udb_radnode_cleanup_onechild	nsd/udbradtree.c	/^udb_radnode_cleanup_onechild(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_d	include/udbradtree.h	/^struct udb_radnode_d {$/;"	s
udb_radnode_del_postorder	nsd/udbradtree.c	/^static void udb_radnode_del_postorder(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_delete	nsd/udbradtree.c	/^static void udb_radnode_delete(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_find_prev_from_idx	nsd/udbradtree.c	/^udb_radnode_find_prev_from_idx(udb_base* udb, udb_ptr* n, unsigned from)$/;"	f	file:
udb_radnode_first_in_subtree	nsd/udbradtree.c	/^udb_radnode_first_in_subtree(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_last_in_subtree	nsd/udbradtree.c	/^udb_radnode_last_in_subtree(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_last_in_subtree_incl_self	nsd/udbradtree.c	/^udb_radnode_last_in_subtree_incl_self(udb_base* udb, udb_ptr* n)$/;"	f	file:
udb_radnode_str_grow	nsd/udbradtree.c	/^static int udb_radnode_str_grow(udb_base* udb, udb_ptr* n, udb_radstrlen_t want)$/;"	f	file:
udb_radnode_str_space	nsd/udbradtree.c	/^static int udb_radnode_str_space(udb_base* udb, udb_ptr* n, udb_radstrlen_t len)$/;"	f	file:
udb_radsel_d	include/udbradtree.h	/^struct udb_radsel_d {$/;"	s
udb_radsel_prefix_remainder	nsd/udbradtree.c	/^static void udb_radsel_prefix_remainder(udb_radstrlen_t plen, $/;"	f	file:
udb_radsel_split	nsd/udbradtree.c	/^static int udb_radsel_split(udb_base* udb, udb_ptr* n, uint8_t idx, uint8_t* k,$/;"	f	file:
udb_radsel_str_create	nsd/udbradtree.c	/^static void udb_radsel_str_create(uint8_t* s, udb_radstrlen_t* slen,$/;"	f	file:
udb_radstrlen_t	include/udbradtree.h	/^typedef uint16_t udb_radstrlen_t;$/;"	t
udb_radtree_d	include/udbradtree.h	/^struct udb_radtree_d {$/;"	s
udb_rel_ptr	include/udb.h	/^struct udb_rel_ptr {$/;"	s
udb_rel_ptr	include/udb.h	/^typedef struct udb_rel_ptr udb_rel_ptr;$/;"	t	typeref:struct:udb_rel_ptr
udb_rel_ptr_edit	nsd/udb.c	/^void udb_rel_ptr_edit(void* base, udb_void list, udb_void to)$/;"	f
udb_rel_ptr_free_space	include/udb.h	/^static inline void udb_rel_ptr_free_space(udb_rel_ptr* ptr, udb_base* udb,$/;"	f
udb_rel_ptr_init	nsd/udb.c	/^void udb_rel_ptr_init(udb_rel_ptr* ptr)$/;"	f
udb_rel_ptr_link	nsd/udb.c	/^void udb_rel_ptr_link(void* base, udb_rel_ptr* ptr, udb_void to)$/;"	f
udb_rel_ptr_set	nsd/udb.c	/^void udb_rel_ptr_set(void* base, udb_rel_ptr* ptr, udb_void to)$/;"	f
udb_rel_ptr_unlink	nsd/udb.c	/^void udb_rel_ptr_unlink(void* base, udb_rel_ptr* ptr)$/;"	f
udb_ret_self_or_prev	nsd/udbradtree.c	/^static int udb_ret_self_or_prev(udb_base* udb, udb_ptr* n, udb_ptr* result)$/;"	f	file:
udb_rptr_set_ptr	include/udb.h	/^static inline void udb_rptr_set_ptr(udb_rel_ptr* dest, udb_base* udb,$/;"	f
udb_rptr_set_rptr	include/udb.h	/^static inline void udb_rptr_set_rptr(udb_rel_ptr* dest, udb_base* udb,$/;"	f
udb_rptr_zero	include/udb.h	/^static inline void udb_rptr_zero(udb_rel_ptr* dest, udb_base* udb) {$/;"	f
udb_rr_walk_chunk	nsd/udbzone.c	/^udb_rr_walk_chunk(void* base, void* d, uint64_t s, udb_walk_relptr_cb* cb,$/;"	f
udb_rrset_count	nsd/dbaccess.c	/^static unsigned udb_rrset_count = 0;$/;"	v	file:
udb_rrset_find	nsd/udbzone.c	/^udb_rrset_find(udb_base* udb, udb_ptr* domain, uint16_t t, udb_ptr* res)$/;"	f
udb_rrset_walk_chunk	nsd/udbzone.c	/^udb_rrset_walk_chunk(void* base, void* d, uint64_t s, udb_walk_relptr_cb* cb,$/;"	f
udb_rrsets	nsd/dbaccess.c	/^static unsigned udb_rrsets = 0;$/;"	v	file:
udb_task_walk_chunk	nsd/udbzone.c	/^udb_task_walk_chunk(void* base, void* d, uint64_t s, udb_walk_relptr_cb* cb,$/;"	f
udb_time	nsd/dbaccess.c	/^static time_t udb_time = 0;$/;"	v	file:
udb_valid_dataptr	nsd/udb.c	/^int udb_valid_dataptr(udb_base* udb, udb_void to)$/;"	f
udb_valid_offset	nsd/udb.c	/^int udb_valid_offset(udb_base* udb, udb_void to, size_t destsize)$/;"	f
udb_valid_rptr	nsd/udb.c	/^int udb_valid_rptr(udb_base* udb, udb_void rptr, udb_void to)$/;"	f
udb_void	include/udb.h	/^typedef uint64_t udb_void;$/;"	t
udb_walk_relptr_cb	include/udb.h	/^typedef void udb_walk_relptr_cb(void*, udb_rel_ptr*, void*);$/;"	t
udb_walk_relptr_func	include/udb.h	/^typedef void udb_walk_relptr_func(void*, void*, uint8_t, void*, uint64_t,$/;"	t
udb_write_rr	nsd/dbcreate.c	/^udb_write_rr(udb_base* udb, udb_ptr* z, rr_type* rr)$/;"	f
udb_xl_chunk_d	include/udb.h	/^struct udb_xl_chunk_d {$/;"	s
udb_xl_chunk_d	include/udb.h	/^typedef struct udb_xl_chunk_d udb_xl_chunk_d;$/;"	t	typeref:struct:udb_xl_chunk_d
udb_zone_add_rr	nsd/udbzone.c	/^udb_zone_add_rr(udb_base* udb, udb_ptr* zone, const uint8_t* nm, size_t nmlen,$/;"	f
udb_zone_clear	nsd/udbzone.c	/^udb_zone_clear(udb_base* udb, udb_ptr* zone)$/;"	f
udb_zone_create	nsd/udbzone.c	/^udb_zone_create(udb_base* udb, udb_ptr* result, const uint8_t* dname,$/;"	f
udb_zone_del_rr	nsd/udbzone.c	/^udb_zone_del_rr(udb_base* udb, udb_ptr* zone, const uint8_t* nm, size_t nmlen,$/;"	f
udb_zone_delete	nsd/udbzone.c	/^udb_zone_delete(udb_base* udb, udb_ptr* zone)$/;"	f
udb_zone_delete_plain	nsd/udbzone.c	/^udb_zone_delete_plain(udb_base* udb, udb_ptr* zone)$/;"	f	file:
udb_zone_find_nsec3param	nsd/nsec3.c	/^udb_zone_find_nsec3param(udb_base* udb, udb_ptr* uz, struct zone* z)$/;"	f	file:
udb_zone_get_mtime	nsd/udbzone.c	/^uint64_t udb_zone_get_mtime(udb_base* udb, const uint8_t* dname, size_t dlen)$/;"	f
udb_zone_search	nsd/udbzone.c	/^udb_zone_search(udb_base* udb, udb_ptr* result, const uint8_t* dname,$/;"	f
udb_zone_set_log_str	nsd/udbzone.c	/^void udb_zone_set_log_str(udb_base* udb, udb_ptr* zone, const char* str)$/;"	f
udb_zone_walk_chunk	nsd/udbzone.c	/^udb_zone_walk_chunk(void* base, void* d, uint64_t s, udb_walk_relptr_cb* cb,$/;"	f
udp_use_num	include/xfrd.h	/^	size_t udp_use_num;$/;"	m	struct:xfrd_state
udp_waiting	include/xfrd.h	/^	uint8_t udp_waiting;$/;"	m	struct:xfrd_zone
udp_waiting_first	include/xfrd.h	/^	struct xfrd_zone *udp_waiting_first, *udp_waiting_last;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::xfrd_zone
udp_waiting_last	include/xfrd.h	/^	struct xfrd_zone *udp_waiting_first, *udp_waiting_last;$/;"	m	struct:xfrd_state	typeref:struct:xfrd_state::
udp_waiting_next	include/xfrd.h	/^	xfrd_zone_t* udp_waiting_next;$/;"	m	struct:xfrd_zone
udp_waiting_prev	include/xfrd.h	/^	xfrd_zone_t* udp_waiting_prev;$/;"	m	struct:xfrd_zone
unknown	include/zparser.h	/^	uint16_t	 *unknown;$/;"	m	union:YYSTYPE
unknown	nsd/zparser.c	/^	uint16_t	 *unknown;$/;"	m	union:YYSTYPE	file:
unmarshal_acl	nsd/options.c	/^unmarshal_acl(region_type* r, struct buffer* b)$/;"	f	file:
unmarshal_acl_list	nsd/options.c	/^unmarshal_acl_list(region_type* r, struct buffer* b)$/;"	f	file:
unmarshal_str	nsd/options.c	/^unmarshal_str(region_type* r, struct buffer* b)$/;"	f	file:
unmarshal_u16	nsd/options.c	/^unmarshal_u16(struct buffer* b)$/;"	f	file:
unmarshal_u8	nsd/options.c	/^unmarshal_u8(struct buffer* b)$/;"	f	file:
unput	nsd/configlexer.c	186;"	d	file:
unput	nsd/zlexer.c	186;"	d	file:
unused	include/xfrd-tcp.h	/^	uint16_t unused[ID_PIPE_NUM];$/;"	m	struct:xfrd_tcp_pipeline
unused_space	nsd/region-allocator.c	/^	size_t        unused_space; \/* Unused space due to alignment, etc. *\/$/;"	m	struct:region	file:
update	nsd/tsig-openssl.c	/^update(void *context, const void *data, size_t size)$/;"	f	file:
updates_since_last_prepare	include/tsig.h	/^	size_t               updates_since_last_prepare;$/;"	m	struct:tsig_record
usage	include/namedb.h	/^	size_t     usage; \/* number of ptrs to this from RRs(in rdata) and$/;"	m	struct:domain
use_axfr_only	include/options.h	/^	uint8_t use_axfr_only;$/;"	m	struct:acl_options
user_data	include/netio.h	/^	void *user_data;$/;"	m	struct:netio_handler
user_global	include/udb.h	/^	udb_rel_ptr user_global;$/;"	m	struct:udb_glob_d
userflags	include/udb.h	/^	uint8_t userflags;$/;"	m	struct:udb_glob_d
username	include/options.h	/^	const char* username;$/;"	m	struct:nsd_options
verbosity	include/options.h	/^	int verbosity;$/;"	m	struct:nsd_options
verbosity	nsd/util.c	/^int verbosity = 0;$/;"	v
version	include/nsd.h	/^    const char      *version;$/;"	m	struct:nsd
version	include/udb.h	/^	uint8_t version;$/;"	m	struct:udb_glob_d
vsnprintf	compat/snprintf.c	/^int vsnprintf(char* str, size_t size, const char* format, va_list arg)$/;"	f
vsnprintf	compat/snprintf.c	50;"	d	file:
waiting_next	include/xfrd-notify.h	/^	struct notify_zone_t* waiting_next;$/;"	m	struct:notify_zone_t	typeref:struct:notify_zone_t::notify_zone_t
waiting_prev	include/xfrd-notify.h	/^	struct notify_zone_t* waiting_prev;$/;"	m	struct:notify_zone_t	typeref:struct:notify_zone_t::notify_zone_t
walkarg	include/udb.h	/^	void* walkarg;$/;"	m	struct:udb_base
walkfunc	include/udb.h	/^	udb_walk_relptr_func* walkfunc;$/;"	m	struct:udb_base
warning_va_list	nsd/zparser.c	/^warning_va_list(unsigned line, const char *fmt, va_list args)$/;"	f	file:
wchash_node	include/namedb.h	/^	rbnode_t wchash_node;$/;"	m	struct:nsec3_domain_data
wchashtree	include/namedb.h	/^	rbtree_t* wchashtree; \/* tree, wildcard hashed domains *\/$/;"	m	struct:zone
wildcard_child_closest_match	include/namedb.h	/^	domain_type* wildcard_child_closest_match;$/;"	m	struct:domain
wildcard_domain	include/query.h	/^	domain_type *wildcard_domain;$/;"	m	struct:query
wire	include/udbzone.h	/^	uint8_t wire[0];$/;"	m	struct:rr_d
wiredname2str	nsd/dname.c	/^char* wiredname2str(const uint8_t* dname)$/;"	f
wireformat	include/dns.h	/^	uint8_t     wireformat[MAXRDATALEN]; \/* rdata_wireformat_type *\/$/;"	m	struct:rrtype_descriptor
wireformat_name	include/tsig.h	/^	const dname_type *wireformat_name;$/;"	m	struct:tsig_algorithm
wirelabel2str	nsd/dname.c	/^char* wirelabel2str(const uint8_t* label)$/;"	f
write_32	nsd/difffile.c	/^write_32(FILE *out, uint32_t val)$/;"	f	file:
write_64	nsd/difffile.c	/^write_64(FILE *out, uint64_t val)$/;"	f	file:
write_8	nsd/difffile.c	/^write_8(FILE *out, uint8_t val)$/;"	f	file:
write_data	nsd/util.c	/^write_data(FILE *file, const void *data, size_t size)$/;"	f
write_data_crc	nsd/util.c	/^write_data_crc(FILE *file, const void *data, size_t size, uint32_t* crc)$/;"	f
write_fdata	nsd/udb.c	/^write_fdata(const char* fname, int fd, void* data, size_t len)$/;"	f	file:
write_rrset	nsd/dbcreate.c	/^write_rrset(udb_base* udb, udb_ptr* z, rrset_type* rrset)$/;"	f	file:
write_socket	nsd/util.c	/^write_socket(int s, const void *buf, size_t size)$/;"	f
write_str	nsd/difffile.c	/^write_str(FILE *out, const char* str)$/;"	f	file:
write_to_zonefile	nsd/dbcreate.c	/^write_to_zonefile(zone_type* zone, const char* filename, const char* logs)$/;"	f	file:
write_uint16	include/util.h	/^write_uint16(void *dst, uint16_t data)$/;"	f
write_uint32	include/util.h	/^write_uint32(void *dst, uint32_t data)$/;"	f
write_zone	nsd/dbcreate.c	/^write_zone(udb_base* udb, udb_ptr* z, zone_type* zone)$/;"	f	file:
write_zone_to_udb	nsd/dbcreate.c	/^write_zone_to_udb(udb_base* udb, zone_type* zone, time_t mtime)$/;"	f
writes	include/mini_event.h	/^		writes, $/;"	m	struct:event_base
xalloc	nsd/util.c	/^xalloc(size_t size)$/;"	f
xalloc_zero	nsd/util.c	/^xalloc_zero(size_t size)$/;"	f
xfrd	nsd/xfrd.c	/^xfrd_state_t* xfrd = 0;$/;"	v
xfrd_acl_sockaddr	nsd/xfrd-tcp.c	/^xfrd_acl_sockaddr(acl_options_t* acl, unsigned int port,$/;"	f	file:
xfrd_acl_sockaddr_frm	nsd/xfrd-tcp.c	/^xfrd_acl_sockaddr_frm(acl_options_t* acl, struct sockaddr_storage *frm)$/;"	f
xfrd_acl_sockaddr_to	nsd/xfrd-tcp.c	/^xfrd_acl_sockaddr_to(acl_options_t* acl, struct sockaddr_storage *to)$/;"	f
xfrd_bind_local_interface	nsd/xfrd.c	/^xfrd_bind_local_interface(int sockd, acl_options_t* ifc, acl_options_t* acl,$/;"	f
xfrd_check_failed_updates	nsd/xfrd.c	/^xfrd_check_failed_updates()$/;"	f
xfrd_clean_pending_tasks	nsd/xfrd.c	/^xfrd_clean_pending_tasks(struct nsd* nsd, udb_base* u)$/;"	f	file:
xfrd_copy_soa	nsd/xfrd.c	/^xfrd_copy_soa(xfrd_soa_t* soa, rr_type* rr)$/;"	f
xfrd_deactivate_zone	nsd/xfrd.c	/^xfrd_deactivate_zone(xfrd_zone_t* z)$/;"	f
xfrd_del_notify	nsd/xfrd-notify.c	/^xfrd_del_notify(xfrd_state_t* xfrd, const dname_type* dname)$/;"	f
xfrd_del_slave_zone	nsd/xfrd.c	/^xfrd_del_slave_zone(xfrd_state_t* xfrd, const dname_type* dname)$/;"	f
xfrd_del_tempdir	nsd/xfrd-disk.c	/^xfrd_del_tempdir(struct nsd* nsd)$/;"	f
xfrd_flags	include/options.h	/^	uint8_t xfrd_flags;$/;"	m	struct:pattern_options
xfrd_free_namedb	nsd/xfrd.c	/^xfrd_free_namedb(struct nsd* nsd)$/;"	f
xfrd_get_temp_buffer	nsd/xfrd.c	/^xfrd_get_temp_buffer()$/;"	f
xfrd_handle_incoming_notify	nsd/xfrd.c	/^xfrd_handle_incoming_notify(xfrd_zone_t* zone, xfrd_soa_t* soa)$/;"	f	file:
xfrd_handle_incoming_soa	nsd/xfrd.c	/^xfrd_handle_incoming_soa(xfrd_zone_t* zone,$/;"	f
xfrd_handle_notify_and_start_xfr	nsd/xfrd.c	/^xfrd_handle_notify_and_start_xfr(xfrd_zone_t* zone, xfrd_soa_t* soa)$/;"	f
xfrd_handle_notify_reply	nsd/xfrd-notify.c	/^xfrd_handle_notify_reply(struct notify_zone_t* zone, buffer_type* packet)$/;"	f	file:
xfrd_handle_notify_send	nsd/xfrd-notify.c	/^xfrd_handle_notify_send(int fd, short event, void* arg)$/;"	f	file:
xfrd_handle_passed_packet	nsd/xfrd.c	/^xfrd_handle_passed_packet(buffer_type* packet,$/;"	f
xfrd_handle_received_xfr_packet	nsd/xfrd.c	/^xfrd_handle_received_xfr_packet(xfrd_zone_t* zone, buffer_type* packet)$/;"	f
xfrd_handle_reload	nsd/xfrd.c	/^xfrd_handle_reload(int ATTR_UNUSED(fd), short event, void* ATTR_UNUSED(arg))$/;"	f	file:
xfrd_handle_taskresult	nsd/xfrd.c	/^xfrd_handle_taskresult(xfrd_state_t* xfrd, struct task_list_d* task)$/;"	f	file:
xfrd_handle_tcp_pipe	nsd/xfrd-tcp.c	/^xfrd_handle_tcp_pipe(int ATTR_UNUSED(fd), short event, void* arg)$/;"	f
xfrd_handle_zone	nsd/xfrd.c	/^xfrd_handle_zone(int ATTR_UNUSED(fd), short event, void* arg)$/;"	f
xfrd_init	nsd/xfrd.c	/^xfrd_init(int socket, struct nsd* nsd, int shortsoa, int reload_active)$/;"	f
xfrd_init_slave_zone	nsd/xfrd.c	/^xfrd_init_slave_zone(xfrd_state_t* xfrd, zone_options_t* zone_opt)$/;"	f
xfrd_init_zones	nsd/xfrd.c	/^xfrd_init_zones()$/;"	f	file:
xfrd_main	nsd/xfrd.c	/^xfrd_main(void)$/;"	f	file:
xfrd_make_request	nsd/xfrd.c	/^xfrd_make_request(xfrd_zone_t* zone)$/;"	f
xfrd_make_tempdir	nsd/xfrd-disk.c	/^xfrd_make_tempdir(struct nsd* nsd)$/;"	f
xfrd_notify_next	nsd/xfrd-notify.c	/^xfrd_notify_next(struct notify_zone_t* zone)$/;"	f	file:
xfrd_notify_send_udp	nsd/xfrd-notify.c	/^xfrd_notify_send_udp(struct notify_zone_t* zone, buffer_type* packet)$/;"	f	file:
xfrd_notify_start	nsd/xfrd-notify.c	/^xfrd_notify_start(struct notify_zone_t* zone)$/;"	f
xfrd_open_xfrfile	nsd/xfrd-disk.c	/^xfrd_open_xfrfile(struct nsd* nsd, uint64_t number, char* mode)$/;"	f
xfrd_packet_bad	include/xfrd.h	/^	xfrd_packet_bad, \/* drop the packet\/connection *\/$/;"	e	enum:xfrd_packet_result
xfrd_packet_drop	include/xfrd.h	/^	xfrd_packet_drop, \/* drop the connection, but not report bad *\/$/;"	e	enum:xfrd_packet_result
xfrd_packet_more	include/xfrd.h	/^	xfrd_packet_more, \/* more packets to follow on tcp *\/$/;"	e	enum:xfrd_packet_result
xfrd_packet_newlease	include/xfrd.h	/^	xfrd_packet_newlease \/* no changes, soa OK *\/$/;"	e	enum:xfrd_packet_result
xfrd_packet_notimpl	include/xfrd.h	/^	xfrd_packet_notimpl, \/* server responded with NOTIMPL or FORMATERR *\/$/;"	e	enum:xfrd_packet_result
xfrd_packet_result	include/xfrd.h	/^enum xfrd_packet_result {$/;"	g
xfrd_packet_tcp	include/xfrd.h	/^	xfrd_packet_tcp, \/* try tcp connection *\/$/;"	e	enum:xfrd_packet_result
xfrd_packet_transfer	include/xfrd.h	/^	xfrd_packet_transfer, \/* server responded with transfer*\/$/;"	e	enum:xfrd_packet_result
xfrd_parse_received_xfr_packet	nsd/xfrd.c	/^xfrd_parse_received_xfr_packet(xfrd_zone_t* zone, buffer_type* packet,$/;"	f	file:
xfrd_parse_soa_info	nsd/xfrd.c	/^static int xfrd_parse_soa_info(buffer_type* packet, xfrd_soa_t* soa)$/;"	f	file:
xfrd_pipe_cmp	nsd/xfrd-tcp.c	/^xfrd_pipe_cmp(const void* a, const void* b)$/;"	f	file:
xfrd_prepare_zones_for_reload	nsd/xfrd.c	/^xfrd_prepare_zones_for_reload()$/;"	f
xfrd_pretty_time	nsd/xfrd.c	/^xfrd_pretty_time(time_t v)$/;"	f
xfrd_process_activated	nsd/xfrd.c	/^xfrd_process_activated(void)$/;"	f	file:
xfrd_process_soa_info_task	nsd/xfrd.c	/^xfrd_process_soa_info_task(struct task_list_d* task)$/;"	f	file:
xfrd_process_stat_info_task	nsd/xfrd.c	/^xfrd_process_stat_info_task(xfrd_state_t* xfrd, struct task_list_d* task)$/;"	f	file:
xfrd_process_task_result	nsd/xfrd.c	/^void xfrd_process_task_result(xfrd_state_t* xfrd, struct udb_base* taskudb)$/;"	f
xfrd_read_check_str	nsd/xfrd-disk.c	/^xfrd_read_check_str(FILE* in, const char* str)$/;"	f	file:
xfrd_read_i16	nsd/xfrd-disk.c	/^xfrd_read_i16(FILE *in, uint16_t* v)$/;"	f	file:
xfrd_read_i32	nsd/xfrd-disk.c	/^xfrd_read_i32(FILE *in, uint32_t* v)$/;"	f	file:
xfrd_read_state	nsd/xfrd-disk.c	/^xfrd_read_state(struct xfrd_state* xfrd)$/;"	f
xfrd_read_state_soa	nsd/xfrd-disk.c	/^xfrd_read_state_soa(FILE* in, const char* id_acquired,$/;"	f	file:
xfrd_read_time_t	nsd/xfrd-disk.c	/^xfrd_read_time_t(FILE *in, time_t* v)$/;"	f	file:
xfrd_read_token	nsd/xfrd-disk.c	/^xfrd_read_token(FILE* in)$/;"	f	file:
xfrd_receive_soa	nsd/xfrd.c	/^xfrd_receive_soa(int socket, int shortsoa)$/;"	f
xfrd_reload_timeout	include/options.h	/^	int xfrd_reload_timeout;$/;"	m	struct:nsd_options
xfrd_reopen_logfile	nsd/xfrd.c	/^xfrd_reopen_logfile(void)$/;"	f
xfrd_send_expire_notification	nsd/xfrd.c	/^xfrd_send_expire_notification(xfrd_zone_t* zone)$/;"	f	file:
xfrd_send_ixfr_request_udp	nsd/xfrd.c	/^xfrd_send_ixfr_request_udp(xfrd_zone_t* zone)$/;"	f	file:
xfrd_send_notify	nsd/xfrd-notify.c	/^xfrd_send_notify(rbtree_t* tree, const dname_type* apex, struct xfrd_soa* new_soa)$/;"	f
xfrd_send_udp	nsd/xfrd.c	/^xfrd_send_udp(acl_options_t* acl, buffer_type* packet, acl_options_t* ifc)$/;"	f
xfrd_set_refresh_now	nsd/xfrd.c	/^xfrd_set_refresh_now(xfrd_zone_t* zone)$/;"	f
xfrd_set_reload_now	nsd/xfrd.c	/^void xfrd_set_reload_now(xfrd_state_t* xfrd)$/;"	f
xfrd_set_reload_timeout	nsd/xfrd.c	/^xfrd_set_reload_timeout()$/;"	f	file:
xfrd_set_timer	nsd/xfrd.c	/^xfrd_set_timer(xfrd_zone_t* zone, time_t t)$/;"	f
xfrd_set_timer_refresh	nsd/xfrd.c	/^xfrd_set_timer_refresh(xfrd_zone_t* zone)$/;"	f	file:
xfrd_set_timer_retry	nsd/xfrd.c	/^xfrd_set_timer_retry(xfrd_zone_t* zone)$/;"	f	file:
xfrd_set_zone_state	nsd/xfrd.c	/^xfrd_set_zone_state(xfrd_zone_t* zone, enum xfrd_zone_state s)$/;"	f	file:
xfrd_setup_packet	nsd/xfrd-tcp.c	/^xfrd_setup_packet(buffer_type* packet,$/;"	f
xfrd_shutdown	nsd/xfrd.c	/^xfrd_shutdown()$/;"	f	file:
xfrd_sig_process	nsd/xfrd.c	/^xfrd_sig_process(void)$/;"	f	file:
xfrd_signal_callback	nsd/xfrd.c	/^xfrd_signal_callback(int sig, short event, void* ATTR_UNUSED(arg))$/;"	f	file:
xfrd_sigsetup	nsd/xfrd.c	/^xfrd_sigsetup(int sig)$/;"	f	file:
xfrd_soa	include/xfrd.h	/^struct xfrd_soa {$/;"	s
xfrd_soa_t	include/xfrd.h	/^typedef struct xfrd_soa xfrd_soa_t;$/;"	t	typeref:struct:xfrd_soa
xfrd_sock	include/ipc.h	/^	int		*xfrd_sock;$/;"	m	struct:main_ipc_handler_data
xfrd_start_time	include/xfrd.h	/^	time_t xfrd_start_time;$/;"	m	struct:xfrd_state
xfrd_state	include/xfrd.h	/^struct xfrd_state {$/;"	s
xfrd_state_t	include/xfrd.h	/^typedef struct xfrd_state xfrd_state_t;$/;"	t	typeref:struct:xfrd_state
xfrd_tcp	include/xfrd-tcp.h	/^struct xfrd_tcp {$/;"	s
xfrd_tcp_create	nsd/xfrd-tcp.c	/^xfrd_tcp_create(region_type* region, size_t bufsize)$/;"	f
xfrd_tcp_obtain	nsd/xfrd-tcp.c	/^xfrd_tcp_obtain(xfrd_tcp_set_t* set, xfrd_zone_t* zone)$/;"	f
xfrd_tcp_open	nsd/xfrd-tcp.c	/^xfrd_tcp_open(xfrd_tcp_set_t* set, struct xfrd_tcp_pipeline* tp,$/;"	f
xfrd_tcp_pipe_release	nsd/xfrd-tcp.c	/^xfrd_tcp_pipe_release(xfrd_tcp_set_t* set, struct xfrd_tcp_pipeline* tp,$/;"	f
xfrd_tcp_pipe_stop	nsd/xfrd-tcp.c	/^xfrd_tcp_pipe_stop(struct xfrd_tcp_pipeline* tp)$/;"	f	file:
xfrd_tcp_pipeline	include/xfrd-tcp.h	/^struct xfrd_tcp_pipeline {$/;"	s
xfrd_tcp_pipeline_create	nsd/xfrd-tcp.c	/^xfrd_tcp_pipeline_create(region_type* region)$/;"	f
xfrd_tcp_read	nsd/xfrd-tcp.c	/^xfrd_tcp_read(struct xfrd_tcp_pipeline* tp)$/;"	f
xfrd_tcp_release	nsd/xfrd-tcp.c	/^xfrd_tcp_release(xfrd_tcp_set_t* set, xfrd_zone_t* zone)$/;"	f
xfrd_tcp_set	include/xfrd-tcp.h	/^struct xfrd_tcp_set {$/;"	s
xfrd_tcp_set_create	nsd/xfrd-tcp.c	/^xfrd_tcp_set_t* xfrd_tcp_set_create(struct region* region)$/;"	f
xfrd_tcp_set_t	include/xfrd-tcp.h	/^typedef struct xfrd_tcp_set xfrd_tcp_set_t;$/;"	t	typeref:struct:xfrd_tcp_set
xfrd_tcp_setup_write_packet	nsd/xfrd-tcp.c	/^xfrd_tcp_setup_write_packet(struct xfrd_tcp_pipeline* tp, xfrd_zone_t* zone)$/;"	f
xfrd_tcp_t	include/xfrd-tcp.h	/^typedef struct xfrd_tcp xfrd_tcp_t;$/;"	t	typeref:struct:xfrd_tcp
xfrd_tcp_write	nsd/xfrd-tcp.c	/^xfrd_tcp_write(struct xfrd_tcp_pipeline* tp, xfrd_zone_t* zone)$/;"	f
xfrd_time	nsd/xfrd.c	/^xfrd_time()$/;"	f
xfrd_tsig_sign_request	nsd/xfrd.c	/^xfrd_tsig_sign_request(buffer_type* packet, tsig_record_type* tsig,$/;"	f
xfrd_udp_obtain	nsd/xfrd.c	/^xfrd_udp_obtain(xfrd_zone_t* zone)$/;"	f	file:
xfrd_udp_read	nsd/xfrd.c	/^xfrd_udp_read(xfrd_zone_t* zone)$/;"	f	file:
xfrd_udp_read_packet	nsd/xfrd.c	/^xfrd_udp_read_packet(buffer_type* packet, int fd)$/;"	f
xfrd_udp_release	nsd/xfrd.c	/^xfrd_udp_release(xfrd_zone_t* zone)$/;"	f
xfrd_unlink_xfrfile	nsd/xfrd-disk.c	/^xfrd_unlink_xfrfile(struct nsd* nsd, uint64_t number)$/;"	f
xfrd_unset_timer	nsd/xfrd.c	/^xfrd_unset_timer(xfrd_zone_t* zone)$/;"	f
xfrd_write_dname	nsd/xfrd-disk.c	/^static void xfrd_write_dname(FILE* out, uint8_t* dname)$/;"	f	file:
xfrd_write_soa_buffer	nsd/xfrd-tcp.c	/^xfrd_write_soa_buffer(struct buffer* packet,$/;"	f
xfrd_write_state	nsd/xfrd-disk.c	/^xfrd_write_state(struct xfrd_state* xfrd)$/;"	f
xfrd_write_state_soa	nsd/xfrd-disk.c	/^xfrd_write_state_soa(FILE* out, const char* id,$/;"	f	file:
xfrd_xfr_check_rrs	nsd/xfrd.c	/^xfrd_xfr_check_rrs(xfrd_zone_t* zone, buffer_type* packet, size_t count,$/;"	f	file:
xfrd_xfr_process_tsig	nsd/xfrd.c	/^xfrd_xfr_process_tsig(xfrd_zone_t* zone, buffer_type* packet)$/;"	f	file:
xfrd_zone	include/xfrd.h	/^struct xfrd_zone {$/;"	s
xfrd_zone_expired	include/xfrd.h	/^		xfrd_zone_expired$/;"	e	enum:xfrd_zone::xfrd_zone_state
xfrd_zone_ok	include/xfrd.h	/^		xfrd_zone_ok,$/;"	e	enum:xfrd_zone::xfrd_zone_state
xfrd_zone_refreshing	include/xfrd.h	/^		xfrd_zone_refreshing,$/;"	e	enum:xfrd_zone::xfrd_zone_state
xfrd_zone_state	include/xfrd.h	/^	enum xfrd_zone_state {$/;"	g	struct:xfrd_zone
xfrd_zone_t	include/xfrd.h	/^typedef struct xfrd_zone xfrd_zone_t;$/;"	t	typeref:struct:xfrd_zone
xfrdfile	include/options.h	/^	const char* xfrdfile;$/;"	m	struct:nsd_options
xfrdir	include/options.h	/^	const char* xfrdir;$/;"	m	struct:nsd_options
xfrfilenumber	include/xfrd.h	/^	uint64_t xfrfilenumber; \/* identifier for file to store xfr into,$/;"	m	struct:xfrd_zone
xfrfilenumber	include/xfrd.h	/^	uint64_t xfrfilenumber;$/;"	m	struct:xfrd_state
xrealloc	nsd/util.c	/^xrealloc(void *ptr, size_t size)$/;"	f
yesno	include/difffile.h	/^	uint64_t yesno;$/;"	m	struct:task_list_d
yy_accept	include/configyyrename.h	104;"	d
yy_accept	nsd/configlexer.c	/^static yyconst flex_int16_t yy_accept[624] =$/;"	v	file:
yy_accept	nsd/zlexer.c	/^static yyconst flex_int16_t yy_accept[67] =$/;"	v	file:
yy_at_bol	nsd/configlexer.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_at_bol	nsd/zlexer.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	include/configyyrename.h	103;"	d
yy_base	nsd/configlexer.c	/^static yyconst flex_int16_t yy_base[633] =$/;"	v	file:
yy_base	nsd/zlexer.c	/^static yyconst flex_int16_t yy_base[79] =$/;"	v	file:
yy_bs_column	nsd/configlexer.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_column	nsd/zlexer.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	nsd/configlexer.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	nsd/zlexer.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	nsd/configlexer.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	nsd/zlexer.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	nsd/configlexer.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	nsd/zlexer.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	nsd/configlexer.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack	nsd/zlexer.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	nsd/configlexer.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_max	nsd/zlexer.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	nsd/configlexer.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_stack_top	nsd/zlexer.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	nsd/configlexer.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_state	nsd/zlexer.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	nsd/configlexer.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_status	nsd/zlexer.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	include/configyyrename.h	105;"	d
yy_c_buf_p	nsd/configlexer.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_c_buf_p	nsd/zlexer.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	nsd/configlexer.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_ch_buf	nsd/zlexer.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	include/configyyrename.h	106;"	d
yy_chk	nsd/configlexer.c	/^static yyconst flex_int16_t yy_chk[1820] =$/;"	v	file:
yy_chk	nsd/zlexer.c	/^static yyconst flex_int16_t yy_chk[226] =$/;"	v	file:
yy_create_buffer	include/configyyrename.h	66;"	d
yy_create_buffer	nsd/configlexer.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_create_buffer	nsd/zlexer.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_current_buffer	include/configyyrename.h	107;"	d
yy_def	include/configyyrename.h	108;"	d
yy_def	nsd/configlexer.c	/^static yyconst flex_int16_t yy_def[633] =$/;"	v	file:
yy_def	nsd/zlexer.c	/^static yyconst flex_int16_t yy_def[79] =$/;"	v	file:
yy_delete_buffer	include/configyyrename.h	68;"	d
yy_delete_buffer	nsd/configlexer.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_delete_buffer	nsd/zlexer.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	include/configyyrename.h	109;"	d
yy_did_buffer_switch_on_eof	nsd/configlexer.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_did_buffer_switch_on_eof	nsd/zlexer.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	include/configyyrename.h	110;"	d
yy_ec	nsd/configlexer.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_ec	nsd/zlexer.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	include/configyyrename.h	111;"	d
yy_fatal_error	nsd/configlexer.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fatal_error	nsd/zlexer.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	nsd/configlexer.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_fill_buffer	nsd/zlexer.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_alloc	include/configyyrename.h	112;"	d
yy_flex_debug	include/configyyrename.h	80;"	d
yy_flex_debug	nsd/configlexer.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_debug	nsd/zlexer.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_free	include/configyyrename.h	113;"	d
yy_flex_realloc	include/configyyrename.h	114;"	d
yy_flex_strlen	nsd/configlexer.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strlen	nsd/zlexer.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	nsd/configlexer.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flex_strncpy	nsd/zlexer.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	include/configyyrename.h	61;"	d
yy_flush_buffer	nsd/configlexer.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_flush_buffer	nsd/zlexer.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	include/configyyrename.h	115;"	d
yy_get_next_buffer	nsd/configlexer.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_next_buffer	nsd/zlexer.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	include/configyyrename.h	116;"	d
yy_get_previous_state	nsd/configlexer.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_get_previous_state	nsd/zlexer.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	include/configyyrename.h	117;"	d
yy_hold_char	nsd/configlexer.c	/^static char yy_hold_char;$/;"	v	file:
yy_hold_char	nsd/zlexer.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	include/configyyrename.h	102;"	d
yy_init	nsd/configlexer.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init	nsd/zlexer.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	include/configyyrename.h	62;"	d
yy_init_buffer	nsd/configlexer.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_buffer	nsd/zlexer.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	nsd/configlexer.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_init_globals	nsd/zlexer.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	nsd/configlexer.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_input_file	nsd/zlexer.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	nsd/configlexer.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	nsd/zlexer.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	nsd/configlexer.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	nsd/zlexer.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	include/configyyrename.h	100;"	d
yy_last_accepting_cpos	nsd/configlexer.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_cpos	nsd/zlexer.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	include/configyyrename.h	101;"	d
yy_last_accepting_state	nsd/configlexer.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_last_accepting_state	nsd/zlexer.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	include/configyyrename.h	59;"	d
yy_load_buffer_state	nsd/configlexer.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_load_buffer_state	nsd/zlexer.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	include/configyyrename.h	93;"	d
yy_meta	nsd/configlexer.c	/^static yyconst flex_int32_t yy_meta[62] =$/;"	v	file:
yy_meta	nsd/zlexer.c	/^static yyconst flex_int32_t yy_meta[39] =$/;"	v	file:
yy_more_flag	include/configyyrename.h	97;"	d
yy_more_flag	nsd/configlexer.c	/^static int yy_more_flag = 0;$/;"	v	file:
yy_more_flag	nsd/zlexer.c	/^static int yy_more_flag = 0;$/;"	v	file:
yy_more_len	include/configyyrename.h	98;"	d
yy_more_len	nsd/configlexer.c	/^static int yy_more_len = 0;$/;"	v	file:
yy_more_len	nsd/zlexer.c	/^static int yy_more_len = 0;$/;"	v	file:
yy_n_chars	include/configyyrename.h	96;"	d
yy_n_chars	nsd/configlexer.c	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	nsd/configlexer.c	/^static yy_size_t yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_n_chars	nsd/zlexer.c	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	nsd/zlexer.c	/^static yy_size_t yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	nsd/configlexer.c	310;"	d	file:
yy_new_buffer	nsd/zlexer.c	310;"	d	file:
yy_nxt	include/configyyrename.h	95;"	d
yy_nxt	nsd/configlexer.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	nsd/configlexer.c	/^static yyconst flex_int16_t yy_nxt[1820] =$/;"	v	file:
yy_nxt	nsd/zlexer.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	nsd/zlexer.c	/^static yyconst flex_int16_t yy_nxt[226] =$/;"	v	file:
yy_reduce_print	nsd/configparser.c	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_reduce_print	nsd/zparser.c	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_scan_buffer	include/configyyrename.h	63;"	d
yy_scan_buffer	nsd/configlexer.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_buffer	nsd/zlexer.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	include/configyyrename.h	64;"	d
yy_scan_bytes	nsd/configlexer.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )$/;"	f
yy_scan_bytes	nsd/zlexer.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )$/;"	f
yy_scan_string	include/configyyrename.h	65;"	d
yy_scan_string	nsd/configlexer.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_scan_string	nsd/zlexer.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	nsd/configlexer.c	1145;"	d	file:
yy_set_bol	nsd/configlexer.c	322;"	d	file:
yy_set_bol	nsd/zlexer.c	322;"	d	file:
yy_set_bol	nsd/zlexer.c	610;"	d	file:
yy_set_interactive	nsd/configlexer.c	312;"	d	file:
yy_set_interactive	nsd/zlexer.c	312;"	d	file:
yy_size_t	nsd/configlexer.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_size_t	nsd/zlexer.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	nsd/configparser.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_stack_print	nsd/zparser.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	include/configyyrename.h	94;"	d
yy_start	nsd/configlexer.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_start	nsd/zlexer.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	nsd/configlexer.c	/^typedef int yy_state_type;$/;"	t	file:
yy_state_type	nsd/zlexer.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	include/configyyrename.h	60;"	d
yy_switch_to_buffer	nsd/configlexer.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_switch_to_buffer	nsd/zlexer.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	nsd/configparser.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_print	nsd/zparser.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	nsd/configparser.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	nsd/zparser.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	nsd/configlexer.c	/^struct yy_trans_info$/;"	s	file:
yy_trans_info	nsd/zlexer.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	include/configyyrename.h	99;"	d
yy_try_NUL_trans	nsd/configlexer.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_try_NUL_trans	nsd/zlexer.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	nsd/configlexer.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yy_verify	nsd/zlexer.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yy_yys	include/configyyrename.h	36;"	d
yy_yyv	include/configyyrename.h	40;"	d
yyact	include/configyyrename.h	28;"	d
yyalloc	include/configyyrename.h	84;"	d
yyalloc	nsd/configlexer.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yyalloc	nsd/configparser.c	/^union yyalloc$/;"	u	file:
yyalloc	nsd/zlexer.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yyalloc	nsd/zparser.c	/^union yyalloc$/;"	u	file:
yychar	include/configyyrename.h	20;"	d
yychar	nsd/configparser.c	/^int yychar;$/;"	v
yychar	nsd/zparser.c	/^int yychar;$/;"	v
yycheck	include/configyyrename.h	53;"	d
yycheck	nsd/configparser.c	/^static const yytype_int8 yycheck[] =$/;"	v	file:
yycheck	nsd/zparser.c	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yychk	include/configyyrename.h	26;"	d
yyclearin	nsd/configparser.c	955;"	d	file:
yyclearin	nsd/zparser.c	1304;"	d	file:
yyconst	nsd/configlexer.c	107;"	d	file:
yyconst	nsd/configlexer.c	109;"	d	file:
yyconst	nsd/zlexer.c	107;"	d	file:
yyconst	nsd/zlexer.c	109;"	d	file:
yydebug	include/configyyrename.h	21;"	d
yydebug	nsd/configparser.c	/^int yydebug;$/;"	v
yydebug	nsd/zparser.c	/^int yydebug;$/;"	v
yydef	include/configyyrename.h	25;"	d
yydefact	nsd/configparser.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefact	nsd/zparser.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	nsd/configparser.c	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydefgoto	nsd/zparser.c	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydefred	include/configyyrename.h	47;"	d
yydestruct	nsd/configparser.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yydestruct	nsd/zparser.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yydgoto	include/configyyrename.h	48;"	d
yyensure_buffer_stack	nsd/configlexer.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyensure_buffer_stack	nsd/zlexer.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrflag	include/configyyrename.h	30;"	d
yyerrok	nsd/configparser.c	954;"	d	file:
yyerrok	nsd/zparser.c	1303;"	d	file:
yyerror	include/configyyrename.h	18;"	d
yyerror	nsd/zparser.c	/^yyerror(const char *message)$/;"	f
yyexca	include/configyyrename.h	29;"	d
yyfree	include/configyyrename.h	82;"	d
yyfree	nsd/configlexer.c	/^void yyfree (void * ptr )$/;"	f
yyfree	nsd/zlexer.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	include/configyyrename.h	79;"	d
yyget_debug	nsd/configlexer.c	/^int yyget_debug  (void)$/;"	f
yyget_debug	nsd/zlexer.c	/^int yyget_debug  (void)$/;"	f
yyget_in	include/configyyrename.h	73;"	d
yyget_in	nsd/configlexer.c	/^FILE *yyget_in  (void)$/;"	f
yyget_in	nsd/zlexer.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	include/configyyrename.h	86;"	d
yyget_leng	nsd/configlexer.c	/^yy_size_t yyget_leng  (void)$/;"	f
yyget_leng	nsd/zlexer.c	/^yy_size_t yyget_leng  (void)$/;"	f
yyget_lineno	include/configyyrename.h	76;"	d
yyget_lineno	nsd/configlexer.c	/^int yyget_lineno  (void)$/;"	f
yyget_lineno	nsd/zlexer.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	include/configyyrename.h	75;"	d
yyget_out	nsd/configlexer.c	/^FILE *yyget_out  (void)$/;"	f
yyget_out	nsd/zlexer.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	include/configyyrename.h	88;"	d
yyget_text	nsd/configlexer.c	/^char *yyget_text  (void)$/;"	f
yyget_text	nsd/zlexer.c	/^char *yyget_text  (void)$/;"	f
yygindex	include/configyyrename.h	51;"	d
yyin	include/configyyrename.h	56;"	d
yyin	nsd/configlexer.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyin	nsd/zlexer.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	nsd/configlexer.c	/^    static int yyinput (void)$/;"	f	file:
yyinput	nsd/zlexer.c	/^    static int yyinput (void)$/;"	f	file:
yylen	include/configyyrename.h	46;"	d
yyleng	include/configyyrename.h	92;"	d
yyleng	nsd/configlexer.c	/^yy_size_t yyleng;$/;"	v
yyleng	nsd/zlexer.c	/^yy_size_t yyleng;$/;"	v
yyless	nsd/configlexer.c	173;"	d	file:
yyless	nsd/configlexer.c	2663;"	d	file:
yyless	nsd/configlexer.c	2664;"	d	file:
yyless	nsd/zlexer.c	173;"	d	file:
yyless	nsd/zlexer.c	1970;"	d	file:
yyless	nsd/zlexer.c	1971;"	d	file:
yylex	include/configyyrename.h	17;"	d
yylex_destroy	include/configyyrename.h	81;"	d
yylex_destroy	nsd/configlexer.c	/^int yylex_destroy  (void)$/;"	f
yylex_destroy	nsd/zlexer.c	/^int yylex_destroy  (void)$/;"	f
yylhs	include/configyyrename.h	45;"	d
yylineno	include/configyyrename.h	87;"	d
yylineno	nsd/configlexer.c	/^int yylineno = 1;$/;"	v
yylineno	nsd/zlexer.c	/^int yylineno = 1;$/;"	v
yylloc	include/configyyrename.h	42;"	d
yylval	include/configyyrename.h	19;"	d
yylval	nsd/configparser.c	/^YYSTYPE yylval;$/;"	v
yylval	nsd/zparser.c	/^YYSTYPE yylval;$/;"	v
yymalloc	include/configyyrename.h	85;"	d
yymaxdepth	include/configyyrename.h	15;"	d
yymore	nsd/configlexer.c	1058;"	d	file:
yymore	nsd/zlexer.c	519;"	d	file:
yyname	include/configyyrename.h	54;"	d
yynerrs	include/configyyrename.h	31;"	d
yynerrs	nsd/configparser.c	/^int yynerrs;$/;"	v
yynerrs	nsd/zparser.c	/^int yynerrs;$/;"	v
yyout	include/configyyrename.h	57;"	d
yyout	nsd/configlexer.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyout	nsd/zlexer.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	include/configyyrename.h	22;"	d
yypact	nsd/configparser.c	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact	nsd/zparser.c	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact_value_is_default	nsd/configparser.c	901;"	d	file:
yypact_value_is_default	nsd/zparser.c	1146;"	d	file:
yyparse	include/configyyrename.h	16;"	d
yyparse	nsd/configparser.c	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yyparse	nsd/zparser.c	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yypgo	include/configyyrename.h	27;"	d
yypgoto	nsd/configparser.c	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yypgoto	nsd/zparser.c	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yypop_buffer_state	include/configyyrename.h	69;"	d
yypop_buffer_state	nsd/configlexer.c	/^void yypop_buffer_state (void)$/;"	f
yypop_buffer_state	nsd/zlexer.c	/^void yypop_buffer_state (void)$/;"	f
yyprhs	nsd/configparser.c	/^static const yytype_uint16 yyprhs[] =$/;"	v	file:
yyprhs	nsd/zparser.c	/^static const yytype_uint16 yyprhs[] =$/;"	v	file:
yyps	include/configyyrename.h	32;"	d
yypush_buffer_state	include/configyyrename.h	70;"	d
yypush_buffer_state	nsd/configlexer.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yypush_buffer_state	nsd/zlexer.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yypv	include/configyyrename.h	33;"	d
yyr1	include/configyyrename.h	23;"	d
yyr1	nsd/configparser.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr1	nsd/zparser.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	include/configyyrename.h	24;"	d
yyr2	nsd/configparser.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyr2	nsd/zparser.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	include/configyyrename.h	83;"	d
yyrealloc	nsd/configlexer.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrealloc	nsd/zlexer.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyreds	include/configyyrename.h	43;"	d
yyrestart	include/configyyrename.h	67;"	d
yyrestart	nsd/configlexer.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrestart	nsd/zlexer.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrhs	nsd/configparser.c	/^static const yytype_int16 yyrhs[] =$/;"	v	file:
yyrhs	nsd/zparser.c	/^static const yytype_int16 yyrhs[] =$/;"	v	file:
yyrindex	include/configyyrename.h	50;"	d
yyrline	nsd/configparser.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyrline	nsd/zparser.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyrule	include/configyyrename.h	55;"	d
yys	include/configyyrename.h	34;"	d
yyset_debug	include/configyyrename.h	78;"	d
yyset_debug	nsd/configlexer.c	/^void yyset_debug (int  bdebug )$/;"	f
yyset_debug	nsd/zlexer.c	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	include/configyyrename.h	72;"	d
yyset_in	nsd/configlexer.c	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_in	nsd/zlexer.c	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	include/configyyrename.h	77;"	d
yyset_lineno	nsd/configlexer.c	/^void yyset_lineno (int  line_number )$/;"	f
yyset_lineno	nsd/zlexer.c	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	include/configyyrename.h	74;"	d
yyset_out	nsd/configlexer.c	/^void yyset_out (FILE *  out_str )$/;"	f
yyset_out	nsd/zlexer.c	/^void yyset_out (FILE *  out_str )$/;"	f
yysindex	include/configyyrename.h	49;"	d
yyss	include/configyyrename.h	35;"	d
yyss_alloc	nsd/configparser.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yyss_alloc	nsd/zparser.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystate	include/configyyrename.h	37;"	d
yystos	nsd/configparser.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystos	nsd/zparser.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	nsd/configparser.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	nsd/configparser.c	1255;"	d	file:
yystpcpy	nsd/zparser.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	nsd/zparser.c	1604;"	d	file:
yystrlen	nsd/configparser.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	nsd/configparser.c	1232;"	d	file:
yystrlen	nsd/zparser.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	nsd/zparser.c	1581;"	d	file:
yystype	include/configparser.h	212;"	d
yystype	include/zparser.h	238;"	d
yystype	nsd/configparser.c	299;"	d	file:
yystype	nsd/zparser.c	342;"	d	file:
yysyntax_error	nsd/configparser.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yysyntax_error	nsd/zparser.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	include/configyyrename.h	52;"	d
yytable	nsd/configparser.c	/^static const yytype_uint8 yytable[] =$/;"	v	file:
yytable	nsd/zparser.c	/^static const yytype_uint16 yytable[] =$/;"	v	file:
yytable_value_is_error	nsd/configparser.c	904;"	d	file:
yytable_value_is_error	nsd/zparser.c	1149;"	d	file:
yyterminate	nsd/configlexer.c	1296;"	d	file:
yyterminate	nsd/zlexer.c	761;"	d	file:
yytext	include/configyyrename.h	91;"	d
yytext	nsd/configlexer.c	/^char *yytext;$/;"	v
yytext	nsd/zlexer.c	/^char *yytext;$/;"	v
yytext_ptr	nsd/configlexer.c	347;"	d	file:
yytext_ptr	nsd/zlexer.c	347;"	d	file:
yytmp	include/configyyrename.h	38;"	d
yytname	nsd/configparser.c	/^static const char *const yytname[] =$/;"	v	file:
yytname	nsd/zparser.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	nsd/configparser.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytnamerr	nsd/zparser.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	include/configparser.h	/^   enum yytokentype {$/;"	g
yytokentype	include/zparser.h	/^   enum yytokentype {$/;"	g
yytokentype	nsd/configparser.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	nsd/zparser.c	/^   enum yytokentype {$/;"	g	file:
yytoknum	nsd/configparser.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytoknum	nsd/zparser.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytoks	include/configyyrename.h	44;"	d
yytranslate	nsd/configparser.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytranslate	nsd/zparser.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	nsd/configparser.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	nsd/configparser.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int16	nsd/zparser.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	nsd/zparser.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	nsd/configparser.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	nsd/configparser.c	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	nsd/configparser.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_int8	nsd/zparser.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	nsd/zparser.c	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	nsd/zparser.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	nsd/configparser.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	nsd/configparser.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint16	nsd/zparser.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	nsd/zparser.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	nsd/configparser.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	nsd/configparser.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yytype_uint8	nsd/zparser.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	nsd/zparser.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	include/configyyrename.h	71;"	d
yyv	include/configyyrename.h	39;"	d
yyval	include/configyyrename.h	41;"	d
yyvs	include/configyyrename.h	90;"	d
yyvs_alloc	nsd/configparser.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yyvs_alloc	nsd/zparser.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yyvsp	include/configyyrename.h	89;"	d
yywrap	include/configyyrename.h	58;"	d
yywrap	nsd/zparser.c	/^yywrap(void)$/;"	f
zadd_rdata_domain	include/zonec.c	/^zadd_rdata_domain(domain_type *domain)$/;"	f
zadd_rdata_domain	nsd/zonec.c	/^zadd_rdata_domain(domain_type *domain)$/;"	f
zadd_rdata_txt_clean_wireformat	include/zonec.c	/^zadd_rdata_txt_clean_wireformat()$/;"	f
zadd_rdata_txt_clean_wireformat	nsd/zonec.c	/^zadd_rdata_txt_clean_wireformat()$/;"	f
zadd_rdata_txt_wireformat	include/zonec.c	/^zadd_rdata_txt_wireformat(uint16_t *data, int first)$/;"	f
zadd_rdata_txt_wireformat	nsd/zonec.c	/^zadd_rdata_txt_wireformat(uint16_t *data, int first)$/;"	f
zadd_rdata_wireformat	include/zonec.c	/^zadd_rdata_wireformat(uint16_t *data)$/;"	f
zadd_rdata_wireformat	nsd/zonec.c	/^zadd_rdata_wireformat(uint16_t *data)$/;"	f
zc_error	nsd/zparser.c	/^zc_error(const char *fmt, ...)$/;"	f
zc_error_prev_line	nsd/zparser.c	/^zc_error_prev_line(const char *fmt, ...)$/;"	f
zc_warning	nsd/zparser.c	/^zc_warning(const char *fmt, ... )$/;"	f
zc_warning_prev_line	nsd/zparser.c	/^zc_warning_prev_line(const char *fmt, ...)$/;"	f
zname	include/difffile.h	/^	struct dname zname[0];$/;"	m	struct:task_list_d	typeref:struct:task_list_d::dname
zoctet	nsd/zlexer.c	/^zoctet(char *text) $/;"	f	file:
zone	include/namedb.h	/^	zone_type*  zone;$/;"	m	struct:rrset
zone	include/namedb.h	/^struct zone$/;"	s
zone	include/query.h	/^	zone_type *zone;$/;"	m	struct:query
zone_add_domain_in_hash_tree	nsd/namedb.c	/^void zone_add_domain_in_hash_tree(region_type* region, rbtree_t** tree,$/;"	f
zone_d	include/udbzone.h	/^struct zone_d {$/;"	s
zone_del_domain_in_hash_tree	nsd/namedb.c	/^zone_del_domain_in_hash_tree(rbtree_t* tree, rbnode_t* node)$/;"	f
zone_handler	include/xfrd.h	/^	struct event zone_handler;$/;"	m	struct:xfrd_zone	typeref:struct:xfrd_zone::event
zone_handler_flags	include/xfrd.h	/^	int zone_handler_flags;$/;"	m	struct:xfrd_zone
zone_hash_nsec3param	nsd/udbzone.c	/^zone_hash_nsec3param(udb_base* udb, udb_ptr* zone, udb_ptr* rrset)$/;"	f	file:
zone_is_secure	nsd/namedb.c	/^zone_is_secure(zone_type* zone)$/;"	f
zone_is_slave	nsd/options.c	/^zone_is_slave(zone_options_t* opt)$/;"	f
zone_list_add	nsd/options.c	/^zone_list_add(nsd_options_t* opt, const char* zname, const char* pname)$/;"	f
zone_list_close	nsd/options.c	/^zone_list_close(nsd_options_t* opt)$/;"	f
zone_list_compact	nsd/options.c	/^zone_list_compact(nsd_options_t* opt)$/;"	f
zone_list_del	nsd/options.c	/^zone_list_del(nsd_options_t* opt, zone_options_t* zone)$/;"	f
zone_list_free_insert	nsd/options.c	/^zone_list_free_insert(nsd_options_t* opt, int linesize, off_t off)$/;"	f	file:
zone_list_zone_insert	nsd/options.c	/^zone_list_zone_insert(nsd_options_t* opt, const char* nm, const char* patnm,$/;"	f
zone_open	include/zonec.c	/^zone_open(const char *filename, uint32_t ttl, uint16_t klass,$/;"	f	file:
zone_open	nsd/zonec.c	/^zone_open(const char *filename, uint32_t ttl, uint16_t klass,$/;"	f	file:
zone_options	include/options.h	/^	rbtree_t* zone_options;$/;"	m	struct:nsd_options
zone_options	include/options.h	/^struct zone_options {$/;"	s
zone_options	include/xfrd.h	/^	zone_options_t* zone_options;$/;"	m	struct:xfrd_zone
zone_options_create	nsd/options.c	/^zone_options_create(region_type* region)$/;"	f
zone_options_delete	nsd/options.c	/^zone_options_delete(nsd_options_t* opt, zone_options_t* zone)$/;"	f
zone_options_find	nsd/options.c	/^zone_options_find(nsd_options_t* opt, const struct dname* apex)$/;"	f
zone_options_t	include/options.h	/^typedef struct zone_options zone_options_t;$/;"	t	typeref:struct:zone_options
zone_type	include/namedb.h	/^typedef struct zone zone_type;$/;"	t	typeref:struct:zone
zonec_desetup_parser	include/zonec.c	/^zonec_desetup_parser(void)$/;"	f
zonec_desetup_parser	nsd/zonec.c	/^zonec_desetup_parser(void)$/;"	f
zonec_desetup_string_parser	include/zonec.c	/^zonec_desetup_string_parser(void)$/;"	f
zonec_desetup_string_parser	nsd/zonec.c	/^zonec_desetup_string_parser(void)$/;"	f
zonec_parse_string	include/zonec.c	/^zonec_parse_string(region_type* region, domain_table_type* domains,$/;"	f
zonec_parse_string	nsd/zonec.c	/^zonec_parse_string(region_type* region, domain_table_type* domains,$/;"	f
zonec_read	include/zonec.c	/^zonec_read(const char* name, const char* zonefile, zone_type* zone)$/;"	f
zonec_read	nsd/zonec.c	/^zonec_read(const char* name, const char* zonefile, zone_type* zone)$/;"	f
zonec_setup_parser	include/zonec.c	/^zonec_setup_parser(namedb_type* db)$/;"	f
zonec_setup_parser	nsd/zonec.c	/^zonec_setup_parser(namedb_type* db)$/;"	f
zonec_setup_string_parser	include/zonec.c	/^zonec_setup_string_parser(region_type* region, domain_table_type* domains)$/;"	f
zonec_setup_string_parser	nsd/zonec.c	/^zonec_setup_string_parser(region_type* region, domain_table_type* domains)$/;"	f
zonefile	include/options.h	/^	const char* zonefile;$/;"	m	struct:pattern_options
zonefiles_check	include/options.h	/^	int zonefiles_check;$/;"	m	struct:nsd_options
zoneformat	include/dns.h	/^	uint8_t     zoneformat[MAXRDATALEN]; \/* rdata_zoneformat_type  *\/$/;"	m	struct:rrtype_descriptor
zonefree	include/options.h	/^	rbtree_t* zonefree;$/;"	m	struct:nsd_options
zonefree_number	include/options.h	/^	size_t zonefree_number;$/;"	m	struct:nsd_options
zonelist	include/options.h	/^	FILE* zonelist;$/;"	m	struct:nsd_options
zonelist_bucket	include/options.h	/^struct zonelist_bucket {$/;"	s
zonelist_free	include/options.h	/^struct zonelist_free {$/;"	s
zonelist_off	include/options.h	/^	off_t zonelist_off;$/;"	m	struct:nsd_options
zonelistfile	include/options.h	/^	const char* zonelistfile;$/;"	m	struct:nsd_options
zones	include/xfrd.h	/^	rbtree_t *zones;$/;"	m	struct:xfrd_state
zonesdir	include/options.h	/^	const char* zonesdir;$/;"	m	struct:nsd_options
zonetree	include/namedb.h	/^	struct radtree*    zonetree;$/;"	m	struct:namedb	typeref:struct:namedb::radtree
zparser	include/zonec.h	/^struct zparser {$/;"	s
zparser_conv_a	include/zonec.c	/^zparser_conv_a(region_type *region, const char *text)$/;"	f
zparser_conv_a	nsd/zonec.c	/^zparser_conv_a(region_type *region, const char *text)$/;"	f
zparser_conv_aaaa	include/zonec.c	/^zparser_conv_aaaa(region_type *region, const char *text)$/;"	f
zparser_conv_aaaa	nsd/zonec.c	/^zparser_conv_aaaa(region_type *region, const char *text)$/;"	f
zparser_conv_algorithm	include/zonec.c	/^zparser_conv_algorithm(region_type *region, const char *text)$/;"	f
zparser_conv_algorithm	nsd/zonec.c	/^zparser_conv_algorithm(region_type *region, const char *text)$/;"	f
zparser_conv_apl_rdata	include/zonec.c	/^zparser_conv_apl_rdata(region_type *region, char *str)$/;"	f
zparser_conv_apl_rdata	nsd/zonec.c	/^zparser_conv_apl_rdata(region_type *region, char *str)$/;"	f
zparser_conv_b32	include/zonec.c	/^zparser_conv_b32(region_type *region, const char *b32)$/;"	f
zparser_conv_b32	nsd/zonec.c	/^zparser_conv_b32(region_type *region, const char *b32)$/;"	f
zparser_conv_b64	include/zonec.c	/^zparser_conv_b64(region_type *region, const char *b64)$/;"	f
zparser_conv_b64	nsd/zonec.c	/^zparser_conv_b64(region_type *region, const char *b64)$/;"	f
zparser_conv_byte	include/zonec.c	/^zparser_conv_byte(region_type *region, const char *text)$/;"	f
zparser_conv_byte	nsd/zonec.c	/^zparser_conv_byte(region_type *region, const char *text)$/;"	f
zparser_conv_certificate_type	include/zonec.c	/^zparser_conv_certificate_type(region_type *region, const char *text)$/;"	f
zparser_conv_certificate_type	nsd/zonec.c	/^zparser_conv_certificate_type(region_type *region, const char *text)$/;"	f
zparser_conv_dns_name	include/zonec.c	/^zparser_conv_dns_name(region_type *region, const uint8_t* name, size_t len)$/;"	f
zparser_conv_dns_name	nsd/zonec.c	/^zparser_conv_dns_name(region_type *region, const uint8_t* name, size_t len)$/;"	f
zparser_conv_eui	include/zonec.c	/^zparser_conv_eui(region_type *region, const char *text, size_t len)$/;"	f
zparser_conv_eui	nsd/zonec.c	/^zparser_conv_eui(region_type *region, const char *text, size_t len)$/;"	f
zparser_conv_eui48	include/zonec.c	/^zparser_conv_eui48(region_type *region, const char *text)$/;"	f	file:
zparser_conv_eui48	nsd/zonec.c	/^zparser_conv_eui48(region_type *region, const char *text)$/;"	f	file:
zparser_conv_eui64	include/zonec.c	/^zparser_conv_eui64(region_type *region, const char *text)$/;"	f	file:
zparser_conv_eui64	nsd/zonec.c	/^zparser_conv_eui64(region_type *region, const char *text)$/;"	f	file:
zparser_conv_hex	include/zonec.c	/^zparser_conv_hex(region_type *region, const char *hex, size_t len)$/;"	f
zparser_conv_hex	nsd/zonec.c	/^zparser_conv_hex(region_type *region, const char *hex, size_t len)$/;"	f
zparser_conv_hex_length	include/zonec.c	/^zparser_conv_hex_length(region_type *region, const char *hex, size_t len)$/;"	f
zparser_conv_hex_length	nsd/zonec.c	/^zparser_conv_hex_length(region_type *region, const char *hex, size_t len)$/;"	f
zparser_conv_ilnp64	include/zonec.c	/^zparser_conv_ilnp64(region_type *region, const char *text)$/;"	f
zparser_conv_ilnp64	nsd/zonec.c	/^zparser_conv_ilnp64(region_type *region, const char *text)$/;"	f
zparser_conv_loc	include/zonec.c	/^zparser_conv_loc(region_type *region, char *str)$/;"	f
zparser_conv_loc	nsd/zonec.c	/^zparser_conv_loc(region_type *region, char *str)$/;"	f
zparser_conv_long_text	include/zonec.c	/^zparser_conv_long_text(region_type *region, const char *text, size_t len)$/;"	f
zparser_conv_long_text	nsd/zonec.c	/^zparser_conv_long_text(region_type *region, const char *text, size_t len)$/;"	f
zparser_conv_nsec	include/zonec.c	/^zparser_conv_nsec(region_type *region,$/;"	f
zparser_conv_nsec	nsd/zonec.c	/^zparser_conv_nsec(region_type *region,$/;"	f
zparser_conv_nxt	include/zonec.c	/^zparser_conv_nxt(region_type *region, uint8_t nxtbits[])$/;"	f
zparser_conv_nxt	nsd/zonec.c	/^zparser_conv_nxt(region_type *region, uint8_t nxtbits[])$/;"	f
zparser_conv_period	include/zonec.c	/^zparser_conv_period(region_type *region, const char *periodstr)$/;"	f
zparser_conv_period	nsd/zonec.c	/^zparser_conv_period(region_type *region, const char *periodstr)$/;"	f
zparser_conv_rrtype	include/zonec.c	/^zparser_conv_rrtype(region_type *region, const char *text)$/;"	f
zparser_conv_rrtype	nsd/zonec.c	/^zparser_conv_rrtype(region_type *region, const char *text)$/;"	f
zparser_conv_serial	include/zonec.c	/^zparser_conv_serial(region_type *region, const char *serialstr)$/;"	f
zparser_conv_serial	nsd/zonec.c	/^zparser_conv_serial(region_type *region, const char *serialstr)$/;"	f
zparser_conv_services	include/zonec.c	/^zparser_conv_services(region_type *region, const char *protostr,$/;"	f
zparser_conv_services	nsd/zonec.c	/^zparser_conv_services(region_type *region, const char *protostr,$/;"	f
zparser_conv_short	include/zonec.c	/^zparser_conv_short(region_type *region, const char *text)$/;"	f
zparser_conv_short	nsd/zonec.c	/^zparser_conv_short(region_type *region, const char *text)$/;"	f
zparser_conv_tag	include/zonec.c	/^zparser_conv_tag(region_type *region, const char *text, size_t len)$/;"	f
zparser_conv_tag	nsd/zonec.c	/^zparser_conv_tag(region_type *region, const char *text, size_t len)$/;"	f
zparser_conv_text	include/zonec.c	/^zparser_conv_text(region_type *region, const char *text, size_t len)$/;"	f
zparser_conv_text	nsd/zonec.c	/^zparser_conv_text(region_type *region, const char *text, size_t len)$/;"	f
zparser_conv_time	include/zonec.c	/^zparser_conv_time(region_type *region, const char *time)$/;"	f
zparser_conv_time	nsd/zonec.c	/^zparser_conv_time(region_type *region, const char *time)$/;"	f
zparser_create	nsd/zparser.c	/^zparser_create(region_type *region, region_type *rr_region, namedb_type *db)$/;"	f
zparser_init	nsd/zparser.c	/^zparser_init(const char *filename, uint32_t ttl, uint16_t klass,$/;"	f
zparser_stack	nsd/zlexer.c	/^static zparser_type zparser_stack[MAXINCLUDES];$/;"	v	file:
zparser_ttl2int	include/zonec.c	/^zparser_ttl2int(const char *ttlstr, int* error)$/;"	f
zparser_ttl2int	nsd/zonec.c	/^zparser_ttl2int(const char *ttlstr, int* error)$/;"	f
zparser_type	include/zonec.h	/^typedef struct zparser zparser_type;$/;"	t	typeref:struct:zparser
zrdatacmp	include/zonec.c	/^zrdatacmp(uint16_t type, rr_type *a, rr_type *b)$/;"	f	file:
zrdatacmp	nsd/zonec.c	/^zrdatacmp(uint16_t type, rr_type *a, rr_type *b)$/;"	f	file:
